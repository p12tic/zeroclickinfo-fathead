std::accumulate	A										<pre><code>template< class InputIt, class T >\\nT accumulate( InputIt first, InputIt last, T init );\\n< more overloads available ></code></pre>Computes the sum of the given value <code>init</code> and the elements in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/accumulate Cppreference]
std::adjacent_difference	A										<pre><code>template< class InputIt, class OutputIt >\\nOutputIt adjacent_difference( InputIt first, InputIt last, \\n                                    OutputIt d_first );\\n< more overloads available ></code></pre>Computes the differences between the second and the first of each adjacent pair of elements of the range <code>[first, last)</code> and writes them to the range beginning at <code>d_first + 1</code>.	[http://en.cppreference.com/w/cpp/algorithm/adjacent_difference Cppreference]
std::adjacent_find	A										<pre><code>template< class ForwardIt >\\nForwardIt adjacent_find( ForwardIt first, ForwardIt last );\\n< more overloads available ></code></pre>Searches the range <code>[first, last)</code> for two consecutive identical elements.	[http://en.cppreference.com/w/cpp/algorithm/adjacent_find Cppreference]
std::binary_search	A										<pre><code>template< class ForwardIt, class T >\\nbool binary_search( ForwardIt first, ForwardIt last, const T& value );\\n< more overloads available ></code></pre>Checks if the sorted range <code>[first, last)</code> contains an element equal to <code>value</code>.	[http://en.cppreference.com/w/cpp/algorithm/binary_search Cppreference]
std::bsearch	A										<pre><code>void* bsearch( const void* key, const void* ptr, size_t count, size_t size,\\n               int (*comp)(const void*, const void*) );</code></pre>Finds an element equal to element pointed to by <code>key</code> in a sorted array pointed to by <code>ptr</code>.	[http://en.cppreference.com/w/cpp/algorithm/bsearch Cppreference]
std::copy	A										<pre><code>template< class InputIt, class OutputIt >\\nOutputIt copy( InputIt first, InputIt last, OutputIt d_first );\\n< more overloads available ></code></pre>Copies the elements in the range, defined by <code>[first, last)</code>, to another range beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/copy Cppreference]
std::copy_if	A										<pre><code>template< class InputIt, class OutputIt, class UnaryPredicate >\\nOutputIt copy_if( InputIt first, InputIt last,\\n                  OutputIt d_first,\\n                  UnaryPredicate pred );</code></pre>Copies the elements in the range, defined by <code>[first, last)</code>, to another range beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/copy Cppreference]
std::copy_backward	A										<pre><code>template< class BidirIt1, class BidirIt2 >\\nBidirIt2 copy_backward( BidirIt1 first, BidirIt1 last, BidirIt2 d_last );</code></pre>Copies the elements from the range, defined by <code>[first, last)</code>, to another range ending at <code>d_last</code>.	[http://en.cppreference.com/w/cpp/algorithm/copy_backward Cppreference]
std::copy_n	A										<pre><code>template< class InputIt, class Size, class OutputIt >\\nOutputIt copy_n( InputIt first, Size count, OutputIt result );</code></pre>Copies exactly <code>count</code> values from the range beginning at <code>first</code> to the range beginning at <code>result</code>, if <code>count&gt;0</code>.	[http://en.cppreference.com/w/cpp/algorithm/copy_n Cppreference]
std::count	A										<pre><code>template< class InputIt, class T >\\ntypename iterator_traits<InputIt>::difference_type\\n    count( InputIt first, InputIt last, const T &value );\\n< more overloads available ></code></pre>Returns the number of elements in the range <code>[first, last)</code> satisfying specific criteria.	[http://en.cppreference.com/w/cpp/algorithm/count Cppreference]
std::count_if	A										<pre><code>template< class InputIt, class UnaryPredicate >\\ntypename iterator_traits<InputIt>::difference_type\\n    count_if( InputIt first, InputIt last, UnaryPredicate p );</code></pre>Returns the number of elements in the range <code>[first, last)</code> satisfying specific criteria.	[http://en.cppreference.com/w/cpp/algorithm/count Cppreference]
std::equal	A										<pre><code>template< class InputIt1, class InputIt2 >\\nbool equal( InputIt1 first1, InputIt1 last1, \\n            InputIt2 first2, InputIt2 last2 );\\n< more overloads available ></code></pre>Returns <code>true</code> if the ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> are considered equal, where <code>last2</code> denotes <code>first2 + (last1 - first1)</code> if it was not given.	[http://en.cppreference.com/w/cpp/algorithm/equal Cppreference]
std::equal_range	A										<pre><code>template< class ForwardIt, class T >\\nstd::pair<ForwardIt,ForwardIt> \\n    equal_range( ForwardIt first, ForwardIt last,\\n                 const T& value );\\n< more overloads available ></code></pre>Returns a range containing all elements equal to <code>value</code> in the sorted range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/equal_range Cppreference]
std::fill	A										<pre><code>template< class ForwardIt, class T >\\nvoid fill( ForwardIt first, ForwardIt last, const T& value );</code></pre>Assigns the given <code>value</code> to the elements in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/fill Cppreference]
std::find	A										<pre><code>template< class InputIt, class T >\\nInputIt find( InputIt first, InputIt last, const T& value );\\n< more overloads available ></code></pre>Returns the first element in the range <code>[first, last)</code> that satisfies specific criteria:...	[http://en.cppreference.com/w/cpp/algorithm/find Cppreference]
std::find_if	A										<pre><code>template< class InputIt, class UnaryPredicate >\\nInputIt find_if( InputIt first, InputIt last, \\n                 UnaryPredicate p );\\n< more overloads available ></code></pre>Returns the first element in the range <code>[first, last)</code> that satisfies specific criteria:...	[http://en.cppreference.com/w/cpp/algorithm/find Cppreference]
std::find_if_not	A										<pre><code>template< class InputIt, class UnaryPredicate >\\nInputIt find_if_not( InputIt first, InputIt last, \\n                     UnaryPredicate q );</code></pre>Returns the first element in the range <code>[first, last)</code> that satisfies specific criteria:...	[http://en.cppreference.com/w/cpp/algorithm/find Cppreference]
std::find_end	A										<pre><code>template< class ForwardIt1, class ForwardIt2 >\\nForwardIt1 find_end( ForwardIt1 first, ForwardIt1 last,\\n                     ForwardIt2 s_first, ForwardIt2 s_last );\\n< more overloads available ></code></pre>Searches for the last subsequence of elements <code>[s_first, s_last)</code> in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/find_end Cppreference]
std::for_each	A										<pre><code>template< class InputIt, class UnaryFunction >\\nUnaryFunction for_each( InputIt first, InputIt last, UnaryFunction f );</code></pre>Applies the given function object <code>f</code> to the result of dereferencing every iterator in the range <code>[first, last)</code>, in order.	[http://en.cppreference.com/w/cpp/algorithm/for_each Cppreference]
std::generate	A										<pre><code>template< class ForwardIt, class Generator >\\nvoid generate( ForwardIt first, ForwardIt last, Generator g );</code></pre>Assigns each element in range <code>[first, last)</code> a value generated by the given function object <code>g</code>.	[http://en.cppreference.com/w/cpp/algorithm/generate Cppreference]
std::includes	A										<pre><code>template< class InputIt1, class InputIt2 >\\nbool includes( InputIt1 first1, InputIt1 last1,\\n               InputIt2 first2, InputIt2 last2 );\\n< more overloads available ></code></pre>Returns <code>true</code> if every element from the sorted range <code>[first2, last2)</code> is found within the sorted range <code>[first1, last1)</code>.	[http://en.cppreference.com/w/cpp/algorithm/includes Cppreference]
std::inner_product	A										<pre><code>template< class InputIt1, class InputIt2, class T >\\nT inner_product( InputIt1 first1, InputIt1 last1,\\n                 InputIt2 first2, T value );\\n< more overloads available ></code></pre>Computes inner product  of the range <code>[first1, last1)</code> and another range beginning at <code>first2</code>.	[http://en.cppreference.com/w/cpp/algorithm/inner_product Cppreference]
std::inplace_merge	A										<pre><code>template< class BidirIt >\\nvoid inplace_merge( BidirIt first, BidirIt middle, BidirIt last );\\n< more overloads available ></code></pre>Merges two consecutive sorted ranges <code>[first, middle)</code> and <code>[middle, last)</code> into one sorted range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/inplace_merge Cppreference]
std::iota	A										<pre><code>template< class ForwardIterator, class T >\\nvoid iota( ForwardIterator first, ForwardIterator last, T value );</code></pre>Fills the range <code>[first, last)</code> with sequentially increasing values, starting with <code>value</code> and repetitively evaluating <code>++value</code>.	[http://en.cppreference.com/w/cpp/algorithm/iota Cppreference]
std::is_heap	A										<pre><code>template< class RandomIt >\\nbool is_heap( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Checks if the elements in range <code>[first, last)</code> are a <i>heap</i>.	[http://en.cppreference.com/w/cpp/algorithm/is_heap Cppreference]
std::is_heap_until	A										<pre><code>template< class RandomIt >\\nRandomIt is_heap_until( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Examines the range <code>[first, last)</code> and finds the largest range beginning at <code>first</code> which is <i>heap</i>.	[http://en.cppreference.com/w/cpp/algorithm/is_heap_until Cppreference]
std::is_partitioned	A										<pre><code>template< class InputIt, class UnaryPredicate >\\nbool is_partitioned( InputIt first, InputIt last, UnaryPredicate p );</code></pre>Returns <code>true</code> if all elements in the range <code>[first, last)</code> that satisfy the predicate <code>p</code> appear before all elements that don't.	[http://en.cppreference.com/w/cpp/algorithm/is_partitioned Cppreference]
std::is_permutation	A										<pre><code>template< class ForwardIt1, class ForwardIt2 >\\nbool is_permutation( ForwardIt1 first1, ForwardIt1 last1,\\n                     ForwardIt2 first2, ForwardIt2 last2 );\\n< more overloads available ></code></pre>Returns <code>true</code> if there exists a permutation of the elements in the range <code>[first1, last1)</code> that makes that range equal to the range <code>[first2,last)</code>, where <code>last2</code> denotes <code>first2 + (last1 - first1)</code> if it was...	[http://en.cppreference.com/w/cpp/algorithm/is_permutation Cppreference]
std::is_sorted	A										<pre><code>template< class ForwardIt >\\nbool is_sorted( ForwardIt first, ForwardIt last );\\n< more overloads available ></code></pre>Checks if the elements in range <code>[first, last)</code> are sorted in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/is_sorted Cppreference]
std::is_sorted_until	A										<pre><code>template< class ForwardIt >\\nForwardIt is_sorted_until( ForwardIt first, ForwardIt last );\\n< more overloads available ></code></pre>Examines the range <code>[first, last)</code> and finds the largest range beginning at <code>first</code> in which the elements are sorted in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/is_sorted_until Cppreference]
std::iter_swap	A										<pre><code>template< class ForwardIt1, class ForwardIt2 >\\nvoid iter_swap( ForwardIt1 a, ForwardIt2 b );</code></pre>Swaps the values of the elements the given iterators are pointing to.	[http://en.cppreference.com/w/cpp/algorithm/iter_swap Cppreference]
std::lexicographical_compare	A										<pre><code>template< class InputIt1, class InputIt2 >\\nbool lexicographical_compare( InputIt1 first1, InputIt1 last1,\\n                              InputIt2 first2, InputIt2 last2 );\\n< more overloads available ></code></pre>Checks if the first range <code>[first1, last1)</code> is lexicographically <i>less</i> than the second range <code>[first2, last2)</code>.	[http://en.cppreference.com/w/cpp/algorithm/lexicographical_compare Cppreference]
std::lower_bound	A										<pre><code>template< class ForwardIt, class T >\\nForwardIt lower_bound( ForwardIt first, ForwardIt last, const T& value );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element in the range <code>[first, last)</code> that is not <i>less</i> than <code>value</code>.	[http://en.cppreference.com/w/cpp/algorithm/lower_bound Cppreference]
std::make_heap	A										<pre><code>template< class RandomIt >\\nvoid make_heap( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Constructs a <i>heap</i> in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/make_heap Cppreference]
std::max	A										<pre><code>template< class T > \\nconst T& max( const T& a, const T& b );\\n< more overloads available ></code></pre>1-2) Returns the greater of the two values.	[http://en.cppreference.com/w/cpp/algorithm/max Cppreference]
std::max_element	A										<pre><code>template< class ForwardIt > \\nForwardIt max_element( ForwardIt first, ForwardIt last );\\n< more overloads available ></code></pre>Finds the greatest element in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/max_element Cppreference]
std::merge	A										<pre><code>template< class InputIt1, class InputIt2, class OutputIt >\\nOutputIt merge( InputIt1 first1, InputIt1 last1,\\n                InputIt2 first2, InputIt2 last2,\\n                OutputIt d_first );\\n< more overloads available ></code></pre>Merges two sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> into one sorted range beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/merge Cppreference]
std::min	A										<pre><code>template< class T > \\nconst T& min( const T& a, const T& b );\\n< more overloads available ></code></pre>1-2) Returns the smaller of the two values.	[http://en.cppreference.com/w/cpp/algorithm/min Cppreference]
std::min_element	A										<pre><code>template< class ForwardIt > \\nForwardIt min_element( ForwardIt first, ForwardIt last );\\n< more overloads available ></code></pre>Finds the smallest element in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/min_element Cppreference]
std::minmax_element	A										<pre><code>template< class ForwardIt > \\nstd::pair<ForwardIt,ForwardIt> \\n    minmax_element( ForwardIt first, ForwardIt last );\\n< more overloads available ></code></pre>Finds the greatest and the smallest element in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/minmax_element Cppreference]
std::mismatch	A										<pre><code>template< class InputIt1, class InputIt2 >\\nstd::pair<InputIt1,InputIt2>\\n    mismatch( InputIt1 first1, InputIt1 last1,\\n              InputIt2 first2, InputIt2 last2 );\\n< more overloads available ></code></pre>Returns the first mismatching pair of elements from two ranges: one defined by <code>[first1, last1)</code> and another defined by <code>[first2,last2)</code>.	[http://en.cppreference.com/w/cpp/algorithm/mismatch Cppreference]
std::move	A										<pre><code>template< class InputIt, class OutputIt >\\nOutputIt move( InputIt first, InputIt last, OutputIt d_first );</code></pre>Moves the elements in the range <code>[first, last)</code>, to another range beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/move Cppreference]
std::move_backward	A										<pre><code>template< class BidirIt1, class BidirIt2 >\\nBidirIt2 move_backward( BidirIt1 first, BidirIt1 last, BidirIt2 d_last );</code></pre>Moves the elements from the range <code>[first, last)</code>, to another range ending at <code>d_last</code>.	[http://en.cppreference.com/w/cpp/algorithm/move_backward Cppreference]
std::next_permutation	A										<pre><code>template< class BidirIt >\\nbool next_permutation( BidirIt first, BidirIt last );\\n< more overloads available ></code></pre>Transforms the range <code>[first, last)</code> into the next permutation from the set of all permutations that are lexicographically ordered with respect to <code>operator&lt;</code> or <code>comp</code>.	[http://en.cppreference.com/w/cpp/algorithm/next_permutation Cppreference]
std::nth_element	A										<pre><code>template< class RandomIt >\\nvoid nth_element( RandomIt first, RandomIt nth, RandomIt last );\\n< more overloads available ></code></pre>Partially sorts the range <code>[first, last)</code> in ascending order so that all elements in the range <code>[first, nth)</code> are <i>less</i> than those in the range <code>[nth, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/nth_element Cppreference]
std::partial_sort	A										<pre><code>template< class RandomIt >\\nvoid partial_sort( RandomIt first, RandomIt middle, RandomIt last );\\n< more overloads available ></code></pre>Sorts some of the elements in the range <code>[first, last)</code> in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/partial_sort Cppreference]
std::partial_sort_copy	A										<pre><code>template< class InputIt, class RandomIt >\\nRandomIt partial_sort_copy( InputIt first, InputIt last,\\n                            RandomIt d_first, RandomIt d_last );\\n< more overloads available ></code></pre>Sorts some of the elements in the range <code>[first, last)</code> in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/partial_sort_copy Cppreference]
std::partial_sum	A										<pre><code>template< class InputIt, class OutputIt >\\nOutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first );\\n< more overloads available ></code></pre>Computes the partial sums of the elements in the subranges of the range <code>[first, last)</code> and writes them to the range beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/partial_sum Cppreference]
std::partition_copy	A										<pre><code>template< class InputIt, class OutputIt1,\\n          class OutputIt2, class UnaryPredicate >\\nstd::pair<OutputIt1, OutputIt2>\\n     partition_copy( InputIt first, InputIt last,\\n                     OutputIt1 d_first_true, OutputIt2 d_first_false,\\n                     UnaryPredicate p );</code></pre>Copies the elements from the range <code>[first, last)</code> to two different ranges depending on the value returned by the predicate <code>p</code>.	[http://en.cppreference.com/w/cpp/algorithm/partition_copy Cppreference]
std::partition_point	A										<pre><code>template< class ForwardIt, class UnaryPredicate >\\nForwardIt partition_point( ForwardIt first, ForwardIt last, UnaryPredicate p);</code></pre>Examines the partitioned (as if by std::partition) range <code>[first, last)</code> and locates the end of the first partition.	[http://en.cppreference.com/w/cpp/algorithm/partition_point Cppreference]
std::pop_heap	A										<pre><code>template< class RandomIt >\\nvoid pop_heap( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Swaps the value in the position <code>first</code> and the value in the position <code>last-1</code> and makes the subrange <code>[first, last-1)</code> into a <i>heap</i>.	[http://en.cppreference.com/w/cpp/algorithm/pop_heap Cppreference]
std::prev_permutation	A										<pre><code>template< class BidirIt >\\nbool prev_permutation( BidirIt first, BidirIt last);\\n< more overloads available ></code></pre>Transforms the range <code>[first, last)</code> into the previous permutation from the set of all permutations that are lexicographically ordered with respect to <code>operator&lt;</code> or <code>comp</code>.	[http://en.cppreference.com/w/cpp/algorithm/prev_permutation Cppreference]
std::push_heap	A										<pre><code>template< class RandomIt >\\nvoid push_heap( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Inserts the element at the position <code>last-1</code> into the heap defined by the range <code>[first, last-1)</code>.	[http://en.cppreference.com/w/cpp/algorithm/push_heap Cppreference]
std::qsort	A										<pre><code>void qsort( const void *ptr, std::size_t count, std::size_t size,\\n            int (*comp)(const void *, const void *) );</code></pre>Sorts the given array pointed to by <code>ptr</code> in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/qsort Cppreference]
std::random_shuffle	A										<pre><code>template< class RandomIt >\\nvoid random_shuffle( RandomIt first, RandomIt last );</code></pre>Reorders the elements in the given range <code>[first, last)</code> such that each possible permutation of those elements has equal probability of appearance.	[http://en.cppreference.com/w/cpp/algorithm/random_shuffle Cppreference]
std::shuffle	A										<pre><code>template< class RandomIt >\\nvoid random_shuffle( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Reorders the elements in the given range <code>[first, last)</code> such that each possible permutation of those elements has equal probability of appearance.	[http://en.cppreference.com/w/cpp/algorithm/random_shuffle Cppreference]
std::remove	A										<pre><code>template< class ForwardIt, class T >\\nForwardIt remove( ForwardIt first, ForwardIt last, const T& value );\\n< more overloads available ></code></pre>Removes all elements satisfying specific criteria from the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/remove Cppreference]
std::remove_if	A										<pre><code>template< class ForwardIt, class UnaryPredicate >\\nForwardIt remove_if( ForwardIt first, ForwardIt last, UnaryPredicate p );</code></pre>Removes all elements satisfying specific criteria from the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/remove Cppreference]
std::remove_copy	A										<pre><code>template< class InputIt, class OutputIt, class T >\\nOutputIt remove_copy( InputIt first, InputIt last, OutputIt d_first,\\n                      const T& value );\\n< more overloads available ></code></pre>Copies elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code>, omitting the elements which satisfy specific criteria.	[http://en.cppreference.com/w/cpp/algorithm/remove_copy Cppreference]
std::remove_copy_if	A										<pre><code>template< class InputIt, class OutputIt, class UnaryPredicate >\\nOutputIt remove_copy_if( InputIt first, InputIt last, OutputIt d_first,\\n                         UnaryPredicate p );</code></pre>Copies elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code>, omitting the elements which satisfy specific criteria.	[http://en.cppreference.com/w/cpp/algorithm/remove_copy Cppreference]
std::replace	A										<pre><code>template< class ForwardIt, class T >\\nvoid replace( ForwardIt first, ForwardIt last,\\n              const T& old_value, const T& new_value );\\n< more overloads available ></code></pre>Replaces all elements satisfying specific criteria with <code>new_value</code> in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/replace Cppreference]
std::replace_if	A										<pre><code>template< class ForwardIt, class UnaryPredicate, class T >\\nvoid replace_if( ForwardIt first, ForwardIt last,\\n                 UnaryPredicate p, const T& new_value );</code></pre>Replaces all elements satisfying specific criteria with <code>new_value</code> in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/replace Cppreference]
std::replace_copy	A										<pre><code>template< class InputIt, class OutputIt, class T >\\nOutputIt replace_copy( InputIt first, InputIt last, OutputIt d_first,\\n                       const T& old_value, const T& new_value );\\n< more overloads available ></code></pre>Copies the all elements from the range <code>[first, last)</code> to another range beginning at <code>d_first</code> replacing all elements satisfying specific criteria with <code>new_value</code>.	[http://en.cppreference.com/w/cpp/algorithm/replace_copy Cppreference]
std::replace_copy_if	A										<pre><code>template< class InputIt, class OutputIt, class UnaryPredicate, class T >\\nOutputIt replace_copy_if( InputIt first, InputIt last, OutputIt d_first,\\n                          UnaryPredicate p, const T& new_value );</code></pre>Copies the all elements from the range <code>[first, last)</code> to another range beginning at <code>d_first</code> replacing all elements satisfying specific criteria with <code>new_value</code>.	[http://en.cppreference.com/w/cpp/algorithm/replace_copy Cppreference]
std::reverse	A										<pre><code>template< class BidirIt >\\nvoid reverse( BidirIt first, BidirIt last );</code></pre>Reverses the order of the elements in the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/reverse Cppreference]
std::reverse_copy	A										<pre><code>template< class BidirIt, class OutputIt >\\nOutputIt reverse_copy( BidirIt first, BidirIt last, OutputIt d_first );</code></pre>Copies the elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code> in such a way, that the elements in the new range are in reverse order.	[http://en.cppreference.com/w/cpp/algorithm/reverse_copy Cppreference]
std::rotate_copy	A										<pre><code>template< class ForwardIt, class OutputIt >\\nOutputIt rotate_copy( ForwardIt first, ForwardIt n_first,\\n                      ForwardIt last, OutputIt d_first );</code></pre>Copies the elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code> in such a way, that the element <code>n_first</code> becomes the first element of the new range and <code>n_first - 1</code> becomes the...	[http://en.cppreference.com/w/cpp/algorithm/rotate_copy Cppreference]
std::search	A										<pre><code>template< class ForwardIt1, class ForwardIt2 >\\nForwardIt1 search( ForwardIt1 first, ForwardIt1 last,\\n                   ForwardIt2 s_first, ForwardIt2 s_last );\\n< more overloads available ></code></pre>Searches for the first subsequence of elements <code>[s_first, s_last)</code> in the range <code>[first, last - (s_last - s_first))</code>.	[http://en.cppreference.com/w/cpp/algorithm/search Cppreference]
std::search_n	A										<pre><code>template< class ForwardIt, class Size, class T >\\nForwardIt1 search_n( ForwardIt first, ForwardIt last, Size count, const T& value );\\n< more overloads available ></code></pre>Searches the range <code>[first, last)</code> for the first sequence of count identical elements, each equal to the given value value.	[http://en.cppreference.com/w/cpp/algorithm/search_n Cppreference]
std::set_difference	A										<pre><code>template< class InputIt1, class InputIt2, class OutputIt >\\nOutputIt set_difference( InputIt1 first1, InputIt1 last1,\\n                         InputIt2 first2, InputIt2 last2,\\n                         OutputIt d_first );\\n< more overloads available ></code></pre>Copies the elements from the sorted range <code>[first1, last1)</code> which are not found in the sorted range <code>[first2, last2)</code> to the range beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/set_difference Cppreference]
std::set_intersection	A										<pre><code>template< class InputIt1, class InputIt2, class OutputIt >\\nOutputIt set_intersection( InputIt1 first1, InputIt1 last1,\\n                           InputIt2 first2, InputIt2 last2,\\n                           OutputIt d_first );\\n< more overloads available ></code></pre>Constructs a sorted range beginning at <code>d_first</code> consisting of elements that are found in both sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>.	[http://en.cppreference.com/w/cpp/algorithm/set_intersection Cppreference]
std::set_symmetric_difference	A										<pre><code>template< class InputIt1, class InputIt2, class OutputIt >\\nOutputIt set_symmetric_difference( InputIt1 first1, InputIt1 last1,\\n                                   InputIt2 first2, InputIt2 last2,\\n                                   OutputIt d_first );\\n< more overloads available ></code></pre>Computes symmetric difference of two sorted ranges: the elements that are found in either of the ranges, but not in both of them are copied to the range beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference Cppreference]
std::set_union	A										<pre><code>template< class InputIt1, class InputIt2, class OutputIt >\\nOutputIt set_union( InputIt1 first1, InputIt1 last1,\\n                    InputIt2 first2, InputIt2 last2,\\n                    OutputIt d_first );\\n< more overloads available ></code></pre>Constructs a sorted range beginning at <code>d_first</code> consisting of all elements present in one or both sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>.	[http://en.cppreference.com/w/cpp/algorithm/set_union Cppreference]
std::sort	A										<pre><code>template< class RandomIt >\\nvoid sort( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Sorts the elements in the range <code>[first, last)</code> in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/sort Cppreference]
std::sort_heap	A										<pre><code>template< class RandomIt >\\nvoid sort_heap( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Converts the heap <code>[first, last)</code> into a sorted range in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/sort_heap Cppreference]
std::stable_partition	A										<pre><code>template< class BidirIt, class UnaryPredicate >\\nBidirIt stable_partition( BidirIt first, BidirIt last, UnaryPredicate p );</code></pre>Reorders the elements in the range <code>[first, last)</code> in such a way that all elements for which the predicate <code>p</code> returns <code>true</code> precede the elements for which predicate <code>p</code> returns <code>false</code>.	[http://en.cppreference.com/w/cpp/algorithm/stable_partition Cppreference]
std::stable_sort	A										<pre><code>template< class RandomIt >\\nvoid stable_sort( RandomIt first, RandomIt last );\\n< more overloads available ></code></pre>Sorts the elements in the range <code>[first, last)</code> in ascending order.	[http://en.cppreference.com/w/cpp/algorithm/stable_sort Cppreference]
std::swap	A										<pre><code>template< class T >\\nvoid swap( T& a, T& b );\\n< more overloads available ></code></pre>Exchanges the given values.	[http://en.cppreference.com/w/cpp/algorithm/swap Cppreference]
std::swap_ranges	A										<pre><code>template< class ForwardIt1, class ForwardIt2 >\\nForwardIt2 swap_ranges( ForwardIt1 first1, ForwardIt1 last1, ForwardIt2 first2 )</code></pre>Exchanges elements between range <code>[first1, last1)</code> and another range starting at <code>first2</code>.	[http://en.cppreference.com/w/cpp/algorithm/swap_ranges Cppreference]
std::transform	A										<pre><code>template< class InputIt, class OutputIt, class UnaryOperation >\\nOutputIt transform( InputIt first1, InputIt last1, OutputIt d_first,\\n                    UnaryOperation unary_op );\\n< more overloads available ></code></pre><code>std::transform</code> applies the given function to a range and stores the result in another range, beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/algorithm/transform Cppreference]
std::unique	A										<pre><code>template< class ForwardIt >\\nForwardIt unique( ForwardIt first, ForwardIt last );\\n< more overloads available ></code></pre>Removes all consecutive duplicate elements from the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/algorithm/unique Cppreference]
std::unique_copy	A										<pre><code>template< class InputIt, class OutputIt >\\nForwardIt unique_copy( InputIt first, InputIt last,\\n                       OutputIt d_first );\\n< more overloads available ></code></pre>Copies the elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code> in such a way that there are no consecutive equal elements.	[http://en.cppreference.com/w/cpp/algorithm/unique_copy Cppreference]
std::upper_bound	A										<pre><code>template< class ForwardIt, class T >\\nForwardIt upper_bound( ForwardIt first, ForwardIt last, const T& value );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element in the range <code>[first, last)</code> that is <i>greater</i> than <code>value</code>.	[http://en.cppreference.com/w/cpp/algorithm/upper_bound Cppreference]
ATOMIC_VAR_INIT	A										<pre><code>#define ATOMIC_VAR_INIT(value) /* implementation-defined */</code></pre>Expands the an expression which can be used to initialize an std::atomic object that can be initialized from <code>value</code>.	[http://en.cppreference.com/w/cpp/atomic/ATOMIC_VAR_INIT Cppreference]
std::atomic	A										<pre><code>template< class T >\\nstruct atomic;\\n< more overloads available ></code></pre>Each instantiation and full specialization of the <code>std::atomic</code> template defines an atomic type.	[http://en.cppreference.com/w/cpp/atomic/atomic Cppreference]
std::atomic::compare_exchange_strong	A										<pre><code>bool compare_exchange_strong( T& expected, T desired,\\n                              std::memory_order success, \\n                              std::memory_order failure );\\nbool compare_exchange_strong( T& expected, T desired,\\n                              std::memory_order success, \\n                              std::memory_order failure ) volatile;\\n< more overloads available ></code></pre>Atomically compares the value stored in <code>*this</code> with the value pointed to by <code>expected</code>, and if those are equal, replaces the former with <code>desired</code> (performs read-modify-write operation).	[http://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange Cppreference]
std::atomic::compare_exchange_weak	A										<pre><code>bool compare_exchange_weak( T& expected, T desired,\\n                            std::memory_order success, \\n                            std::memory_order failure );\\nbool compare_exchange_weak( T& expected, T desired,\\n                            std::memory_order success, \\n                            std::memory_order failure ) volatile;\\n< more overloads available ></code></pre>Atomically compares the value stored in <code>*this</code> with the value pointed to by <code>expected</code>, and if those are equal, replaces the former with <code>desired</code> (performs read-modify-write operation).	[http://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange Cppreference]
std::atomic::exchange	A										<pre><code>T exchange( T desired, memory_order = std::memory_order_seq_cst );\\n< more overloads available ></code></pre>Atomically replaces the underlying value with <code>desired</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/exchange Cppreference]
std::atomic::fetch_add	A										<pre><code>T fetch_add( T arg, \\n             memory_order = std::memory_order_seq_cst );\\nT fetch_add( T arg, \\n             memory_order = std::memory_order_seq_cst ) volatile;\\n< more overloads available ></code></pre>Atomically replaces the current value with the result of arithmetic addition of the value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/fetch_add Cppreference]
std::atomic::fetch_and	A										<pre><code>T fetch_and( T arg, \\n             memory_order = std::memory_order_seq_cst );\\nT fetch_and( T arg, \\n             memory_order = std::memory_order_seq_cst ) volatile;</code></pre>Atomically replaces the current value with the result of bitwise AND of the value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/fetch_and Cppreference]
std::atomic::fetch_or	A										<pre><code>T fetch_or( T arg, \\n             memory_order = std::memory_order_seq_cst );\\nT fetch_or( T arg, \\n             memory_order = std::memory_order_seq_cst ) volatile;</code></pre>Atomically replaces the current value with the result of bitwise OR of the value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/fetch_or Cppreference]
std::atomic::fetch_sub	A										<pre><code>T fetch_sub( T arg, \\n             memory_order = std::memory_order_seq_cst );\\nT fetch_sub( T arg, \\n             memory_order = std::memory_order_seq_cst ) volatile;\\n< more overloads available ></code></pre>Atomically replaces the current value with the result of arithmetic subtraction of the value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/fetch_sub Cppreference]
std::atomic::fetch_xor	A										<pre><code>T fetch_xor( T arg, \\n             memory_order = std::memory_order_seq_cst );\\nT fetch_xor( T arg, \\n             memory_order = std::memory_order_seq_cst ) volatile;</code></pre>Atomically replaces the current value with the result of bitwise XOR of the value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/fetch_xor Cppreference]
std::atomic::is_lock_free	A										<pre><code>bool is_lock_free() const;\\n< more overloads available ></code></pre>Checks whether the atomic operations on the object are lock-free.	[http://en.cppreference.com/w/cpp/atomic/atomic/is_lock_free Cppreference]
std::atomic::load	A										<pre><code>T load( memory_order = std::memory_order_seq_cst ) const;\\n< more overloads available ></code></pre>Atomically loads and returns the current value of the atomic variable.	[http://en.cppreference.com/w/cpp/atomic/atomic/load Cppreference]
std::atomic::operator++	A										<pre><code>T operator++();\\nT operator++() volatile;\\n< more overloads available ></code></pre>Atomically increments or decrements the current value.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith Cppreference]
std::atomic::operator++(int)	A										<pre><code>T operator++();\\nT operator++() volatile;\\n< more overloads available ></code></pre>Atomically increments or decrements the current value.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith Cppreference]
std::atomic::operator--	A										<pre><code>T operator--();\\nT operator--() volatile;\\n< more overloads available ></code></pre>Atomically increments or decrements the current value.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith Cppreference]
std::atomic::operator--(int)	A										<pre><code>T operator--();\\nT operator--() volatile;\\n< more overloads available ></code></pre>Atomically increments or decrements the current value.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith Cppreference]
std::atomic::operator&=	A										<pre><code>T operator&=( T arg );\\nT operator&=( T arg ) volatile;</code></pre>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2 Cppreference]
std::atomic::operator+=	A										<pre><code>T operator+=( T arg );\\nT operator+=( T arg ) volatile;\\n< more overloads available ></code></pre>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2 Cppreference]
std::atomic::operator-=	A										<pre><code>T operator-=( T arg );\\nT operator-=( T arg ) volatile;\\n< more overloads available ></code></pre>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2 Cppreference]
std::atomic::operator^=	A										<pre><code>T operator^=( T arg );\\nT operator^=( T arg ) volatile;</code></pre>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2 Cppreference]
std::atomic::operator|=	A										<pre><code>T operator|=( T arg );\\nT operator|=( T arg ) volatile;</code></pre>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2 Cppreference]
std::atomic::store	A										<pre><code>void store( T desired, memory_order = std::memory_order_seq_cst );\\n< more overloads available ></code></pre>Atomically replaces the current value with <code>desired</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic/store Cppreference]
std::atomic_compare_exchange_strong	A										<pre><code>template< class T >\\nbool atomic_compare_exchange_strong( std::atomic<T>* obj,\\n                                     T* expected, T desired );\\ntemplate< class T >\\nbool atomic_compare_exchange_strong( volatile std::atomic<T>* obj,\\n                                     T* expected, T desired );\\n< more overloads available ></code></pre>Atomically compares the value pointed to by <code>obj</code> with the value pointed to by <code>expected</code>, and if those are equal, replaces the former with <code>desired</code> (performs read-modify-write operation).	[http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange Cppreference]
std::atomic_compare_exchange_strong_explicit	A										<pre><code>template< class T >\\nbool atomic_compare_exchange_strong_explicit( std::atomic<T>* obj,\\n                                              T* expected, T desired,\\n                                              std::memory_order succ, \\n                                              std::memory_order fail );\\ntemplate< class T >\\nbool atomic_compare_exchange_strong_explicit( volatile std::atomic<T>* obj, \\n                                              T* expected, T desired,\\n                                              std::memory_order succ, \\n                                              std::memory_order fail );</code></pre>Atomically compares the value pointed to by <code>obj</code> with the value pointed to by <code>expected</code>, and if those are equal, replaces the former with <code>desired</code> (performs read-modify-write operation).	[http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange Cppreference]
std::atomic_compare_exchange_weak	A										<pre><code>template< class T >\\nbool atomic_compare_exchange_weak( std::atomic<T>* obj, \\n                                   T* expected, T desired );\\ntemplate< class T >\\nbool atomic_compare_exchange_weak( volatile std::atomic<T>* obj, \\n                                   T* expected, T desired );\\n< more overloads available ></code></pre>Atomically compares the value pointed to by <code>obj</code> with the value pointed to by <code>expected</code>, and if those are equal, replaces the former with <code>desired</code> (performs read-modify-write operation).	[http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange Cppreference]
std::atomic_compare_exchange_weak_explicit	A										<pre><code>template< class T >\\nbool atomic_compare_exchange_weak_explicit( std::atomic<T>* obj,\\n                                            T* expected, T desired,\\n                                            std::memory_order succ, \\n                                            std::memory_order fail );\\ntemplate< class T >\\nbool atomic_compare_exchange_weak_explicit( volatile std::atomic<T>* obj,\\n                                            T* expected, T desired,\\n                                            std::memory_order succ, \\n                                            std::memory_order fail );</code></pre>Atomically compares the value pointed to by <code>obj</code> with the value pointed to by <code>expected</code>, and if those are equal, replaces the former with <code>desired</code> (performs read-modify-write operation).	[http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange Cppreference]
std::atomic_flag	A										<pre><code>class atomic_flag;</code></pre>std::atomic_flag is an atomic boolean type.	[http://en.cppreference.com/w/cpp/atomic/atomic_flag Cppreference]
std::atomic_flag::clear	A										<pre><code>void clear( std::memory_order order = std::memory_order_seq_cst ) volatile;\\n< more overloads available ></code></pre>Atomically changes the state of a std::atomic_flag to clear (<code>false</code>).	[http://en.cppreference.com/w/cpp/atomic/atomic_flag/clear Cppreference]
std::atomic_flag::operator=	A										<pre><code>atomic_flag& operator=( const atomic_flag& ) = delete;\\n< more overloads available ></code></pre>std::atomic_flag is not assignable, its assignment operators are deleted.	[http://en.cppreference.com/w/cpp/atomic/atomic_flag/operator= Cppreference]
std::atomic_flag::test_and_set	A										<pre><code>bool test_and_set(std::memory_order order = std::memory_order_seq_cst) volatile;\\n< more overloads available ></code></pre>Atomically changes the state of a std::atomic_flag to set (<code>true</code>) and returns the value it held before.	[http://en.cppreference.com/w/cpp/atomic/atomic_flag/test_and_set Cppreference]
std::atomic_init	A										<pre><code>template< class T >\\nvoid atomic_init( std::atomic<T>* obj, T desired );\\n< more overloads available ></code></pre>Initializes the default-constructed atomic object <code>object</code> with the value <code>desired</code>.	[http://en.cppreference.com/w/cpp/atomic/atomic_init Cppreference]
std::atomic_signal_fence	A										<pre><code>extern "C" void atomic_signal_fence( std::memory_order order );</code></pre>Establishes memory synchronization ordering of non-atomic and relaxed atomic accesses, as instructed by <code>order</code>, between a thread and a signal handler executed on the same thread.	[http://en.cppreference.com/w/cpp/atomic/atomic_signal_fence Cppreference]
std::atomic_thread_fence	A										<pre><code>extern "C" void atomic_thread_fence( std::memory_order order );</code></pre>Establishes memory synchronization ordering of non-atomic and relaxed atomic accesses, as instructed by <code>order</code>, without an associated atomic operation.	[http://en.cppreference.com/w/cpp/atomic/atomic_thread_fence Cppreference]
std::kill_dependency	A										<pre><code>template< class T >\\nT kill_dependency( T y );</code></pre>Informs the compiler that the dependency tree started by an std::memory_order_consume atomic load operation does not extend past the return value of std::kill_dependency;.	[http://en.cppreference.com/w/cpp/atomic/kill_dependency Cppreference]
std::asctime	A										<pre><code>char* asctime( const std::tm* time_ptr );</code></pre>Converts given calendar time std::tm to a textual representation.	[http://en.cppreference.com/w/cpp/chrono/c/asctime Cppreference]
std::clock	A										<pre><code>std::clock_t clock();</code></pre>Returns the approximate processor time used by the process since the beginning of an implementation-defined era related to the program's execution.	[http://en.cppreference.com/w/cpp/chrono/c/clock Cppreference]
std::ctime	A										<pre><code>char* ctime( const std::time_t* time );</code></pre>Converts given time since epoch to a calendar local time and then to a textual representation, as if by calling <code>std::asctime(std::localtime(time))</code>.	[http://en.cppreference.com/w/cpp/chrono/c/ctime Cppreference]
std::difftime	A										<pre><code>double difftime( std::time_t time_end, std::time_t time_beg );</code></pre>Computes difference between two calendar times as <code>time_t</code> objects (<code>time_end - time_beg</code>) in seconds.	[http://en.cppreference.com/w/cpp/chrono/c/difftime Cppreference]
std::gmtime	A										<pre><code>std::tm* gmtime( const time_t* time );</code></pre>Converts given time since epoch as std::time_t value into calendar time, expressed in Coordinated Universal Time (UTC).	[http://en.cppreference.com/w/cpp/chrono/c/gmtime Cppreference]
std::localtime	A										<pre><code>std::tm* localtime( const std::time_t *time );</code></pre>Converts given time since epoch as std::time_t value into calendar time, expressed in local time.	[http://en.cppreference.com/w/cpp/chrono/c/localtime Cppreference]
std::mktime	A										<pre><code>std::time_t mktime( std::tm* time );</code></pre>Converts local calendar time to a time since epoch as a <code>time_t</code> object.	[http://en.cppreference.com/w/cpp/chrono/c/mktime Cppreference]
std::strftime	A										<pre><code>std::size_t strftime( char* str, std::size_t count, const char* format, std::tm* time );</code></pre>Converts the date and time information from a given calendar time <code>time</code> to a null-terminated multibyte character string <code>str</code> according to format string <code>format</code>.	[http://en.cppreference.com/w/cpp/chrono/c/strftime Cppreference]
std::time	A										<pre><code>time_t time( std::time_t *time );</code></pre>Returns the current calendar time encoded as a std::time_t object.	[http://en.cppreference.com/w/cpp/chrono/c/time Cppreference]
std::wcsftime	A										<pre><code>std::size_t wcsftime( wchar_t* str, std::size_t count, const wchar_t* format, std::tm* time );</code></pre>Converts the date and time information from a given calendar time <code>time</code> to a null-terminated wide character string <code>str</code> according to format string <code>format</code>.	[http://en.cppreference.com/w/cpp/chrono/c/wcsftime Cppreference]
std::chrono::duration	A										<pre><code>template<\\n    class Rep, \\n    class Period = std::ratio<1> \\n> class duration;</code></pre>Class template <code>std::chrono::duration</code> represents a time interval.	[http://en.cppreference.com/w/cpp/chrono/duration Cppreference]
std::chrono::duration::count	A										<pre><code>constexpr rep count() const;</code></pre>Returns the number of ticks for this duration.	[http://en.cppreference.com/w/cpp/chrono/duration/count Cppreference]
std::chrono::duration_cast	A										<pre><code>template <class ToDuration, class Rep, class Period>\\nconstexpr ToDuration duration_cast(const duration<Rep,Period>& d);</code></pre>Converts a std::chrono::duration to a duration of different type <code>ToDuration</code>.	[http://en.cppreference.com/w/cpp/chrono/duration/duration_cast Cppreference]
std::chrono::duration::max	A										<pre><code>static constexpr duration max();</code></pre>Returns a duration with the largest possible value.	[http://en.cppreference.com/w/cpp/chrono/duration/max Cppreference]
std::chrono::duration::min	A										<pre><code>static constexpr duration min();</code></pre>Returns a duration with the lowest possible value.	[http://en.cppreference.com/w/cpp/chrono/duration/min Cppreference]
std::chrono::duration::operator=	A										<pre><code>duration& operator=(const duration &other) = default;</code></pre>Assigns the contents of one <code>duration</code> to another.	[http://en.cppreference.com/w/cpp/chrono/duration/operator= Cppreference]
std::chrono::duration::operator+	A										<pre><code>constexpr duration operator+() const;</code></pre>Implements unary plus and unary minus for the durations.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith Cppreference]
std::chrono::duration::operator-	A										<pre><code>constexpr duration operator-() const;</code></pre>Implements unary plus and unary minus for the durations.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith Cppreference]
std::chrono::duration::operator++	A										<pre><code>duration& operator++();\\n< more overloads available ></code></pre>Increments or decrements the number of ticks for this duration.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2 Cppreference]
std::chrono::duration::operator++(int)	A										<pre><code>duration& operator++();\\n< more overloads available ></code></pre>Increments or decrements the number of ticks for this duration.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2 Cppreference]
std::chrono::duration::operator--	A										<pre><code>duration& operator--();\\n< more overloads available ></code></pre>Increments or decrements the number of ticks for this duration.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2 Cppreference]
std::chrono::duration::operator--(int)	A										<pre><code>duration& operator--();\\n< more overloads available ></code></pre>Increments or decrements the number of ticks for this duration.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2 Cppreference]
std::chrono::duration::operator%=	A										<pre><code>duration& operator%=(const rep& rhs);\\n< more overloads available ></code></pre>Performs compound assignments between two durations with the same period or between a duration and a tick count value.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3 Cppreference]
std::chrono::duration::operator*=	A										<pre><code>duration& operator*=(const rep& rhs);</code></pre>Performs compound assignments between two durations with the same period or between a duration and a tick count value.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3 Cppreference]
std::chrono::duration::operator+=	A										<pre><code>duration& operator+=(const duration& d);</code></pre>Performs compound assignments between two durations with the same period or between a duration and a tick count value.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3 Cppreference]
std::chrono::duration::operator-=	A										<pre><code>duration& operator-=(const duration& d);</code></pre>Performs compound assignments between two durations with the same period or between a duration and a tick count value.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3 Cppreference]
std::chrono::duration::operator/=	A										<pre><code>duration& operator/=(const rep& rhs);</code></pre>Performs compound assignments between two durations with the same period or between a duration and a tick count value.	[http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3 Cppreference]
std::chrono::duration::zero	A										<pre><code>static constexpr duration zero();</code></pre>Returns a zero-length duration.	[http://en.cppreference.com/w/cpp/chrono/duration/zero Cppreference]
std::chrono::duration_values	A										<pre><code>template <class Rep>\\nstruct duration_values;</code></pre>The <code>std::chrono::duration_values</code> type defines three common durations:...	[http://en.cppreference.com/w/cpp/chrono/duration_values Cppreference]
std::chrono::duration_values::max	A										<pre><code>static constexpr Rep max();</code></pre>Returns the largest possible representation.	[http://en.cppreference.com/w/cpp/chrono/duration_values/max Cppreference]
std::chrono::duration_values::min	A										<pre><code>static constexpr Rep min();</code></pre>Returns the lowest possible representation.	[http://en.cppreference.com/w/cpp/chrono/duration_values/min Cppreference]
std::chrono::duration_values::zero	A										<pre><code>static constexpr Rep zero();</code></pre>Returns a zero-length representation.	[http://en.cppreference.com/w/cpp/chrono/duration_values/zero Cppreference]
std::chrono::high_resolution_clock	A										<pre><code>class high_resolution_clock;</code></pre>Class <code>std::chrono::high_resolution_clock</code> represents the clock with the smallest tick period provided by the implementation.	[http://en.cppreference.com/w/cpp/chrono/high_resolution_clock Cppreference]
std::chrono::steady_clock	A										<pre><code>class steady_clock;</code></pre>Class <code>std::chrono::steady_clock</code> represents a monotonic clock.	[http://en.cppreference.com/w/cpp/chrono/steady_clock Cppreference]
std::chrono::system_clock	A										<pre><code>class system_clock;</code></pre>Class <code>std::chrono::system_clock</code> represents the system-wide real time wall clock.	[http://en.cppreference.com/w/cpp/chrono/system_clock Cppreference]
std::chrono::system_clock::from_time_t	A										<pre><code>static std::chrono::time_point from_time_t( std::time_t t );</code></pre>Converts <code>t</code> to a time point type, using the coarser precision of the two types.	[http://en.cppreference.com/w/cpp/chrono/system_clock/from_time_t Cppreference]
std::chrono::time_point	A										<pre><code>template< \\n    class Clock, \\n    class Duration = typename Clock::duration \\n> class time_point;</code></pre>Class template <code>std::chrono::time_point</code> represents a point in time.	[http://en.cppreference.com/w/cpp/chrono/time_point Cppreference]
std::chrono::time_point::max	A										<pre><code>static constexpr time_point max();</code></pre>Returns a <code>time_point</code> with the largest possible duration, i.e. <code>std::chrono::time_point(std::chrono::duration::max())</code>.	[http://en.cppreference.com/w/cpp/chrono/time_point/max Cppreference]
std::chrono::time_point::min	A										<pre><code>static constexpr time_point min();</code></pre>Returns a <code>time_point</code> with the smallest possible duration, i.e. <code>std::chrono::time_point(std::chrono::duration::min())</code>.	[http://en.cppreference.com/w/cpp/chrono/time_point/min Cppreference]
std::chrono::time_point_cast	A										<pre><code>template <class ToDuration, class Clock, class Duration>\\ntime_point<Clock, ToDuration> time_point_cast(const time_point<Clock, Duration> &t);</code></pre>Converts a std::chrono::time_point from one duration to another.	[http://en.cppreference.com/w/cpp/chrono/time_point/time_point_cast Cppreference]
std::array	A										<pre><code>template< \\n    class T, \\n    std::size_t N \\n> struct array;</code></pre><code>std::array</code> is a container that encapsulates constant size arrays.	[http://en.cppreference.com/w/cpp/container/array Cppreference]
std::array::at	A										<pre><code>reference       at( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/array/at Cppreference]
std::array::back	A										<pre><code>reference back();\\n< more overloads available ></code></pre>Returns reference to the last element in the container.	[http://en.cppreference.com/w/cpp/container/array/back Cppreference]
std::array::data	A										<pre><code>T* data();\\n< more overloads available ></code></pre>Returns pointer to the underlying array serving as element storage.	[http://en.cppreference.com/w/cpp/container/array/data Cppreference]
std::array::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/array/end Cppreference]
std::array::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/array/end Cppreference]
std::array::fill	A										<pre><code>void fill( const T& value );</code></pre>Assigns the given value <code>value</code> to all elements in the container.	[http://en.cppreference.com/w/cpp/container/array/fill Cppreference]
std::array::front	A										<pre><code>reference front();\\n< more overloads available ></code></pre>Returns a reference to the first element in the container.	[http://en.cppreference.com/w/cpp/container/array/front Cppreference]
std::array::operator[]	A										<pre><code>reference       operator[]( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/array/operator_at Cppreference]
std::array::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/array/rbegin Cppreference]
std::array::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/array/rbegin Cppreference]
std::array::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/array/rend Cppreference]
std::array::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/array/rend Cppreference]
std::deque	A										<pre><code>template<\\n    class T,\\n    class Allocator = std::allocator<T>\\n> class deque;</code></pre><code>std::deque</code> (double-ended queue) is an indexed sequence container that allows fast insertion and deletion at both its beginning and its end.	[http://en.cppreference.com/w/cpp/container/deque Cppreference]
std::deque::assign	A										<pre><code>void assign( size_type count, const T& value );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/deque/assign Cppreference]
std::deque::at	A										<pre><code>reference       at( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/deque/at Cppreference]
std::deque::back	A										<pre><code>reference back();\\n< more overloads available ></code></pre>Returns reference to the last element in the container.	[http://en.cppreference.com/w/cpp/container/deque/back Cppreference]
std::deque::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/deque/end Cppreference]
std::deque::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/deque/end Cppreference]
std::deque::front	A										<pre><code>reference front();\\n< more overloads available ></code></pre>Returns a reference to the first element in the container.	[http://en.cppreference.com/w/cpp/container/deque/front Cppreference]
std::deque::insert	A										<pre><code>iterator insert( const_iterator pos, T&& value );\\n< more overloads available ></code></pre>Inserts elements at specified position in the container.	[http://en.cppreference.com/w/cpp/container/deque/insert Cppreference]
std::deque::operator=	A										<pre><code>deque& operator=( const deque& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/deque/operator= Cppreference]
std::deque::operator[]	A										<pre><code>reference       operator[]( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/deque/operator_at Cppreference]
std::deque::push_back	A										<pre><code>void push_back( const T& value );\\n< more overloads available ></code></pre>Appends the given element <code>value</code> to the end of the container.	[http://en.cppreference.com/w/cpp/container/deque/push_back Cppreference]
std::deque::push_front	A										<pre><code>void push_front( const T& value );\\n< more overloads available ></code></pre>Prepends the given element <code>value</code> to the beginning of the container.	[http://en.cppreference.com/w/cpp/container/deque/push_front Cppreference]
std::deque::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/deque/rbegin Cppreference]
std::deque::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/deque/rbegin Cppreference]
std::deque::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/deque/rend Cppreference]
std::deque::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/deque/rend Cppreference]
std::dynarray	A										<pre><code>template<\\n    class T,\\n> class dynarray;</code></pre><code>std::dynarray</code> is a sequence container that encapsulates arrays with a size that is fixed at construction and does not change throughout the lifetime of the object.	[http://en.cppreference.com/w/cpp/container/dynarray Cppreference]
std::dynarray::at	A										<pre><code>reference       at( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/dynarray/at Cppreference]
std::dynarray::back	A										<pre><code>reference back();\\n< more overloads available ></code></pre>Returns reference to the last element in the container.	[http://en.cppreference.com/w/cpp/container/dynarray/back Cppreference]
std::dynarray::data	A										<pre><code>T* data();\\n< more overloads available ></code></pre>Returns pointer to the underlying array serving as element storage.	[http://en.cppreference.com/w/cpp/container/dynarray/data Cppreference]
std::dynarray::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/dynarray/end Cppreference]
std::dynarray::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/dynarray/end Cppreference]
std::dynarray::fill	A										<pre><code>void fill( const T& value );</code></pre>Assigns the given value <code>value</code> to all elements in the container.	[http://en.cppreference.com/w/cpp/container/dynarray/fill Cppreference]
std::dynarray::front	A										<pre><code>reference front();\\n< more overloads available ></code></pre>Returns a reference to the first element in the container.	[http://en.cppreference.com/w/cpp/container/dynarray/front Cppreference]
std::dynarray::operator[]	A										<pre><code>reference       operator[]( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/dynarray/operator_at Cppreference]
std::dynarray::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/dynarray/rbegin Cppreference]
std::dynarray::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/dynarray/rbegin Cppreference]
std::dynarray::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/dynarray/rend Cppreference]
std::dynarray::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/dynarray/rend Cppreference]
std::forward_list	A										<pre><code>template<\\n    class T,\\n    class Allocator = std::allocator<T>\\n> class forward_list;</code></pre><code>std::forward_list</code> is a container that supports fast insertion and removal of elements from anywhere in the container.	[http://en.cppreference.com/w/cpp/container/forward_list Cppreference]
std::forward_list::assign	A										<pre><code>void assign( size_type count, const T& value );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/forward_list/assign Cppreference]
std::forward_list::before_begin	A										<pre><code>iterator before_begin();\\n< more overloads available ></code></pre>Returns an iterator to the element before the first element of the container.	[http://en.cppreference.com/w/cpp/container/forward_list/before_begin Cppreference]
std::forward_list::cbefore_begin	A										<pre><code>const_iterator cbefore_begin() const;</code></pre>Returns an iterator to the element before the first element of the container.	[http://en.cppreference.com/w/cpp/container/forward_list/before_begin Cppreference]
std::forward_list::emplace_after	A										<pre><code>template< class... Args > \\niterator emplace_after( const_iterator pos, Args&&... args );</code></pre>Inserts a new element into a position after the specified position in the container.	[http://en.cppreference.com/w/cpp/container/forward_list/emplace_after Cppreference]
std::forward_list::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/forward_list/end Cppreference]
std::forward_list::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/forward_list/end Cppreference]
std::forward_list::erase_after	A										<pre><code>iterator erase_after( const_iterator position );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/forward_list/erase_after Cppreference]
std::forward_list::front	A										<pre><code>reference front();\\n< more overloads available ></code></pre>Returns a reference to the first element in the container.	[http://en.cppreference.com/w/cpp/container/forward_list/front Cppreference]
std::forward_list::insert_after	A										<pre><code>iterator insert_after( const_iterator pos, const T& value );\\n< more overloads available ></code></pre>Inserts elements after the specified position in the container.	[http://en.cppreference.com/w/cpp/container/forward_list/insert_after Cppreference]
std::forward_list::merge	A										<pre><code>void merge( forward_list& other );\\n< more overloads available ></code></pre>Merges two sorted lists into one.	[http://en.cppreference.com/w/cpp/container/forward_list/merge Cppreference]
std::forward_list::operator=	A										<pre><code>forward_list& operator=( const forward_list& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/forward_list/operator= Cppreference]
std::forward_list::push_front	A										<pre><code>void push_front( const T& value );\\n< more overloads available ></code></pre>Prepends the given element <code>value</code> to the beginning of the container.	[http://en.cppreference.com/w/cpp/container/forward_list/push_front Cppreference]
std::forward_list::remove	A										<pre><code>void remove( const T& value );\\n< more overloads available ></code></pre>Removes all elements satisfying specific criteria.	[http://en.cppreference.com/w/cpp/container/forward_list/remove Cppreference]
std::forward_list::remove_if	A										<pre><code>template< class UnaryPredicate >\\nvoid remove_if( UnaryPredicate p );</code></pre>Removes all elements satisfying specific criteria.	[http://en.cppreference.com/w/cpp/container/forward_list/remove Cppreference]
std::forward_list::resize	A										<pre><code>void resize( size_type count );\\n< more overloads available ></code></pre>Resizes the container to contain <code>count</code> elements.	[http://en.cppreference.com/w/cpp/container/forward_list/resize Cppreference]
std::forward_list::reverse	A										<pre><code>void reverse();</code></pre>Reverses the order of the elements in the container.	[http://en.cppreference.com/w/cpp/container/forward_list/reverse Cppreference]
std::forward_list::sort	A										<pre><code>void sort();\\n< more overloads available ></code></pre>Sorts the elements in ascending order.	[http://en.cppreference.com/w/cpp/container/forward_list/sort Cppreference]
std::forward_list::splice_after	A										<pre><code>void splice_after( const_iterator pos, forward_list& other );\\n< more overloads available ></code></pre>Moves elements from another <code>forward_list</code> to <code>*this</code>.	[http://en.cppreference.com/w/cpp/container/forward_list/splice_after Cppreference]
std::forward_list::unique	A										<pre><code>void unique();\\n< more overloads available ></code></pre>Removes all <i>consecutive</i> duplicate elements from the container.	[http://en.cppreference.com/w/cpp/container/forward_list/unique Cppreference]
std::list	A										<pre><code>template<\\n    class T,\\n    class Allocator = std::allocator<T>\\n> class list;</code></pre><code>std::list</code> is a container that supports fast insertion and removal of elements from anywhere in the container.	[http://en.cppreference.com/w/cpp/container/list Cppreference]
std::list::assign	A										<pre><code>void assign( size_type count, const T& value );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/list/assign Cppreference]
std::list::back	A										<pre><code>reference back();\\n< more overloads available ></code></pre>Returns reference to the last element in the container.	[http://en.cppreference.com/w/cpp/container/list/back Cppreference]
std::list::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/list/end Cppreference]
std::list::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/list/end Cppreference]
std::list::front	A										<pre><code>reference front();\\n< more overloads available ></code></pre>Returns a reference to the first element in the container.	[http://en.cppreference.com/w/cpp/container/list/front Cppreference]
std::list::insert	A										<pre><code>iterator insert( const_iterator pos, T&& value );\\n< more overloads available ></code></pre>Inserts elements at specified position in the container.	[http://en.cppreference.com/w/cpp/container/list/insert Cppreference]
std::list::merge	A										<pre><code>void merge( list& other );\\n< more overloads available ></code></pre>Merges two sorted lists into one.	[http://en.cppreference.com/w/cpp/container/list/merge Cppreference]
std::list::operator=	A										<pre><code>list& operator=( const list& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/list/operator= Cppreference]
std::list::push_back	A										<pre><code>void push_back( const T& value );\\n< more overloads available ></code></pre>Appends the given element <code>value</code> to the end of the container.	[http://en.cppreference.com/w/cpp/container/list/push_back Cppreference]
std::list::push_front	A										<pre><code>void push_front( const T& value );\\n< more overloads available ></code></pre>Prepends the given element <code>value</code> to the beginning of the container.	[http://en.cppreference.com/w/cpp/container/list/push_front Cppreference]
std::list::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/list/rbegin Cppreference]
std::list::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/list/rbegin Cppreference]
std::list::remove	A										<pre><code>void remove( const T& value );\\n< more overloads available ></code></pre>Removes all elements satisfying specific criteria.	[http://en.cppreference.com/w/cpp/container/list/remove Cppreference]
std::list::remove_if	A										<pre><code>template< class UnaryPredicate >\\nvoid remove_if( UnaryPredicate p );</code></pre>Removes all elements satisfying specific criteria.	[http://en.cppreference.com/w/cpp/container/list/remove Cppreference]
std::list::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/list/rend Cppreference]
std::list::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/list/rend Cppreference]
std::list::reverse	A										<pre><code>void reverse();</code></pre>Reverses the order of the elements in the container.	[http://en.cppreference.com/w/cpp/container/list/reverse Cppreference]
std::list::sort	A										<pre><code>void sort();\\n< more overloads available ></code></pre>Sorts the elements in ascending order.	[http://en.cppreference.com/w/cpp/container/list/sort Cppreference]
std::list::splice	A										<pre><code>void splice(const_iterator pos, list& other);\\n< more overloads available ></code></pre>Moves elements from one list to another.	[http://en.cppreference.com/w/cpp/container/list/splice Cppreference]
std::list::unique	A										<pre><code>void unique();\\n< more overloads available ></code></pre>Removes all <i>consecutive</i> duplicate elements from the container.	[http://en.cppreference.com/w/cpp/container/list/unique Cppreference]
std::map	A										<pre><code>template<\\n    class Key,\\n    class T,\\n    class Compare = std::less<Key>,\\n    class Allocator = std::allocator<std::pair<const Key, T> >\\n> class map;</code></pre><code>std::map</code> is a sorted associative container that contains key-value pairs with unique keys.	[http://en.cppreference.com/w/cpp/container/map Cppreference]
std::map::at	A										<pre><code>T& at( const Key& key );\\n< more overloads available ></code></pre>Returns a reference to the mapped value of the element with key equivalent to <code>key</code>.	[http://en.cppreference.com/w/cpp/container/map/at Cppreference]
std::map::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/map/end Cppreference]
std::map::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/map/end Cppreference]
std::map::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/map/equal_range Cppreference]
std::map::erase	A										<pre><code>void erase( iterator pos );\\niterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/map/erase Cppreference]
std::map::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/map/find Cppreference]
std::map::lower_bound	A										<pre><code>iterator lower_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>not less</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/map/lower_bound Cppreference]
std::map::operator=	A										<pre><code>map& operator=( const map& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/map/operator= Cppreference]
std::map::operator[]	A										<pre><code>T& operator[]( const Key& key );\\n< more overloads available ></code></pre>Inserts a new element to the container using <code>key</code> as the key and a default constructed mapped value and returns a reference to the newly constructed mapped value.	[http://en.cppreference.com/w/cpp/container/map/operator_at Cppreference]
std::map::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/map/rbegin Cppreference]
std::map::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/map/rbegin Cppreference]
std::map::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/map/rend Cppreference]
std::map::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/map/rend Cppreference]
std::map::upper_bound	A										<pre><code>iterator upper_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>greater</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/map/upper_bound Cppreference]
std::multimap	A										<pre><code>template<\\n    class Key,\\n    class T,\\n    class Compare = std::less<Key>,\\n    class Allocator = std::allocator<std::pair<const Key, T> >\\n> class multimap;</code></pre>Multimap is an associative container that contains a sorted list of key-value pairs.	[http://en.cppreference.com/w/cpp/container/multimap Cppreference]
std::multimap::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/multimap/end Cppreference]
std::multimap::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/multimap/end Cppreference]
std::multimap::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/multimap/equal_range Cppreference]
std::multimap::erase	A										<pre><code>void erase( iterator pos );\\niterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/multimap/erase Cppreference]
std::multimap::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/multimap/find Cppreference]
std::multimap::lower_bound	A										<pre><code>iterator lower_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>not less</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/multimap/lower_bound Cppreference]
std::multimap::operator=	A										<pre><code>multimap& operator=( const multimap& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/multimap/operator= Cppreference]
std::multimap::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multimap/rbegin Cppreference]
std::multimap::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multimap/rbegin Cppreference]
std::multimap::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multimap/rend Cppreference]
std::multimap::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multimap/rend Cppreference]
std::multimap::upper_bound	A										<pre><code>iterator upper_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>greater</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/multimap/upper_bound Cppreference]
std::multiset	A										<pre><code>template<\\n    class Key,\\n    class Compare = std::less<Key>,\\n    class Allocator = std::allocator<Key>\\n> class multiset;</code></pre>Multiset is an associative container that contains a sorted set of objects of type Key.	[http://en.cppreference.com/w/cpp/container/multiset Cppreference]
std::multiset::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/multiset/end Cppreference]
std::multiset::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/multiset/end Cppreference]
std::multiset::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/multiset/equal_range Cppreference]
std::multiset::erase	A										<pre><code>void erase( iterator pos );\\niterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/multiset/erase Cppreference]
std::multiset::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/multiset/find Cppreference]
std::multiset::lower_bound	A										<pre><code>iterator lower_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>not less</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/multiset/lower_bound Cppreference]
std::multiset::operator=	A										<pre><code>multiset& operator=( const multiset& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/multiset/operator= Cppreference]
std::multiset::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multiset/rbegin Cppreference]
std::multiset::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multiset/rbegin Cppreference]
std::multiset::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multiset/rend Cppreference]
std::multiset::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/multiset/rend Cppreference]
std::multiset::upper_bound	A										<pre><code>iterator upper_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>greater</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/multiset/upper_bound Cppreference]
std::priority_queue	A										<pre><code>template<\\n    class T,\\n    class Container = std::vector<T>,\\n    class Compare = std::less<typename Container::value_type>\\n> class priority_queue;</code></pre>Priority queue is a container that allows for constant time maximum  extraction at the expense of logarithmic insertion.	[http://en.cppreference.com/w/cpp/container/priority_queue Cppreference]
std::priority_queue::operator=	A										<pre><code>priority_queue<T, Container>& \\noperator=( const priority_queue<T,Container>& other );\\n< more overloads available ></code></pre>Replaces the contents of the container adaptor with those of <code>other</code>.	[http://en.cppreference.com/w/cpp/container/priority_queue/operator= Cppreference]
std::priority_queue::push	A										<pre><code>void push( const T& value );\\n< more overloads available ></code></pre>Pushes the given element <code>value</code> to the priority queue.	[http://en.cppreference.com/w/cpp/container/priority_queue/push Cppreference]
std::priority_queue::top	A										<pre><code>const_reference top() const;</code></pre>Returns reference to the top element in the priority queue.	[http://en.cppreference.com/w/cpp/container/priority_queue/top Cppreference]
std::queue	A										<pre><code>template<\\n    class T,\\n    class Container = std::deque<T>\\n> class queue;</code></pre>The <code>std::queue</code> class is a container adapter that gives the programmer the functionality of a queue - specifically, a FIFO (first-in, first-out) data structure.	[http://en.cppreference.com/w/cpp/container/queue Cppreference]
std::queue::back	A										<pre><code>reference back();\\n< more overloads available ></code></pre>Returns reference to the last element in the queue.	[http://en.cppreference.com/w/cpp/container/queue/back Cppreference]
std::queue::front	A										<pre><code>reference front();\\n< more overloads available ></code></pre>Returns reference to the first element in the queue.	[http://en.cppreference.com/w/cpp/container/queue/front Cppreference]
std::queue::operator=	A										<pre><code>queue<T, Container>& \\noperator=( const queue<T,Container>& other );\\n< more overloads available ></code></pre>Replaces the contents of the container adaptor with those of <code>other</code>.	[http://en.cppreference.com/w/cpp/container/queue/operator= Cppreference]
std::queue::push	A										<pre><code>void push( const T& value );\\n< more overloads available ></code></pre>Pushes the given element <code>value</code> to the end of the queue.	[http://en.cppreference.com/w/cpp/container/queue/push Cppreference]
std::set	A										<pre><code>template<\\n    class Key,\\n    class Compare = std::less<Key>,\\n    class Allocator = std::allocator<Key>\\n> class set;</code></pre><code>std::set</code> is an associative container that contains a sorted set of unique objects of type Key.	[http://en.cppreference.com/w/cpp/container/set Cppreference]
std::set::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/set/end Cppreference]
std::set::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/set/end Cppreference]
std::set::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/set/equal_range Cppreference]
std::set::erase	A										<pre><code>void erase( iterator pos );\\niterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/set/erase Cppreference]
std::set::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/set/find Cppreference]
std::set::lower_bound	A										<pre><code>iterator lower_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>not less</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/set/lower_bound Cppreference]
std::set::operator=	A										<pre><code>set& operator=( const set& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/set/operator= Cppreference]
std::set::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/set/rbegin Cppreference]
std::set::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/set/rbegin Cppreference]
std::set::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/set/rend Cppreference]
std::set::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/set/rend Cppreference]
std::set::upper_bound	A										<pre><code>iterator upper_bound( const Key& key );\\n< more overloads available ></code></pre>Returns an iterator pointing to the first element that is <i>greater</i> than <code>key</code>.	[http://en.cppreference.com/w/cpp/container/set/upper_bound Cppreference]
std::stack	A										<pre><code>template<\\n    class T,\\n    class Container = std::deque<T>\\n> class stack;</code></pre>The <code>std::stack</code> class is a container adapter that gives the programmer the functionality of a stack - specifically, a FILO (first-in, last-out) data structure.	[http://en.cppreference.com/w/cpp/container/stack Cppreference]
std::stack::operator=	A										<pre><code>stack<T, Container>& \\noperator=( const stack<T,Container>& other );\\n< more overloads available ></code></pre>Replaces the contents of the container adaptor with those of <code>other</code>.	[http://en.cppreference.com/w/cpp/container/stack/operator= Cppreference]
std::stack::push	A										<pre><code>void push( const T& value );\\n< more overloads available ></code></pre>Pushes the given element <code>value</code> to the top of the stack.	[http://en.cppreference.com/w/cpp/container/stack/push Cppreference]
std::stack::top	A										<pre><code>reference top();\\n< more overloads available ></code></pre>Returns reference to the top element in the stack.	[http://en.cppreference.com/w/cpp/container/stack/top Cppreference]
std::unordered_map	A										<pre><code>template<\\n    class Key,\\n    class T,\\n    class Hash = std::hash<Key>,\\n    class KeyEqual = std::equal_to<Key>,\\n    class Allocator = std::allocator< std::pair<const Key, T> >\\n> class unordered_map;</code></pre>Unordered map is an associative container that contains key-value pairs with unique keys.	[http://en.cppreference.com/w/cpp/container/unordered_map Cppreference]
std::unordered_map::at	A										<pre><code>T& at( const Key& key );\\n< more overloads available ></code></pre>Returns a reference to the mapped value of the element with key equivalent to <code>key</code>.	[http://en.cppreference.com/w/cpp/container/unordered_map/at Cppreference]
std::unordered_map::begin(int)	A										<pre><code>local_iterator begin( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_map/begin2 Cppreference]
std::unordered_map::cbegin(int)	A										<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_map/begin2 Cppreference]
std::unordered_map::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_map/end Cppreference]
std::unordered_map::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_map/end Cppreference]
std::unordered_map::cend(int)	A										<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_map/end2 Cppreference]
std::unordered_map::end(int)	A										<pre><code>local_iterator end( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_map/end2 Cppreference]
std::unordered_map::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/unordered_map/equal_range Cppreference]
std::unordered_map::erase	A										<pre><code>iterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/unordered_map/erase Cppreference]
std::unordered_map::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/unordered_map/find Cppreference]
std::unordered_map::max_load_factor	A										<pre><code>float max_load_factor() const;\\n< more overloads available ></code></pre>Manages the maximum load factor (number of elements per bucket).	[http://en.cppreference.com/w/cpp/container/unordered_map/max_load_factor Cppreference]
std::unordered_map::operator=	A										<pre><code>unordered_map& operator=( const unordered_map& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/unordered_map/operator= Cppreference]
std::unordered_map::operator[]	A										<pre><code>T& operator[]( const Key& key );\\n< more overloads available ></code></pre>Inserts a new element to the container using <code>key</code> as the key and a default constructed mapped value and returns a reference to the newly constructed mapped value.	[http://en.cppreference.com/w/cpp/container/unordered_map/operator_at Cppreference]
std::unordered_multimap	A										<pre><code>template<\\n    class Key,\\n    class T,\\n    class Hash = std::hash<Key>,\\n    class KeyEqual = std::equal_to<Key>,\\n    class Allocator = std::allocator< std::pair<const Key, T> >\\n> class unordered_multimap;</code></pre>Unordered multimap is an unordered associative container that supports equivalent keys  and that associates values of another type with the keys.	[http://en.cppreference.com/w/cpp/container/unordered_multimap Cppreference]
std::unordered_multimap::begin(int)	A										<pre><code>local_iterator begin( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/begin2 Cppreference]
std::unordered_multimap::cbegin(int)	A										<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/begin2 Cppreference]
std::unordered_multimap::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/end Cppreference]
std::unordered_multimap::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/end Cppreference]
std::unordered_multimap::cend(int)	A										<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/end2 Cppreference]
std::unordered_multimap::end(int)	A										<pre><code>local_iterator end( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/end2 Cppreference]
std::unordered_multimap::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/equal_range Cppreference]
std::unordered_multimap::erase	A										<pre><code>iterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/erase Cppreference]
std::unordered_multimap::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/find Cppreference]
std::unordered_multimap::max_load_factor	A										<pre><code>float max_load_factor() const;\\n< more overloads available ></code></pre>Manages the maximum load factor (number of elements per bucket).	[http://en.cppreference.com/w/cpp/container/unordered_multimap/max_load_factor Cppreference]
std::unordered_multimap::operator=	A										<pre><code>unordered_multimap& operator=( const unordered_multimap& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/unordered_multimap/operator= Cppreference]
std::unordered_multiset	A										<pre><code>template<\\n    class Key,\\n    class Hash = std::hash<Key>,\\n    class KeyEqual = std::equal_to<Key>,\\n    class Allocator = std::allocator<Key>\\n> class unordered_multiset;</code></pre>Unordered multiset is an associative container that contains set of possibly non-unique objects of type Key.	[http://en.cppreference.com/w/cpp/container/unordered_multiset Cppreference]
std::unordered_multiset::begin(int)	A										<pre><code>local_iterator begin( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/begin2 Cppreference]
std::unordered_multiset::cbegin(int)	A										<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/begin2 Cppreference]
std::unordered_multiset::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/end Cppreference]
std::unordered_multiset::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/end Cppreference]
std::unordered_multiset::cend(int)	A										<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/end2 Cppreference]
std::unordered_multiset::end(int)	A										<pre><code>local_iterator end( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/end2 Cppreference]
std::unordered_multiset::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/equal_range Cppreference]
std::unordered_multiset::erase	A										<pre><code>iterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/erase Cppreference]
std::unordered_multiset::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/find Cppreference]
std::unordered_multiset::max_load_factor	A										<pre><code>float max_load_factor() const;\\n< more overloads available ></code></pre>Manages the maximum load factor (number of elements per bucket).	[http://en.cppreference.com/w/cpp/container/unordered_multiset/max_load_factor Cppreference]
std::unordered_multiset::operator=	A										<pre><code>unordered_multiset& operator=( const unordered_multiset& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/unordered_multiset/operator= Cppreference]
std::unordered_set	A										<pre><code>template<\\n    class Key,\\n    class Hash = std::hash<Key>,\\n    class KeyEqual = std::equal_to<Key>,\\n    class Allocator = std::allocator<Key>\\n> class unordered_set;</code></pre>Unordered set is an associative container that contains set of unique objects of type Key.	[http://en.cppreference.com/w/cpp/container/unordered_set Cppreference]
std::unordered_set::begin(int)	A										<pre><code>local_iterator begin( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_set/begin2 Cppreference]
std::unordered_set::cbegin(int)	A										<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>Returns an iterator to the first element of the bucket with index <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/unordered_set/begin2 Cppreference]
std::unordered_set::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_set/end Cppreference]
std::unordered_set::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/unordered_set/end Cppreference]
std::unordered_set::cend(int)	A										<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_set/end2 Cppreference]
std::unordered_set::end(int)	A										<pre><code>local_iterator end( size_type n );\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.	[http://en.cppreference.com/w/cpp/container/unordered_set/end2 Cppreference]
std::unordered_set::equal_range	A										<pre><code>std::pair<iterator,iterator> equal_range( const Key& key );\\n< more overloads available ></code></pre>Returns a range containing all elements with key <code>key</code> in the container.	[http://en.cppreference.com/w/cpp/container/unordered_set/equal_range Cppreference]
std::unordered_set::erase	A										<pre><code>iterator erase( const_iterator pos );\\n< more overloads available ></code></pre>Removes specified elements from the container.	[http://en.cppreference.com/w/cpp/container/unordered_set/erase Cppreference]
std::unordered_set::find	A										<pre><code>iterator find( const Key& key );\\n< more overloads available ></code></pre>Finds an element with key <code>key</code>.	[http://en.cppreference.com/w/cpp/container/unordered_set/find Cppreference]
std::unordered_set::max_load_factor	A										<pre><code>float max_load_factor() const;\\n< more overloads available ></code></pre>Manages the maximum load factor (number of elements per bucket).	[http://en.cppreference.com/w/cpp/container/unordered_set/max_load_factor Cppreference]
std::unordered_set::operator=	A										<pre><code>unordered_set& operator=( const unordered_set& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/unordered_set/operator= Cppreference]
std::vector	A										<pre><code>template<\\n    class T,\\n    class Allocator = std::allocator<T>\\n> class vector;</code></pre><code>std::vector</code> is a sequence container that encapsulates dynamic size arrays.	[http://en.cppreference.com/w/cpp/container/vector Cppreference]
std::vector::assign	A										<pre><code>void assign( size_type count, const T& value );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/vector/assign Cppreference]
std::vector::at	A										<pre><code>reference       at( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/vector/at Cppreference]
std::vector::back	A										<pre><code>reference back();\\n< more overloads available ></code></pre>Returns reference to the last element in the container.	[http://en.cppreference.com/w/cpp/container/vector/back Cppreference]
std::vector::data	A										<pre><code>T* data();\\n< more overloads available ></code></pre>Returns pointer to the underlying array serving as element storage.	[http://en.cppreference.com/w/cpp/container/vector/data Cppreference]
std::vector::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/vector/end Cppreference]
std::vector::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the element following the last element of the container.	[http://en.cppreference.com/w/cpp/container/vector/end Cppreference]
std::vector::front	A										<pre><code>reference front();\\n< more overloads available ></code></pre>Returns a reference to the first element in the container.	[http://en.cppreference.com/w/cpp/container/vector/front Cppreference]
std::vector::insert	A										<pre><code>iterator insert( const_iterator pos, T&& value );\\n< more overloads available ></code></pre>Inserts elements at specified position in the container.	[http://en.cppreference.com/w/cpp/container/vector/insert Cppreference]
std::vector::operator=	A										<pre><code>vector& operator=( const vector& other );\\n< more overloads available ></code></pre>Replaces the contents of the container.	[http://en.cppreference.com/w/cpp/container/vector/operator= Cppreference]
std::vector::operator[]	A										<pre><code>reference       operator[]( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the element at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/container/vector/operator_at Cppreference]
std::vector::push_back	A										<pre><code>void push_back( const T& value );\\n< more overloads available ></code></pre>Appends the given element <code>value</code> to the end of the container.	[http://en.cppreference.com/w/cpp/container/vector/push_back Cppreference]
std::vector::crbegin	A										<pre><code>const_reverse_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/vector/rbegin Cppreference]
std::vector::rbegin	A										<pre><code>reverse_iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first element of the reversed container.	[http://en.cppreference.com/w/cpp/container/vector/rbegin Cppreference]
std::vector::crend	A										<pre><code>const_reverse_iterator crend() const;</code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/vector/rend Cppreference]
std::vector::rend	A										<pre><code>reverse_iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the element following the last element of the reversed container.	[http://en.cppreference.com/w/cpp/container/vector/rend Cppreference]
assert	A										<pre><code>#ifdef NDEBUG\\n#define assert(condition) ((void)0)\\n#else\\n#define assert(condition) /*implementation defined*/\\n#endif</code></pre>The definition of the macro <code>assert</code> depends on another macro, <code>NDEBUG</code>, which is not defined by the standard library.	[http://en.cppreference.com/w/cpp/error/assert Cppreference]
std::bad_exception	A										<pre><code>class bad_exception;</code></pre><code>std::bad_exception</code> is the type of the exception thrown by the C++ runtime in the following situations:...	[http://en.cppreference.com/w/cpp/error/bad_exception Cppreference]
std::current_exception	A										<pre><code>std::exception_ptr current_exception()</code></pre>If called during exception handling , captures the current exception object and creates an std::exception_ptr that holds either a copy or a reference to that exception object .	[http://en.cppreference.com/w/cpp/error/current_exception Cppreference]
std::domain_error	A										<pre><code>class domain_error;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/domain_error Cppreference]
std::errc	A										<pre><code>enum class errc;</code></pre>The scoped enumeration <code>std::errc</code> defines the values of portable error conditions that correspond to the POSIX error codes.	[http://en.cppreference.com/w/cpp/error/errc Cppreference]
std::error_category	A										<pre><code>class error_category;</code></pre><code>std::error_category</code> serves as the base class for specific error category types, such as std::system_category, <code>std::iostream_category</code>, etc.	[http://en.cppreference.com/w/cpp/error/error_category Cppreference]
std::error_category::default_error_condition	A										<pre><code>virtual std::error_condition default_error_condition( int code ) const;</code></pre>Returns the error condition for the given error code.	[http://en.cppreference.com/w/cpp/error/error_category/default_error_condition Cppreference]
std::error_category::equivalent	A										<pre><code>virtual bool equivalent( int code, \\n                         const std::error_condition& condition ) const;\\n< more overloads available ></code></pre>Checks whether error code is equivalent to an error condition for the error category represented by <code>*this</code>.	[http://en.cppreference.com/w/cpp/error/error_category/equivalent Cppreference]
std::error_category::message	A										<pre><code>virtual std::string message( int condition ) const = 0;</code></pre>Returns a string describing the given error condition for the error category represented by <code>*this</code>.	[http://en.cppreference.com/w/cpp/error/error_category/message Cppreference]
std::error_category::name	A										<pre><code>virtual const char* name() const = 0;</code></pre>Returns a pointer to a null-terminated byte string that specifies the name of the error category.	[http://en.cppreference.com/w/cpp/error/error_category/name Cppreference]
std::error_category::operator!=	A										<pre><code>bool operator!=( const error_category& rhs ) const;</code></pre>Compares to another error category.	[http://en.cppreference.com/w/cpp/error/error_category/operator_cmp Cppreference]
std::error_category::operator<	A										<pre><code>bool operator<( const error_category& rhs ) const;</code></pre>Compares to another error category.	[http://en.cppreference.com/w/cpp/error/error_category/operator_cmp Cppreference]
std::error_category::operator==	A										<pre><code>bool operator==( const error_category& rhs ) const;</code></pre>Compares to another error category.	[http://en.cppreference.com/w/cpp/error/error_category/operator_cmp Cppreference]
std::error_code	A										<pre><code>class error_code;</code></pre><code>std::error_code</code> is a platform-dependent error code.	[http://en.cppreference.com/w/cpp/error/error_code Cppreference]
std::error_code::assign	A										<pre><code>void assign( int ec, const error_category& ecat );</code></pre>Replaces the contents with error code <code>ec</code> and corresponding category <code>ecat</code>.	[http://en.cppreference.com/w/cpp/error/error_code/assign Cppreference]
std::error_code::category	A										<pre><code>const std::error_category& category() const;</code></pre>Returns the error category of the error value.	[http://en.cppreference.com/w/cpp/error/error_code/category Cppreference]
std::error_code::clear	A										<pre><code>void clear();</code></pre>Replaces the error code and error category with default values.	[http://en.cppreference.com/w/cpp/error/error_code/clear Cppreference]
std::error_code::default_error_condition	A										<pre><code>std::error_condition default_error_condition() const;</code></pre>Returns the default error condition for the current error value.	[http://en.cppreference.com/w/cpp/error/error_code/default_error_condition Cppreference]
std::is_error_code_enum	A										<pre><code>template< class T >\\nstruct is_error_code_enum;</code></pre>If <code>T</code> is an error code enumeration, this template provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/error/error_code/is_error_code_enum Cppreference]
std::error_code::message	A										<pre><code>std::string message() const;</code></pre>Returns the message corresponding to the current error value and category.	[http://en.cppreference.com/w/cpp/error/error_code/message Cppreference]
std::error_code::operator=	A										<pre><code>template< class ErrorCodeEnum >\\nerror_code& operator=( ErrorCodeEnum e );</code></pre>Replaces the error code and corresponding category with those representing error code enum <code>e</code>.	[http://en.cppreference.com/w/cpp/error/error_code/operator= Cppreference]
std::error_code::operator bool	A										<pre><code>explicit operator bool() const;</code></pre>Checks if the error value is valid, i.e. non-zero.	[http://en.cppreference.com/w/cpp/error/error_code/operator_bool Cppreference]
std::error_code::value	A										<pre><code>int value() const;</code></pre>Returns the platform dependent error value.	[http://en.cppreference.com/w/cpp/error/error_code/value Cppreference]
std::error_condition	A										<pre><code>class error_condition;</code></pre><code>std::error_condition</code> is a platform-independent error code.	[http://en.cppreference.com/w/cpp/error/error_condition Cppreference]
std::error_condition::assign	A										<pre><code>void assign( int val, const error_category& cat );</code></pre>Assigns contents to an error condition.	[http://en.cppreference.com/w/cpp/error/error_condition/assign Cppreference]
std::error_condition::category	A										<pre><code>const error_category& category() const;</code></pre>Returns the stored error category.	[http://en.cppreference.com/w/cpp/error/error_condition/category Cppreference]
std::error_condition::clear	A										<pre><code>void clear();</code></pre>Clears the state of the error condition.	[http://en.cppreference.com/w/cpp/error/error_condition/clear Cppreference]
std::is_error_condition_enum	A										<pre><code>template< class T >\\nstruct is_error_condition_enum;</code></pre>If <code>T</code> is an error condition enum, this template provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/error/error_condition/is_error_condition_enum Cppreference]
std::error_condition::message	A										<pre><code>std::string message() const;</code></pre>Returns an explanatory message for the stored error code and error category.	[http://en.cppreference.com/w/cpp/error/error_condition/message Cppreference]
std::error_condition::operator=	A										<pre><code>error_condition& operator=( const error_condition& other );\\n< more overloads available ></code></pre>Assigns contents to an error condition.	[http://en.cppreference.com/w/cpp/error/error_condition/operator= Cppreference]
std::error_condition::operator bool	A										<pre><code>explicit operator bool() const;</code></pre>Checks whether the stored error code is not zero.	[http://en.cppreference.com/w/cpp/error/error_condition/operator_bool Cppreference]
std::error_condition::value	A										<pre><code>int value() const;</code></pre>Returns the stored error code.	[http://en.cppreference.com/w/cpp/error/error_condition/value Cppreference]
std::exception	A										<pre><code>class exception;</code></pre>Provides consistent interface to handle errors through the throw expression.	[http://en.cppreference.com/w/cpp/error/exception Cppreference]
std::exception::operator=	A										<pre><code>exception& operator=( const exception& other );</code></pre>Copy assignment operator.	[http://en.cppreference.com/w/cpp/error/exception/operator= Cppreference]
std::bad_alloc::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::bad_array_length::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::bad_array_new_length::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::bad_cast::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::bad_function_call::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::bad_optional_access::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::bad_typeid::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::bad_weak_ptr::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_fstream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_ifstream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_ios::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_iostream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_istream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_istringstream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_ofstream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_ostream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_ostringstream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::basic_stringstream::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::domain_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::exception::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::future_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::invalid_argument::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::ios_base::failure::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::length_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::logic_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::out_of_range::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::overflow_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::range_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::regex_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::runtime_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::system_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::underflow_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/exception/what Cppreference]
std::generic_category	A										<pre><code>const std::error_category& generic_category();</code></pre>Obtains a reference to the static error category object for generic errors.	[http://en.cppreference.com/w/cpp/error/generic_category Cppreference]
std::get_terminate	A										<pre><code>std::terminate_handler get_terminate();</code></pre>Returns the currently installed std::terminate_handler, which may be a null pointer.	[http://en.cppreference.com/w/cpp/error/get_terminate Cppreference]
std::get_unexpected	A										<pre><code>std::unexpected_handler get_unexpected();</code></pre>Returns the currently installed std::unexpected_handler, which may be a null pointer.	[http://en.cppreference.com/w/cpp/error/get_unexpected Cppreference]
std::invalid_argument	A										<pre><code>class invalid_argument;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/invalid_argument Cppreference]
std::length_error	A										<pre><code>class length_error;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/length_error Cppreference]
std::logic_error	A										<pre><code>class logic_error;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/logic_error Cppreference]
std::make_exception_ptr	A										<pre><code>template< class E >\\nstd::exception_ptr make_exception_ptr( E e )</code></pre>Creates an std::exception_ptr that holds a reference to a copy of <code>e</code>, as if by executing...	[http://en.cppreference.com/w/cpp/error/make_exception_ptr Cppreference]
std::nested_exception	A										<pre><code>class nested_exception;</code></pre><code>std::nested_exceptions</code> is a polymorphic mixin class which can capture and store the current exception, making it possible to nest exceptions of arbitrary types within each other.	[http://en.cppreference.com/w/cpp/error/nested_exception Cppreference]
std::nested_exception::nested_ptr	A										<pre><code>std::exception_ptr nested_ptr() const</code></pre>Returns a pointer to the stored exception, if any.	[http://en.cppreference.com/w/cpp/error/nested_exception/nested_ptr Cppreference]
std::nested_exception::operator=	A										<pre><code>nested_exception& operator=( const nested_exception& other ) = default;</code></pre>Replaces the stored exception with the one held in <code>other</code>.	[http://en.cppreference.com/w/cpp/error/nested_exception/operator= Cppreference]
std::nested_exception::rethrow_nested	A										<pre><code>[[noreturn]] void rethrow_nested() const;</code></pre>Rethrows the stored exception.	[http://en.cppreference.com/w/cpp/error/nested_exception/rethrow_nested Cppreference]
std::out_of_range	A										<pre><code>class out_of_range;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/out_of_range Cppreference]
std::overflow_error	A										<pre><code>class overflow_error;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/overflow_error Cppreference]
std::range_error	A										<pre><code>class range_error;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/range_error Cppreference]
std::rethrow_exception	A										<pre><code>[[noreturn]] void rethrow_exception( std::exception_ptr p )</code></pre>Throws the previously captured exception object, referred to by the exception pointer <code>p</code>.	[http://en.cppreference.com/w/cpp/error/rethrow_exception Cppreference]
std::runtime_error	A										<pre><code>class runtime_error;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/runtime_error Cppreference]
std::set_terminate	A										<pre><code>std::terminate_handler set_terminate( std::terminate_handler f )</code></pre>Makes <code>f</code> the new global terminate handler function and returns the previously installed std::terminate_handler.	[http://en.cppreference.com/w/cpp/error/set_terminate Cppreference]
std::set_unexpected	A										<pre><code>std::unexpected_handler set_unexpected( std::unexpected_handler f )</code></pre>Makes <code>f</code> the new global std::unexpected_handler and returns the previously installed std::unexpected_handler.	[http://en.cppreference.com/w/cpp/error/set_unexpected Cppreference]
std::system_category	A										<pre><code>const std::error_category& system_category();</code></pre>Obtains a reference to the static error category object for errors reported by the operating system.	[http://en.cppreference.com/w/cpp/error/system_category Cppreference]
std::system_error	A										<pre><code>class system_error;</code></pre><code>std::system_error</code> is the type of the exception thrown by various library functions , when the exception has an associated std::error_code which needs to be reported.	[http://en.cppreference.com/w/cpp/error/system_error Cppreference]
std::system_error::code	A										<pre><code>const std::error_code& code() const;</code></pre>Returns the stored error code.	[http://en.cppreference.com/w/cpp/error/system_error/code Cppreference]
std::system_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/error/system_error/what Cppreference]
std::terminate	A										<pre><code>[[noreturn]] void terminate();</code></pre><code>std::terminate()</code> is called by the C++ runtime when exception handling fails for any of the following reasons:...	[http://en.cppreference.com/w/cpp/error/terminate Cppreference]
std::uncaught_exception	A										<pre><code>bool uncaught_exception();</code></pre>Detects if the current thread has a live exception object, that is, an exception has been thrown and not yet entered a matching catch clause, std::terminate or std::unexpected.	[http://en.cppreference.com/w/cpp/error/uncaught_exception Cppreference]
std::underflow_error	A										<pre><code>class underflow_error;</code></pre>Defines a type of object to be thrown as exception.	[http://en.cppreference.com/w/cpp/error/underflow_error Cppreference]
std::unexpected	A										<pre><code>[[noreturn]] void unexpected();</code></pre><code>std::unexpected()</code> is called by the C++ runtime when a dynamic exception specification is violated: an exception is thrown from a function whose exception specification forbids exceptions of this type.	[http://en.cppreference.com/w/cpp/error/unexpected Cppreference]
std::basic_filebuf	A										<pre><code>template< \\n    class charT, \\n    class Traits = std::char_traits<CharT>, \\n    class Allocator = std::allocator<CharT> \\n> class basic_filebuf : public std::basic_streambuf<CharT, Traits></code></pre><code>std::basic_filebuf</code> is a std::basic_streambuf whose associated character sequence is a file.	[http://en.cppreference.com/w/cpp/io/basic_filebuf Cppreference]
std::basic_filebuf::close	A										<pre><code>std::basic_filebuf<CharT, Traits>* close();</code></pre>If a put area exist (e.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/close Cppreference]
std::basic_filebuf::imbue	A										<pre><code>protected:\\nvirtual void imbue( const std::locale& loc )</code></pre>Changes the associated locale so that all characters inserted or extracted after this call  are converted using the std::codecvt facet of <code>loc</code>.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/imbue Cppreference]
std::basic_filebuf::is_open	A										<pre><code>bool is_open() const;</code></pre>Returns <code>true</code> if the most recent call to <code>open()</code> succeeded and there has been no call to <code>close()</code> since then.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/is_open Cppreference]
std::basic_filebuf::open	A										<pre><code>std::basic_filebuf<CharT, Traits>* open( const char* s, std::ios_base::openmode mode )</code></pre>Opens the file with the given name - either <code>s</code> or <code>str.c_str()</code>.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/open Cppreference]
std::basic_filebuf::operator=	A										<pre><code>std::basic_filebuf& operator=( std::basic_filebuf&& rhs );\\n< more overloads available ></code></pre>1) First calls <code>close()</code> to close the associated file, then moves the contents of <code>rhs</code> into <code>*this</code>: the put and get buffers, the associated file, the locale, the openmode, the is_open flag, and any other...	[http://en.cppreference.com/w/cpp/io/basic_filebuf/operator= Cppreference]
std::basic_filebuf::overflow	A										<pre><code>protected:\\nvirtual int_type overflow ( int_type c = Traits::eof() );</code></pre>Writes some data from the put area to the associated character sequence (to the file).	[http://en.cppreference.com/w/cpp/io/basic_filebuf/overflow Cppreference]
std::basic_filebuf::pbackfail	A										<pre><code>protected:\\nvirtual int_type pbackfail( int_type c = Traits::eof() )</code></pre>This protected virtual function is called by the public functions basic_streambuf::sungetc and basic_streambuf::sputbackc .	[http://en.cppreference.com/w/cpp/io/basic_filebuf/pbackfail Cppreference]
std::basic_filebuf::seekoff	A										<pre><code>protected:\\nvirtual pos_type seekoff( off_type off,\\n                          std::ios_base::seekdir way,\\n                          std::ios_base::openmode which = std::ios_base::in | std::ios_base::out );</code></pre>Repositions the file pointer, if possible, to the position that corresponds to exactly <code>off</code> characters from beginning, end, or current position of the file (depending on the value of <code>way</code>.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/seekoff Cppreference]
std::basic_filebuf::seekpos	A										<pre><code>protected:\\nvirtual pos_type seekpos( pos_type sp,\\n                          std::ios_base::openmode which = std::ios_base::in | std::ios_base::out );</code></pre>Repositions the file pointer, if possible, to the position indicated by <code>sp</code>.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/seekpos Cppreference]
std::basic_filebuf::setbuf	A										<pre><code>protected:\\nvirtual std::basic_streambuf<CharT, Traits>* setbuf( char_type* s, std::streamsize n )</code></pre>If <code>s</code> is a null pointer and <code>n</code> is zero, the filebuf becomes <i>unbuffered</i> for output, meaning <code>pbase()</code> and <code>pptr()</code> are null and any output is immediately sent to file.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/setbuf Cppreference]
std::basic_filebuf::showmanyc	A										<pre><code>protected:\\nvirtual std::streamsize showmanyc()</code></pre>If implemented, returns the number of characters left to read from the file.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/showmanyc Cppreference]
std::basic_filebuf::swap	A										<pre><code>void swap( std::basic_filebuf& rhs )</code></pre>Swaps the state and the contents of <code>*this</code> and <code>rhs</code>.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/swap Cppreference]
std::basic_filebuf::sync	A										<pre><code>protected:\\nvirtual int sync()</code></pre>If a put area exists (e.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/sync Cppreference]
std::basic_filebuf::uflow	A										<pre><code>protected:\\nvirtual int_type uflow()</code></pre>Behaves like the <code>underflow()</code>, except that if <code>underflow()</code> succeeds , then advances the next pointer for the get area.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/uflow Cppreference]
std::basic_filebuf::underflow	A										<pre><code>protected:\\nvirtual int_type underflow()</code></pre>Reads more data into the input area.	[http://en.cppreference.com/w/cpp/io/basic_filebuf/underflow Cppreference]
std::basic_fstream	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_fstream : public std::basic_iostream<CharT, Traits></code></pre>The class template <code>basic_fstream</code> implements high-level input/output operations on file based streams.	[http://en.cppreference.com/w/cpp/io/basic_fstream Cppreference]
std::basic_fstream::close	A										<pre><code>void close();</code></pre>Closes the associated file.	[http://en.cppreference.com/w/cpp/io/basic_fstream/close Cppreference]
std::basic_fstream::open	A										<pre><code>void open( const char *filename,\\n           ios_base::openmode mode = ios_base::in|ios_base::out );\\n< more overloads available ></code></pre>Opens and associates the file with name <code>filename</code> with the file stream.	[http://en.cppreference.com/w/cpp/io/basic_fstream/open Cppreference]
std::basic_ifstream	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_ifstream : public std::basic_istream<CharT, Traits></code></pre>The class template <code>basic_ifstream</code> implements high-level input operations on file based streams.	[http://en.cppreference.com/w/cpp/io/basic_ifstream Cppreference]
std::basic_ifstream::close	A										<pre><code>void close();</code></pre>Closes the associated file.	[http://en.cppreference.com/w/cpp/io/basic_ifstream/close Cppreference]
std::basic_ifstream::open	A										<pre><code>void open( const char *filename,\\n           ios_base::openmode mode = ios_base::in );\\n< more overloads available ></code></pre>Opens and associates the file with name <code>filename</code> with the file stream.	[http://en.cppreference.com/w/cpp/io/basic_ifstream/open Cppreference]
std::basic_ios	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_ios : public ios_base</code></pre>The class <code>basic_ios</code> provides facilities for interfacing with objects that have <code>basic_streambuf</code> interface.	[http://en.cppreference.com/w/cpp/io/basic_ios Cppreference]
std::basic_fstream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_ifstream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_ios::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_iostream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_istream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_istringstream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_ofstream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_ostream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_ostringstream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_stringstream::bad	A										<pre><code>bool bad() const;</code></pre>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/bad Cppreference]
std::basic_fstream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_ifstream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_ios::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_iostream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_istream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_istringstream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_ofstream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_ostream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_ostringstream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_stringstream::clear	A										<pre><code>void clear( iostate state = goodbit );</code></pre>Clears the stream error state flags by assigning them the value of <code>state</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/clear Cppreference]
std::basic_fstream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_ifstream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_ios::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_iostream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_istream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_istringstream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_ofstream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_ostream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_ostringstream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_stringstream::copyfmt	A										<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>Copies the state of the stream <code>other</code> into <code>*this</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt Cppreference]
std::basic_fstream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_ifstream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_ios::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_iostream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_istream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_istringstream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_ofstream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_ostream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_ostringstream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_stringstream::eof	A										<pre><code>bool eof() const;</code></pre>Returns <code>true</code> if the associated stream has reached end-of-file.	[http://en.cppreference.com/w/cpp/io/basic_ios/eof Cppreference]
std::basic_fstream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_ifstream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_ios::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_iostream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_istream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_istringstream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_ofstream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_ostream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_ostringstream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_stringstream::fail	A										<pre><code>bool fail() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/fail Cppreference]
std::basic_fstream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_ifstream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_ios::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_iostream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_istream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_istringstream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_ofstream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_ostream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_ostringstream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_stringstream::fill	A										<pre><code>CharT fill() const;\\n< more overloads available ></code></pre>Manages the fill character used to pad the output conversions to the specified field width.	[http://en.cppreference.com/w/cpp/io/basic_ios/fill Cppreference]
std::basic_fstream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_ifstream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_ios::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_iostream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_istream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_istringstream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_ofstream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_ostream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_ostringstream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_stringstream::good	A										<pre><code>bool good() const;</code></pre>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.	[http://en.cppreference.com/w/cpp/io/basic_ios/good Cppreference]
std::basic_fstream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_ifstream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_ios::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_iostream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_istream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_istringstream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_ofstream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_ostream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_ostringstream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_stringstream::imbue	A										<pre><code>std::locale& imbue( const std::locale& loc );</code></pre>Replaces the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/imbue Cppreference]
std::basic_fstream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_ifstream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_ios::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_iostream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_istream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_istringstream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_ofstream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_ostream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_ostringstream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_stringstream::init	A										<pre><code>protected:\\nvoid init( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.	[http://en.cppreference.com/w/cpp/io/basic_ios/init Cppreference]
std::basic_fstream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_ifstream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_ios::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_iostream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_istream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_istringstream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_ofstream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_ostream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_ostringstream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_stringstream::move	A										<pre><code>protected:\\nvoid move( basic_ios& other );\\n< more overloads available ></code></pre>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.	[http://en.cppreference.com/w/cpp/io/basic_ios/move Cppreference]
std::basic_fstream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_ifstream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_ios::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_iostream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_istream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_istringstream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_ofstream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_ostream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_ostringstream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_stringstream::narrow	A										<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>Converts a current locale-specific character <code>c</code> to its standard equivalent.	[http://en.cppreference.com/w/cpp/io/basic_ios/narrow Cppreference]
std::basic_fstream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_ifstream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_ios::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_iostream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_istream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_istringstream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_ofstream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_ostream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_ostringstream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_stringstream::operator!	A										<pre><code>bool operator!() const;</code></pre>Returns <code>true</code> if an error has occurred on the associated stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/operator! Cppreference]
std::basic_fstream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_ifstream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_ios::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_iostream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_istream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_istringstream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_ofstream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_ostream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_ostringstream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_stringstream::rdbuf	A										<pre><code>std::basic_streambuf<CharT,Traits>* rdbuf() const;\\n< more overloads available ></code></pre>Manages the associated stream buffer.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf Cppreference]
std::basic_fstream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_ifstream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_ios::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_iostream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_istream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_istringstream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_ofstream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_ostream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_ostringstream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_stringstream::rdstate	A										<pre><code>iostate rdstate() const;</code></pre>Returns the current stream error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/rdstate Cppreference]
std::basic_fstream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_ifstream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_ios::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_iostream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_istream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_istringstream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_ofstream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_ostream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_ostringstream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_stringstream::set_rdbuf	A										<pre><code>protected:\\nvoid set_rdbuf( std::basic_streambuf<CharT,Traits>* sb );</code></pre>Sets the associated stream buffer to <code>sb</code> without clearing its error state.	[http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf Cppreference]
std::basic_fstream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_ifstream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_ios::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_iostream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_istream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_istringstream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_ofstream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_ostream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_ostringstream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_stringstream::setstate	A										<pre><code>void setstate( iostate state );</code></pre>Sets the stream error flags <code>state</code> in addition to currently set flags.	[http://en.cppreference.com/w/cpp/io/basic_ios/setstate Cppreference]
std::basic_fstream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_ifstream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_ios::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_iostream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_istream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_istringstream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_ofstream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_ostream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_ostringstream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_stringstream::swap	A										<pre><code>protected:\\nvoid swap( basic_ios& other );</code></pre>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.	[http://en.cppreference.com/w/cpp/io/basic_ios/swap Cppreference]
std::basic_fstream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_ifstream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_ios::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_iostream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_istream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_istringstream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_ofstream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_ostream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_ostringstream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_stringstream::tie	A										<pre><code>std::basic_ostream<CharT,Traits>* tie() const;\\n< more overloads available ></code></pre>Manages the tied stream.	[http://en.cppreference.com/w/cpp/io/basic_ios/tie Cppreference]
std::basic_fstream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_ifstream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_ios::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_iostream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_istream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_istringstream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_ofstream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_ostream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_ostringstream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_stringstream::widen	A										<pre><code>char_type widen( char c ) const;</code></pre>Converts a character <code>c</code> to its equivalent in the current locale.	[http://en.cppreference.com/w/cpp/io/basic_ios/widen Cppreference]
std::basic_iostream	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_iostream;</code></pre>The class template <code>basic_iostream</code> provides support for high level input/output operations on streams.	[http://en.cppreference.com/w/cpp/io/basic_iostream Cppreference]
std::basic_istream	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_istream : virtual public std::basic_ios<CharT, Traits></code></pre>The class template <code>basic_istream</code> provides support for high level input operations on character streams.	[http://en.cppreference.com/w/cpp/io/basic_istream Cppreference]
std::basic_fstream::gcount	A										<pre><code>std::streamsize gcount() const;</code></pre>Returns the number of characters extracted by the last unformatted input operation.	[http://en.cppreference.com/w/cpp/io/basic_istream/gcount Cppreference]
std::basic_ifstream::gcount	A										<pre><code>std::streamsize gcount() const;</code></pre>Returns the number of characters extracted by the last unformatted input operation.	[http://en.cppreference.com/w/cpp/io/basic_istream/gcount Cppreference]
std::basic_iostream::gcount	A										<pre><code>std::streamsize gcount() const;</code></pre>Returns the number of characters extracted by the last unformatted input operation.	[http://en.cppreference.com/w/cpp/io/basic_istream/gcount Cppreference]
std::basic_istream::gcount	A										<pre><code>std::streamsize gcount() const;</code></pre>Returns the number of characters extracted by the last unformatted input operation.	[http://en.cppreference.com/w/cpp/io/basic_istream/gcount Cppreference]
std::basic_istringstream::gcount	A										<pre><code>std::streamsize gcount() const;</code></pre>Returns the number of characters extracted by the last unformatted input operation.	[http://en.cppreference.com/w/cpp/io/basic_istream/gcount Cppreference]
std::basic_stringstream::gcount	A										<pre><code>std::streamsize gcount() const;</code></pre>Returns the number of characters extracted by the last unformatted input operation.	[http://en.cppreference.com/w/cpp/io/basic_istream/gcount Cppreference]
std::basic_fstream::get	A										<pre><code>int_type get();\\n< more overloads available ></code></pre>Extracts character or characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/get Cppreference]
std::basic_ifstream::get	A										<pre><code>int_type get();\\n< more overloads available ></code></pre>Extracts character or characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/get Cppreference]
std::basic_iostream::get	A										<pre><code>int_type get();\\n< more overloads available ></code></pre>Extracts character or characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/get Cppreference]
std::basic_istream::get	A										<pre><code>int_type get();\\n< more overloads available ></code></pre>Extracts character or characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/get Cppreference]
std::basic_istringstream::get	A										<pre><code>int_type get();\\n< more overloads available ></code></pre>Extracts character or characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/get Cppreference]
std::basic_stringstream::get	A										<pre><code>int_type get();\\n< more overloads available ></code></pre>Extracts character or characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/get Cppreference]
std::basic_fstream::ignore	A										<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof() );</code></pre>Extracts and discards characters from the input stream until and including <code>delim</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/ignore Cppreference]
std::basic_ifstream::ignore	A										<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof() );</code></pre>Extracts and discards characters from the input stream until and including <code>delim</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/ignore Cppreference]
std::basic_iostream::ignore	A										<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof() );</code></pre>Extracts and discards characters from the input stream until and including <code>delim</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/ignore Cppreference]
std::basic_istream::ignore	A										<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof() );</code></pre>Extracts and discards characters from the input stream until and including <code>delim</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/ignore Cppreference]
std::basic_istringstream::ignore	A										<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof() );</code></pre>Extracts and discards characters from the input stream until and including <code>delim</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/ignore Cppreference]
std::basic_stringstream::ignore	A										<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof() );</code></pre>Extracts and discards characters from the input stream until and including <code>delim</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/ignore Cppreference]
std::basic_fstream::operator>>	A										<pre><code>basic_istream& operator>>( short& value );\\nbasic_istream& operator>>( unsigned short& value );\\n< more overloads available ></code></pre>1-4) Behaves as an <code>FormattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt Cppreference]
std::basic_ifstream::operator>>	A										<pre><code>basic_istream& operator>>( short& value );\\nbasic_istream& operator>>( unsigned short& value );\\n< more overloads available ></code></pre>1-4) Behaves as an <code>FormattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt Cppreference]
std::basic_iostream::operator>>	A										<pre><code>basic_istream& operator>>( short& value );\\nbasic_istream& operator>>( unsigned short& value );\\n< more overloads available ></code></pre>1-4) Behaves as an <code>FormattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt Cppreference]
std::basic_istream::operator>>	A										<pre><code>basic_istream& operator>>( short& value );\\nbasic_istream& operator>>( unsigned short& value );\\n< more overloads available ></code></pre>1-4) Behaves as an <code>FormattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt Cppreference]
std::basic_istringstream::operator>>	A										<pre><code>basic_istream& operator>>( short& value );\\nbasic_istream& operator>>( unsigned short& value );\\n< more overloads available ></code></pre>1-4) Behaves as an <code>FormattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt Cppreference]
std::basic_stringstream::operator>>	A										<pre><code>basic_istream& operator>>( short& value );\\nbasic_istream& operator>>( unsigned short& value );\\n< more overloads available ></code></pre>1-4) Behaves as an <code>FormattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt Cppreference]
std::basic_fstream::peek	A										<pre><code>int_type peek();</code></pre>Behaves as <code>UnformattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/peek Cppreference]
std::basic_ifstream::peek	A										<pre><code>int_type peek();</code></pre>Behaves as <code>UnformattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/peek Cppreference]
std::basic_iostream::peek	A										<pre><code>int_type peek();</code></pre>Behaves as <code>UnformattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/peek Cppreference]
std::basic_istream::peek	A										<pre><code>int_type peek();</code></pre>Behaves as <code>UnformattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/peek Cppreference]
std::basic_istringstream::peek	A										<pre><code>int_type peek();</code></pre>Behaves as <code>UnformattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/peek Cppreference]
std::basic_stringstream::peek	A										<pre><code>int_type peek();</code></pre>Behaves as <code>UnformattedInputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/peek Cppreference]
std::basic_fstream::putback	A										<pre><code>basic_istream& putback( char_type ch );</code></pre>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/putback Cppreference]
std::basic_ifstream::putback	A										<pre><code>basic_istream& putback( char_type ch );</code></pre>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/putback Cppreference]
std::basic_iostream::putback	A										<pre><code>basic_istream& putback( char_type ch );</code></pre>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/putback Cppreference]
std::basic_istream::putback	A										<pre><code>basic_istream& putback( char_type ch );</code></pre>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/putback Cppreference]
std::basic_istringstream::putback	A										<pre><code>basic_istream& putback( char_type ch );</code></pre>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/putback Cppreference]
std::basic_stringstream::putback	A										<pre><code>basic_istream& putback( char_type ch );</code></pre>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.	[http://en.cppreference.com/w/cpp/io/basic_istream/putback Cppreference]
std::basic_fstream::read	A										<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>Extracts characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/read Cppreference]
std::basic_ifstream::read	A										<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>Extracts characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/read Cppreference]
std::basic_iostream::read	A										<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>Extracts characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/read Cppreference]
std::basic_istream::read	A										<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>Extracts characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/read Cppreference]
std::basic_istringstream::read	A										<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>Extracts characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/read Cppreference]
std::basic_stringstream::read	A										<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>Extracts characters from stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/read Cppreference]
std::basic_fstream::readsome	A										<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>Extracts up to <code>count</code> immediately available characters from the input stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/readsome Cppreference]
std::basic_ifstream::readsome	A										<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>Extracts up to <code>count</code> immediately available characters from the input stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/readsome Cppreference]
std::basic_iostream::readsome	A										<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>Extracts up to <code>count</code> immediately available characters from the input stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/readsome Cppreference]
std::basic_istream::readsome	A										<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>Extracts up to <code>count</code> immediately available characters from the input stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/readsome Cppreference]
std::basic_istringstream::readsome	A										<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>Extracts up to <code>count</code> immediately available characters from the input stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/readsome Cppreference]
std::basic_stringstream::readsome	A										<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>Extracts up to <code>count</code> immediately available characters from the input stream.	[http://en.cppreference.com/w/cpp/io/basic_istream/readsome Cppreference]
std::basic_fstream::seekg	A										<pre><code>basic_istream& seekg( pos_type pos );\\n< more overloads available ></code></pre>Sets input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/seekg Cppreference]
std::basic_ifstream::seekg	A										<pre><code>basic_istream& seekg( pos_type pos );\\n< more overloads available ></code></pre>Sets input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/seekg Cppreference]
std::basic_iostream::seekg	A										<pre><code>basic_istream& seekg( pos_type pos );\\n< more overloads available ></code></pre>Sets input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/seekg Cppreference]
std::basic_istream::seekg	A										<pre><code>basic_istream& seekg( pos_type pos );\\n< more overloads available ></code></pre>Sets input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/seekg Cppreference]
std::basic_istringstream::seekg	A										<pre><code>basic_istream& seekg( pos_type pos );\\n< more overloads available ></code></pre>Sets input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/seekg Cppreference]
std::basic_stringstream::seekg	A										<pre><code>basic_istream& seekg( pos_type pos );\\n< more overloads available ></code></pre>Sets input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/seekg Cppreference]
std::basic_fstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT>>\\nclass std::basic_istream<CharT, Traits>::sentry;</code></pre>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_istream/sentry Cppreference]
std::basic_ifstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT>>\\nclass std::basic_istream<CharT, Traits>::sentry;</code></pre>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_istream/sentry Cppreference]
std::basic_iostream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT>>\\nclass std::basic_istream<CharT, Traits>::sentry;</code></pre>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_istream/sentry Cppreference]
std::basic_istream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT>>\\nclass std::basic_istream<CharT, Traits>::sentry;</code></pre>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_istream/sentry Cppreference]
std::basic_istringstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT>>\\nclass std::basic_istream<CharT, Traits>::sentry;</code></pre>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_istream/sentry Cppreference]
std::basic_stringstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT>>\\nclass std::basic_istream<CharT, Traits>::sentry;</code></pre>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_istream/sentry Cppreference]
std::basic_fstream::sync	A										<pre><code>int sync();</code></pre>Synchronizes the input buffer with the associated data source.	[http://en.cppreference.com/w/cpp/io/basic_istream/sync Cppreference]
std::basic_ifstream::sync	A										<pre><code>int sync();</code></pre>Synchronizes the input buffer with the associated data source.	[http://en.cppreference.com/w/cpp/io/basic_istream/sync Cppreference]
std::basic_iostream::sync	A										<pre><code>int sync();</code></pre>Synchronizes the input buffer with the associated data source.	[http://en.cppreference.com/w/cpp/io/basic_istream/sync Cppreference]
std::basic_istream::sync	A										<pre><code>int sync();</code></pre>Synchronizes the input buffer with the associated data source.	[http://en.cppreference.com/w/cpp/io/basic_istream/sync Cppreference]
std::basic_istringstream::sync	A										<pre><code>int sync();</code></pre>Synchronizes the input buffer with the associated data source.	[http://en.cppreference.com/w/cpp/io/basic_istream/sync Cppreference]
std::basic_stringstream::sync	A										<pre><code>int sync();</code></pre>Synchronizes the input buffer with the associated data source.	[http://en.cppreference.com/w/cpp/io/basic_istream/sync Cppreference]
std::basic_fstream::tellg	A										<pre><code>pos_type tellg();</code></pre>Returns input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/tellg Cppreference]
std::basic_ifstream::tellg	A										<pre><code>pos_type tellg();</code></pre>Returns input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/tellg Cppreference]
std::basic_iostream::tellg	A										<pre><code>pos_type tellg();</code></pre>Returns input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/tellg Cppreference]
std::basic_istream::tellg	A										<pre><code>pos_type tellg();</code></pre>Returns input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/tellg Cppreference]
std::basic_istringstream::tellg	A										<pre><code>pos_type tellg();</code></pre>Returns input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/tellg Cppreference]
std::basic_stringstream::tellg	A										<pre><code>pos_type tellg();</code></pre>Returns input position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_istream/tellg Cppreference]
std::basic_fstream::unget	A										<pre><code>basic_istream& unget();</code></pre>Makes the most recently extracted character available again.	[http://en.cppreference.com/w/cpp/io/basic_istream/unget Cppreference]
std::basic_ifstream::unget	A										<pre><code>basic_istream& unget();</code></pre>Makes the most recently extracted character available again.	[http://en.cppreference.com/w/cpp/io/basic_istream/unget Cppreference]
std::basic_iostream::unget	A										<pre><code>basic_istream& unget();</code></pre>Makes the most recently extracted character available again.	[http://en.cppreference.com/w/cpp/io/basic_istream/unget Cppreference]
std::basic_istream::unget	A										<pre><code>basic_istream& unget();</code></pre>Makes the most recently extracted character available again.	[http://en.cppreference.com/w/cpp/io/basic_istream/unget Cppreference]
std::basic_istringstream::unget	A										<pre><code>basic_istream& unget();</code></pre>Makes the most recently extracted character available again.	[http://en.cppreference.com/w/cpp/io/basic_istream/unget Cppreference]
std::basic_stringstream::unget	A										<pre><code>basic_istream& unget();</code></pre>Makes the most recently extracted character available again.	[http://en.cppreference.com/w/cpp/io/basic_istream/unget Cppreference]
std::basic_istringstream::rdbuf	A										<pre><code>std::basic_stringbuf<CharT, Traits, Allocator>* rdbuf() const;</code></pre>Returns pointer to the underlying raw string device object.	[http://en.cppreference.com/w/cpp/io/basic_istringstream/rdbuf Cppreference]
std::basic_istringstream::str	A										<pre><code>std::basic_string<CharT,Traits,Allocator> str() const;\\n< more overloads available ></code></pre>Manages the contents of the underlying string object.	[http://en.cppreference.com/w/cpp/io/basic_istringstream/str Cppreference]
std::basic_ofstream	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_ofstream : public std::basic_ostream<CharT, Traits></code></pre>The class template <code>basic_ofstream</code> implements high-level output operations on file based streams.	[http://en.cppreference.com/w/cpp/io/basic_ofstream Cppreference]
std::basic_ofstream::close	A										<pre><code>void close();</code></pre>Closes the associated file.	[http://en.cppreference.com/w/cpp/io/basic_ofstream/close Cppreference]
std::basic_ofstream::open	A										<pre><code>void open( const char *filename,\\n           ios_base::openmode mode = ios_base::out );\\n< more overloads available ></code></pre>Opens and associates the file with name <code>filename</code> with the file stream.	[http://en.cppreference.com/w/cpp/io/basic_ofstream/open Cppreference]
std::basic_ostream	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_ostream : virtual public std::basic_ios<CharT, Traits></code></pre>The class template <code>basic_ostream</code> provides support for high level output operations on character streams.	[http://en.cppreference.com/w/cpp/io/basic_ostream Cppreference]
std::basic_fstream::flush	A										<pre><code>basic_ostream& flush();</code></pre> Writes uncommitted changes to the underlying output sequence.	[http://en.cppreference.com/w/cpp/io/basic_ostream/flush Cppreference]
std::basic_iostream::flush	A										<pre><code>basic_ostream& flush();</code></pre> Writes uncommitted changes to the underlying output sequence.	[http://en.cppreference.com/w/cpp/io/basic_ostream/flush Cppreference]
std::basic_ofstream::flush	A										<pre><code>basic_ostream& flush();</code></pre> Writes uncommitted changes to the underlying output sequence.	[http://en.cppreference.com/w/cpp/io/basic_ostream/flush Cppreference]
std::basic_ostream::flush	A										<pre><code>basic_ostream& flush();</code></pre> Writes uncommitted changes to the underlying output sequence.	[http://en.cppreference.com/w/cpp/io/basic_ostream/flush Cppreference]
std::basic_ostringstream::flush	A										<pre><code>basic_ostream& flush();</code></pre> Writes uncommitted changes to the underlying output sequence.	[http://en.cppreference.com/w/cpp/io/basic_ostream/flush Cppreference]
std::basic_stringstream::flush	A										<pre><code>basic_ostream& flush();</code></pre> Writes uncommitted changes to the underlying output sequence.	[http://en.cppreference.com/w/cpp/io/basic_ostream/flush Cppreference]
std::basic_fstream::operator<<	A										<pre><code>basic_ostream& operator<<( short value );\\nbasic_ostream& operator<<( unsigned short value );\\n< more overloads available ></code></pre>Inserts data into the stream.	[http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt Cppreference]
std::basic_iostream::operator<<	A										<pre><code>basic_ostream& operator<<( short value );\\nbasic_ostream& operator<<( unsigned short value );\\n< more overloads available ></code></pre>Inserts data into the stream.	[http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt Cppreference]
std::basic_ofstream::operator<<	A										<pre><code>basic_ostream& operator<<( short value );\\nbasic_ostream& operator<<( unsigned short value );\\n< more overloads available ></code></pre>Inserts data into the stream.	[http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt Cppreference]
std::basic_ostream::operator<<	A										<pre><code>basic_ostream& operator<<( short value );\\nbasic_ostream& operator<<( unsigned short value );\\n< more overloads available ></code></pre>Inserts data into the stream.	[http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt Cppreference]
std::basic_ostringstream::operator<<	A										<pre><code>basic_ostream& operator<<( short value );\\nbasic_ostream& operator<<( unsigned short value );\\n< more overloads available ></code></pre>Inserts data into the stream.	[http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt Cppreference]
std::basic_stringstream::operator<<	A										<pre><code>basic_ostream& operator<<( short value );\\nbasic_ostream& operator<<( unsigned short value );\\n< more overloads available ></code></pre>Inserts data into the stream.	[http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt Cppreference]
std::basic_fstream::put	A										<pre><code>basic_ostream& put( char_type ch );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/put Cppreference]
std::basic_iostream::put	A										<pre><code>basic_ostream& put( char_type ch );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/put Cppreference]
std::basic_ofstream::put	A										<pre><code>basic_ostream& put( char_type ch );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/put Cppreference]
std::basic_ostream::put	A										<pre><code>basic_ostream& put( char_type ch );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/put Cppreference]
std::basic_ostringstream::put	A										<pre><code>basic_ostream& put( char_type ch );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/put Cppreference]
std::basic_stringstream::put	A										<pre><code>basic_ostream& put( char_type ch );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/put Cppreference]
std::basic_fstream::seekp	A										<pre><code>basic_ostream& seekp( pos_type pos );\\n< more overloads available ></code></pre>Sets the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/seekp Cppreference]
std::basic_iostream::seekp	A										<pre><code>basic_ostream& seekp( pos_type pos );\\n< more overloads available ></code></pre>Sets the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/seekp Cppreference]
std::basic_ofstream::seekp	A										<pre><code>basic_ostream& seekp( pos_type pos );\\n< more overloads available ></code></pre>Sets the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/seekp Cppreference]
std::basic_ostream::seekp	A										<pre><code>basic_ostream& seekp( pos_type pos );\\n< more overloads available ></code></pre>Sets the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/seekp Cppreference]
std::basic_ostringstream::seekp	A										<pre><code>basic_ostream& seekp( pos_type pos );\\n< more overloads available ></code></pre>Sets the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/seekp Cppreference]
std::basic_stringstream::seekp	A										<pre><code>basic_ostream& seekp( pos_type pos );\\n< more overloads available ></code></pre>Sets the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/seekp Cppreference]
std::basic_fstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT> >\\nclass std::basic_istream<CharT,traits>::sentry</code></pre>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_ostream/sentry Cppreference]
std::basic_iostream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT> >\\nclass std::basic_istream<CharT,traits>::sentry</code></pre>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_ostream/sentry Cppreference]
std::basic_ofstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT> >\\nclass std::basic_istream<CharT,traits>::sentry</code></pre>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_ostream/sentry Cppreference]
std::basic_ostream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT> >\\nclass std::basic_istream<CharT,traits>::sentry</code></pre>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_ostream/sentry Cppreference]
std::basic_ostringstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT> >\\nclass std::basic_istream<CharT,traits>::sentry</code></pre>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_ostream/sentry Cppreference]
std::basic_stringstream::sentry	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT> >\\nclass std::basic_istream<CharT,traits>::sentry</code></pre>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and unformatted).	[http://en.cppreference.com/w/cpp/io/basic_ostream/sentry Cppreference]
std::basic_fstream::tellp	A										<pre><code>pos_type tellp();</code></pre>Returns the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/tellp Cppreference]
std::basic_iostream::tellp	A										<pre><code>pos_type tellp();</code></pre>Returns the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/tellp Cppreference]
std::basic_ofstream::tellp	A										<pre><code>pos_type tellp();</code></pre>Returns the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/tellp Cppreference]
std::basic_ostream::tellp	A										<pre><code>pos_type tellp();</code></pre>Returns the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/tellp Cppreference]
std::basic_ostringstream::tellp	A										<pre><code>pos_type tellp();</code></pre>Returns the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/tellp Cppreference]
std::basic_stringstream::tellp	A										<pre><code>pos_type tellp();</code></pre>Returns the output position indicator of the current associated <code>streambuf</code> object.	[http://en.cppreference.com/w/cpp/io/basic_ostream/tellp Cppreference]
std::basic_fstream::write	A										<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/write Cppreference]
std::basic_iostream::write	A										<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/write Cppreference]
std::basic_ofstream::write	A										<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/write Cppreference]
std::basic_ostream::write	A										<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/write Cppreference]
std::basic_ostringstream::write	A										<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/write Cppreference]
std::basic_stringstream::write	A										<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>Behaves as an <code>UnformattedOutputFunction</code>.	[http://en.cppreference.com/w/cpp/io/basic_ostream/write Cppreference]
std::basic_ostringstream::rdbuf	A										<pre><code>std::basic_stringbuf<CharT, Traits, Allocator>* rdbuf() const;</code></pre>Returns pointer to the underlying raw string device object.	[http://en.cppreference.com/w/cpp/io/basic_ostringstream/rdbuf Cppreference]
std::basic_ostringstream::str	A										<pre><code>std::basic_string<CharT,Traits,Allocator> str() const;\\n< more overloads available ></code></pre>Manages the contents of the underlying string object.	[http://en.cppreference.com/w/cpp/io/basic_ostringstream/str Cppreference]
std::basic_streambuf	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>\\n> class basic_streambuf;</code></pre>The class <code>basic_streambuf</code> controls input and output to a character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf Cppreference]
std::basic_filebuf::gbump	A										<pre><code>void gbump( int count );</code></pre>Skips <code>count</code> characters in the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gbump Cppreference]
std::basic_streambuf::gbump	A										<pre><code>void gbump( int count );</code></pre>Skips <code>count</code> characters in the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gbump Cppreference]
std::basic_stringbuf::gbump	A										<pre><code>void gbump( int count );</code></pre>Skips <code>count</code> characters in the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gbump Cppreference]
std::basic_filebuf::getloc	A										<pre><code>std::locale getloc() const;</code></pre>Returns the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/getloc Cppreference]
std::basic_streambuf::getloc	A										<pre><code>std::locale getloc() const;</code></pre>Returns the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/getloc Cppreference]
std::basic_stringbuf::getloc	A										<pre><code>std::locale getloc() const;</code></pre>Returns the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/getloc Cppreference]
std::basic_filebuf::egptr	A										<pre><code>char_type* egptr() const;</code></pre>Returns pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr Cppreference]
std::basic_filebuf::gptr	A										<pre><code>char_type* gptr() const;\\n< more overloads available ></code></pre>Returns pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr Cppreference]
std::basic_streambuf::egptr	A										<pre><code>char_type* egptr() const;</code></pre>Returns pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr Cppreference]
std::basic_streambuf::gptr	A										<pre><code>char_type* gptr() const;\\n< more overloads available ></code></pre>Returns pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr Cppreference]
std::basic_stringbuf::egptr	A										<pre><code>char_type* egptr() const;</code></pre>Returns pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr Cppreference]
std::basic_stringbuf::gptr	A										<pre><code>char_type* gptr() const;\\n< more overloads available ></code></pre>Returns pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr Cppreference]
std::basic_filebuf::in_avail	A										<pre><code>std::streamsize in_avail();</code></pre>Returns the number of characters available in the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/in_avail Cppreference]
std::basic_streambuf::in_avail	A										<pre><code>std::streamsize in_avail();</code></pre>Returns the number of characters available in the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/in_avail Cppreference]
std::basic_stringbuf::in_avail	A										<pre><code>std::streamsize in_avail();</code></pre>Returns the number of characters available in the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/in_avail Cppreference]
std::basic_filebuf::overflow	A										<pre><code>int_type overflow( int_type ch = traits::eof() );</code></pre>Ensures that there is space at the put area for at least one character by saving some initial subsequence of characters starting at <code>pbase()</code> to the output sequence and updating the pointers to the...	[http://en.cppreference.com/w/cpp/io/basic_streambuf/overflow Cppreference]
std::basic_streambuf::overflow	A										<pre><code>int_type overflow( int_type ch = traits::eof() );</code></pre>Ensures that there is space at the put area for at least one character by saving some initial subsequence of characters starting at <code>pbase()</code> to the output sequence and updating the pointers to the...	[http://en.cppreference.com/w/cpp/io/basic_streambuf/overflow Cppreference]
std::basic_stringbuf::overflow	A										<pre><code>int_type overflow( int_type ch = traits::eof() );</code></pre>Ensures that there is space at the put area for at least one character by saving some initial subsequence of characters starting at <code>pbase()</code> to the output sequence and updating the pointers to the...	[http://en.cppreference.com/w/cpp/io/basic_streambuf/overflow Cppreference]
std::basic_filebuf::pbackfail	A										<pre><code>protected:\\nvirtual int_type pbackfail( int_type c = Traits::eof() );</code></pre>This protected virtual function is called by the public functions <code>sungetc()</code> and <code>sputbackc()</code>  when either...	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pbackfail Cppreference]
std::basic_streambuf::pbackfail	A										<pre><code>protected:\\nvirtual int_type pbackfail( int_type c = Traits::eof() );</code></pre>This protected virtual function is called by the public functions <code>sungetc()</code> and <code>sputbackc()</code>  when either...	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pbackfail Cppreference]
std::basic_stringbuf::pbackfail	A										<pre><code>protected:\\nvirtual int_type pbackfail( int_type c = Traits::eof() );</code></pre>This protected virtual function is called by the public functions <code>sungetc()</code> and <code>sputbackc()</code>  when either...	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pbackfail Cppreference]
std::basic_filebuf::pbump	A										<pre><code>void pbump( int count );</code></pre>Repositions the <i>put pointer</i> (<code>pptr()</code>) by <code>count</code> characters, where <code>count</code> may be positive or negative.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pbump Cppreference]
std::basic_streambuf::pbump	A										<pre><code>void pbump( int count );</code></pre>Repositions the <i>put pointer</i> (<code>pptr()</code>) by <code>count</code> characters, where <code>count</code> may be positive or negative.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pbump Cppreference]
std::basic_stringbuf::pbump	A										<pre><code>void pbump( int count );</code></pre>Repositions the <i>put pointer</i> (<code>pptr()</code>) by <code>count</code> characters, where <code>count</code> may be positive or negative.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pbump Cppreference]
std::basic_filebuf::epptr	A										<pre><code>char_type* epptr() const;</code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_filebuf::pbase	A										<pre><code>char_type* pbase() const;</code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_filebuf::pptr	A										<pre><code>char_type* pptr() const;\\n< more overloads available ></code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_streambuf::epptr	A										<pre><code>char_type* epptr() const;</code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_streambuf::pbase	A										<pre><code>char_type* pbase() const;</code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_streambuf::pptr	A										<pre><code>char_type* pptr() const;\\n< more overloads available ></code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_stringbuf::epptr	A										<pre><code>char_type* epptr() const;</code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_stringbuf::pbase	A										<pre><code>char_type* pbase() const;</code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_stringbuf::pptr	A										<pre><code>char_type* pptr() const;\\n< more overloads available ></code></pre>Returns pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr Cppreference]
std::basic_filebuf::imbue	A										<pre><code>std::locale pubimbue( const std::locale& loc );\\n< more overloads available ></code></pre>Changes the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue Cppreference]
std::basic_filebuf::pubimbue	A										<pre><code>std::locale pubimbue( const std::locale& loc );</code></pre>Changes the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue Cppreference]
std::basic_streambuf::imbue	A										<pre><code>std::locale pubimbue( const std::locale& loc );\\n< more overloads available ></code></pre>Changes the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue Cppreference]
std::basic_streambuf::pubimbue	A										<pre><code>std::locale pubimbue( const std::locale& loc );</code></pre>Changes the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue Cppreference]
std::basic_stringbuf::imbue	A										<pre><code>std::locale pubimbue( const std::locale& loc );\\n< more overloads available ></code></pre>Changes the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue Cppreference]
std::basic_stringbuf::pubimbue	A										<pre><code>std::locale pubimbue( const std::locale& loc );</code></pre>Changes the associated locale.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue Cppreference]
std::basic_filebuf::pubseekoff	A										<pre><code>pos_type pubseekoff( off_type off, ios_base::seekdir dir,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>Sets the position indicator of the input and/or output sequence relative to some other position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff Cppreference]
std::basic_filebuf::seekoff	A										<pre><code>pos_type pubseekoff( off_type off, ios_base::seekdir dir,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );\\n< more overloads available ></code></pre>Sets the position indicator of the input and/or output sequence relative to some other position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff Cppreference]
std::basic_streambuf::pubseekoff	A										<pre><code>pos_type pubseekoff( off_type off, ios_base::seekdir dir,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>Sets the position indicator of the input and/or output sequence relative to some other position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff Cppreference]
std::basic_streambuf::seekoff	A										<pre><code>pos_type pubseekoff( off_type off, ios_base::seekdir dir,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );\\n< more overloads available ></code></pre>Sets the position indicator of the input and/or output sequence relative to some other position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff Cppreference]
std::basic_stringbuf::pubseekoff	A										<pre><code>pos_type pubseekoff( off_type off, ios_base::seekdir dir,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>Sets the position indicator of the input and/or output sequence relative to some other position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff Cppreference]
std::basic_stringbuf::seekoff	A										<pre><code>pos_type pubseekoff( off_type off, ios_base::seekdir dir,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );\\n< more overloads available ></code></pre>Sets the position indicator of the input and/or output sequence relative to some other position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff Cppreference]
std::basic_filebuf::pubseekpos	A										<pre><code>pos_type pubseekpos( pos_type pos,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>Sets the position indicator of the input and/or output sequence to an absolute position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos Cppreference]
std::basic_filebuf::seekpos	A										<pre><code>pos_type pubseekpos( pos_type pos,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );\\n< more overloads available ></code></pre>Sets the position indicator of the input and/or output sequence to an absolute position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos Cppreference]
std::basic_streambuf::pubseekpos	A										<pre><code>pos_type pubseekpos( pos_type pos,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>Sets the position indicator of the input and/or output sequence to an absolute position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos Cppreference]
std::basic_streambuf::seekpos	A										<pre><code>pos_type pubseekpos( pos_type pos,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );\\n< more overloads available ></code></pre>Sets the position indicator of the input and/or output sequence to an absolute position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos Cppreference]
std::basic_stringbuf::pubseekpos	A										<pre><code>pos_type pubseekpos( pos_type pos,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>Sets the position indicator of the input and/or output sequence to an absolute position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos Cppreference]
std::basic_stringbuf::seekpos	A										<pre><code>pos_type pubseekpos( pos_type pos,\\n                     ios_base::openmode which = ios_base::in | ios_base::out );\\n< more overloads available ></code></pre>Sets the position indicator of the input and/or output sequence to an absolute position.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos Cppreference]
std::basic_filebuf::pubsync	A										<pre><code>int pubsync();</code></pre>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync Cppreference]
std::basic_filebuf::sync	A										<pre><code>int pubsync();\\n< more overloads available ></code></pre>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync Cppreference]
std::basic_streambuf::pubsync	A										<pre><code>int pubsync();</code></pre>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync Cppreference]
std::basic_streambuf::sync	A										<pre><code>int pubsync();\\n< more overloads available ></code></pre>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync Cppreference]
std::basic_stringbuf::pubsync	A										<pre><code>int pubsync();</code></pre>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync Cppreference]
std::basic_stringbuf::sync	A										<pre><code>int pubsync();\\n< more overloads available ></code></pre>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync Cppreference]
std::basic_filebuf::sbumpc	A										<pre><code>int_type sbumpc();</code></pre>Reads one character and advances the input sequence by one character.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sbumpc Cppreference]
std::basic_streambuf::sbumpc	A										<pre><code>int_type sbumpc();</code></pre>Reads one character and advances the input sequence by one character.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sbumpc Cppreference]
std::basic_stringbuf::sbumpc	A										<pre><code>int_type sbumpc();</code></pre>Reads one character and advances the input sequence by one character.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sbumpc Cppreference]
std::basic_filebuf::setg	A										<pre><code>void setg( char_type* gbeg, char_type* gcurr, char_type* gend );</code></pre>Sets the values of the pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/setg Cppreference]
std::basic_streambuf::setg	A										<pre><code>void setg( char_type* gbeg, char_type* gcurr, char_type* gend );</code></pre>Sets the values of the pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/setg Cppreference]
std::basic_stringbuf::setg	A										<pre><code>void setg( char_type* gbeg, char_type* gcurr, char_type* gend );</code></pre>Sets the values of the pointers defining the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/setg Cppreference]
std::basic_filebuf::setp	A										<pre><code>void setp( char_type* pbeg, char_type* pend );</code></pre>Sets the values of the pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/setp Cppreference]
std::basic_streambuf::setp	A										<pre><code>void setp( char_type* pbeg, char_type* pend );</code></pre>Sets the values of the pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/setp Cppreference]
std::basic_stringbuf::setp	A										<pre><code>void setp( char_type* pbeg, char_type* pend );</code></pre>Sets the values of the pointers defining the put area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/setp Cppreference]
std::basic_filebuf::sgetc	A										<pre><code>int_type sgetc();</code></pre>Reads one character from the input sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetc Cppreference]
std::basic_streambuf::sgetc	A										<pre><code>int_type sgetc();</code></pre>Reads one character from the input sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetc Cppreference]
std::basic_stringbuf::sgetc	A										<pre><code>int_type sgetc();</code></pre>Reads one character from the input sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetc Cppreference]
std::basic_filebuf::sgetn	A										<pre><code>std::streamsize sgetn( char_type* s, std::streamsize count );\\n< more overloads available ></code></pre>1) Calls <code>xsgetn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn Cppreference]
std::basic_filebuf::xsgetn	A										<pre><code>protected:\\nvirtual std::streamsize xsgetn( char_type* s, std::streamsize count );</code></pre>1) Calls <code>xsgetn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn Cppreference]
std::basic_streambuf::sgetn	A										<pre><code>std::streamsize sgetn( char_type* s, std::streamsize count );\\n< more overloads available ></code></pre>1) Calls <code>xsgetn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn Cppreference]
std::basic_streambuf::xsgetn	A										<pre><code>protected:\\nvirtual std::streamsize xsgetn( char_type* s, std::streamsize count );</code></pre>1) Calls <code>xsgetn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn Cppreference]
std::basic_stringbuf::sgetn	A										<pre><code>std::streamsize sgetn( char_type* s, std::streamsize count );\\n< more overloads available ></code></pre>1) Calls <code>xsgetn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn Cppreference]
std::basic_stringbuf::xsgetn	A										<pre><code>protected:\\nvirtual std::streamsize xsgetn( char_type* s, std::streamsize count );</code></pre>1) Calls <code>xsgetn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn Cppreference]
std::basic_filebuf::showmanyc	A										<pre><code>protected:\\nstd::streamsize showmanyc();</code></pre>Estimates the number of characters available for input in the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/showmanyc Cppreference]
std::basic_streambuf::showmanyc	A										<pre><code>protected:\\nstd::streamsize showmanyc();</code></pre>Estimates the number of characters available for input in the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/showmanyc Cppreference]
std::basic_stringbuf::showmanyc	A										<pre><code>protected:\\nstd::streamsize showmanyc();</code></pre>Estimates the number of characters available for input in the associated character sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/showmanyc Cppreference]
std::basic_filebuf::snextc	A										<pre><code>int_type snextc();</code></pre>Advances the input sequence by one character and reads one character.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/snextc Cppreference]
std::basic_streambuf::snextc	A										<pre><code>int_type snextc();</code></pre>Advances the input sequence by one character and reads one character.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/snextc Cppreference]
std::basic_stringbuf::snextc	A										<pre><code>int_type snextc();</code></pre>Advances the input sequence by one character and reads one character.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/snextc Cppreference]
std::basic_filebuf::sputbackc	A										<pre><code>int_type sputbackc( char_type c );</code></pre>Puts back a character back to the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputbackc Cppreference]
std::basic_streambuf::sputbackc	A										<pre><code>int_type sputbackc( char_type c );</code></pre>Puts back a character back to the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputbackc Cppreference]
std::basic_stringbuf::sputbackc	A										<pre><code>int_type sputbackc( char_type c );</code></pre>Puts back a character back to the get area.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputbackc Cppreference]
std::basic_filebuf::sputc	A										<pre><code>int_type sputc( char_type ch );</code></pre>Writes one character to the output sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputc Cppreference]
std::basic_streambuf::sputc	A										<pre><code>int_type sputc( char_type ch );</code></pre>Writes one character to the output sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputc Cppreference]
std::basic_stringbuf::sputc	A										<pre><code>int_type sputc( char_type ch );</code></pre>Writes one character to the output sequence.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputc Cppreference]
std::basic_filebuf::sputn	A										<pre><code>std::streamsize sputn( const char_type* s, std::streamsize count );\\n< more overloads available ></code></pre>1) Calls <code>xsputn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn Cppreference]
std::basic_filebuf::xsputn	A										<pre><code>protected:\\nvirtual std::streamsize xsputn( const char_type* s, std::streamsize count );</code></pre>1) Calls <code>xsputn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn Cppreference]
std::basic_streambuf::sputn	A										<pre><code>std::streamsize sputn( const char_type* s, std::streamsize count );\\n< more overloads available ></code></pre>1) Calls <code>xsputn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn Cppreference]
std::basic_streambuf::xsputn	A										<pre><code>protected:\\nvirtual std::streamsize xsputn( const char_type* s, std::streamsize count );</code></pre>1) Calls <code>xsputn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn Cppreference]
std::basic_stringbuf::sputn	A										<pre><code>std::streamsize sputn( const char_type* s, std::streamsize count );\\n< more overloads available ></code></pre>1) Calls <code>xsputn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn Cppreference]
std::basic_stringbuf::xsputn	A										<pre><code>protected:\\nvirtual std::streamsize xsputn( const char_type* s, std::streamsize count );</code></pre>1) Calls <code>xsputn(s, count)</code> of the most derived class.	[http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn Cppreference]
std::basic_filebuf::uflow	A										<pre><code>int_type uflow();</code></pre>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).	[http://en.cppreference.com/w/cpp/io/basic_streambuf/uflow Cppreference]
std::basic_streambuf::uflow	A										<pre><code>int_type uflow();</code></pre>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).	[http://en.cppreference.com/w/cpp/io/basic_streambuf/uflow Cppreference]
std::basic_stringbuf::uflow	A										<pre><code>int_type uflow();</code></pre>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).	[http://en.cppreference.com/w/cpp/io/basic_streambuf/uflow Cppreference]
std::basic_filebuf::underflow	A										<pre><code>int_type underflow();</code></pre>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).	[http://en.cppreference.com/w/cpp/io/basic_streambuf/underflow Cppreference]
std::basic_streambuf::underflow	A										<pre><code>int_type underflow();</code></pre>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).	[http://en.cppreference.com/w/cpp/io/basic_streambuf/underflow Cppreference]
std::basic_stringbuf::underflow	A										<pre><code>int_type underflow();</code></pre>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).	[http://en.cppreference.com/w/cpp/io/basic_streambuf/underflow Cppreference]
std::basic_stringbuf	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>, \\n    class Allocator = std::allocator<CharT> \\n> class basic_stringbuf : public std::basic_streambuf<CharT, Traits></code></pre><code>std::basic_stringbuf</code> is a std::basic_streambuf whose associated character sequence is a memory-resident sequence of arbitrary characters, which can be initialized from or made available as an...	[http://en.cppreference.com/w/cpp/io/basic_stringbuf Cppreference]
std::basic_stringbuf::pbackfail	A										<pre><code>protected:\\nvirtual int_type pbackfail( int_type c = Traits::eof() )</code></pre>This protected virtual function is called by the public functions basic_streambuf::sungetc and basic_streambuf::sputbackc .	[http://en.cppreference.com/w/cpp/io/basic_stringbuf/pbackfail Cppreference]
std::basic_stringbuf::setbuf	A										<pre><code>protected:\\nvirtual std::basic_streambuf<CharT, Traits>* setbuf( char_type* s, std::streamsize n )</code></pre>If <code>s</code> is a null pointer and <code>n</code> is zero, this function has no effect.	[http://en.cppreference.com/w/cpp/io/basic_stringbuf/setbuf Cppreference]
std::basic_stringbuf::str	A										<pre><code>std::basic_string<CharT, Traits, Allocator> str() const;\\n< more overloads available ></code></pre>Gets and sets the underlying string.	[http://en.cppreference.com/w/cpp/io/basic_stringbuf/str Cppreference]
std::basic_stringbuf::swap	A										<pre><code>void swap( std::basic_stringbuf& rhs )</code></pre>Swaps the state and the contents of <code>*this</code> and <code>rhs</code>.	[http://en.cppreference.com/w/cpp/io/basic_stringbuf/swap Cppreference]
std::basic_stringstream::rdbuf	A										<pre><code>std::basic_stringbuf<CharT, Traits, Allocator>* rdbuf() const;</code></pre>Returns pointer to the underlying raw string device object.	[http://en.cppreference.com/w/cpp/io/basic_stringstream/rdbuf Cppreference]
std::basic_stringstream::str	A										<pre><code>std::basic_string<CharT,Traits,Allocator> str() const;\\n< more overloads available ></code></pre>Manages the contents of the underlying string object.	[http://en.cppreference.com/w/cpp/io/basic_stringstream/str Cppreference]
std::clearerr	A										<pre><code>void clearerr( FILE *stream );</code></pre>Resets the error flags and the <code>EOF</code> indicator for the given file stream.	[http://en.cppreference.com/w/cpp/io/c/clearerr Cppreference]
std::fclose	A										<pre><code>int fclose( FILE *stream );</code></pre>Closes the given file stream.	[http://en.cppreference.com/w/cpp/io/c/fclose Cppreference]
std::feof	A										<pre><code>int feof( std::FILE* stream );</code></pre>Checks if the end of the given file stream has been reached.	[http://en.cppreference.com/w/cpp/io/c/feof Cppreference]
std::ferror	A										<pre><code>int ferror( FILE *stream );</code></pre>Checks the given stream for errors.	[http://en.cppreference.com/w/cpp/io/c/ferror Cppreference]
std::fflush	A										<pre><code>int fflush( FILE *stream );</code></pre>Causes the output file stream to be synchronized with the actual contents of the file.	[http://en.cppreference.com/w/cpp/io/c/fflush Cppreference]
std::fgetc	A										<pre><code>int fgetc( FILE *stream );\\nint getc( FILE *stream );</code></pre>Reads the next character from the given input stream.	[http://en.cppreference.com/w/cpp/io/c/fgetc Cppreference]
std::getc	A										<pre><code>int fgetc( FILE *stream );\\nint getc( FILE *stream );</code></pre>Reads the next character from the given input stream.	[http://en.cppreference.com/w/cpp/io/c/fgetc Cppreference]
std::fgetpos	A										<pre><code>int fgetpos( std::FILE* stream, std::fpos_t* pos );</code></pre>Obtains the file position indicator and the current parse state (if any) for the file stream <code>stream</code> and stores them in the object pointed to by <code>pos</code>.	[http://en.cppreference.com/w/cpp/io/c/fgetpos Cppreference]
std::fgets	A										<pre><code>char *fgets( char *str, int count, FILE *stream );</code></pre>Reads at most <code>count - 1</code> characters from the given file stream and stores them in <code>str</code>.	[http://en.cppreference.com/w/cpp/io/c/fgets Cppreference]
std::fgetwc	A										<pre><code>wint_t fgetwc( FILE *stream );\\nwint_t getwc( FILE *stream );</code></pre>Reads the next wide character from the given input stream.	[http://en.cppreference.com/w/cpp/io/c/fgetwc Cppreference]
std::fopen	A										<pre><code>FILE *fopen( const char *filename, const char *mode );</code></pre>Opens a file indicated by <code>filename</code> and returns a file stream associated with that file.	[http://en.cppreference.com/w/cpp/io/c/fopen Cppreference]
std::fprintf	A										<pre><code>int fprintf( FILE* stream, const char* format, ... );</code></pre>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/fprintf Cppreference]
std::printf	A										<pre><code>int printf( const char* format, ... );\\n< more overloads available ></code></pre>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/fprintf Cppreference]
std::snprintf	A										<pre><code>int snprintf( char* buffer, int buf_size, const char* format, ... );</code></pre>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/fprintf Cppreference]
std::sprintf	A										<pre><code>int sprintf( char* buffer, const char* format, ... );</code></pre>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/fprintf Cppreference]
std::fputc	A										<pre><code>int fputc( int ch, FILE *stream );\\nint putc( int ch, FILE *stream );</code></pre>Writes a character <code>ch</code> to the given output stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/fputc Cppreference]
std::putc	A										<pre><code>int fputc( int ch, FILE *stream );\\nint putc( int ch, FILE *stream );</code></pre>Writes a character <code>ch</code> to the given output stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/fputc Cppreference]
std::fputs	A										<pre><code>int fputs( const char *str, FILE *stream );</code></pre>Writes given null-terminated character string to the given output stream.	[http://en.cppreference.com/w/cpp/io/c/fputs Cppreference]
std::fputwc	A										<pre><code>wint_t fputwc( wchar_t ch, FILE *stream );\\nwint_t putwc( wchar_t ch, FILE *stream );</code></pre>Writes a wide character <code>ch</code> to the given output stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/fputwc Cppreference]
std::fputws	A										<pre><code>int fputws( const wchar_t *str, FILE *stream );</code></pre>Writes given null-terminated wide string to the given output stream.	[http://en.cppreference.com/w/cpp/io/c/fputws Cppreference]
std::fread	A										<pre><code>std::size_t fread( void* buffer, std::size_t size, std::size_t count, std::FILE* stream );</code></pre>Reads up to <code>count</code> objects into the array <code>buffer</code> from the given input stream <code>stream</code> as if by calling std::fgetc <code>size</code> times for each object, and storing the results, in the order obtained, into the...	[http://en.cppreference.com/w/cpp/io/c/fread Cppreference]
std::freopen	A										<pre><code>FILE *freopen( const char *filename, const char *mode, FILE *stream );</code></pre>Reassigns an existing file stream <code>stream</code> to a different file identified by <code>filename</code>using specified mode.	[http://en.cppreference.com/w/cpp/io/c/freopen Cppreference]
std::fscanf	A										<pre><code>int fscanf( FILE *stream, const char *format, ... );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.	[http://en.cppreference.com/w/cpp/io/c/fscanf Cppreference]
std::scanf	A										<pre><code>​int scanf( const char *format, ... );​\\n< more overloads available ></code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.	[http://en.cppreference.com/w/cpp/io/c/fscanf Cppreference]
std::sscanf	A										<pre><code>int sscanf( const char *buffer, const char *format, ... );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.	[http://en.cppreference.com/w/cpp/io/c/fscanf Cppreference]
std::fseek	A										<pre><code>int fseek( std::FILE* stream, long offset, int origin );</code></pre>Sets the file position indicator for the file stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/fseek Cppreference]
std::fsetpos	A										<pre><code>int fsetpos( std::FILE* stream, const std::fpos_t* pos );</code></pre>Sets the file position indicator and the multibyte parsing state (if any) for the C file stream <code>stream</code> according to the value pointed to by <code>pos</code>.	[http://en.cppreference.com/w/cpp/io/c/fsetpos Cppreference]
std::ftell	A										<pre><code>long ftell( std::FILE* stream );</code></pre>Returns the current value of the file position indicator for the file stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/ftell Cppreference]
std::fwprintf	A										<pre><code>int fwprintf( std::FILE* stream, const wchar_t* format, ... );</code></pre>Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/fwprintf Cppreference]
std::swprintf	A										<pre><code>int swprintf( wchar_t* buffer, std::size_t size, const wchar_t* format, ... );</code></pre>Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/fwprintf Cppreference]
std::wprintf	A										<pre><code>int wprintf( const wchar_t* format, ... );\\n< more overloads available ></code></pre>Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/fwprintf Cppreference]
std::fwrite	A										<pre><code>int fwrite( const void* buffer, std::size_t size, std::size_t count, std::FILE* stream );</code></pre>Writes up to <code>count</code> binary objects from the given array <code>buffer</code> to the output stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/fwrite Cppreference]
std::fwscanf	A										<pre><code>int fwscanf( FILE *stream, const wchar_t* format, ... );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.	[http://en.cppreference.com/w/cpp/io/c/fwscanf Cppreference]
std::swscanf	A										<pre><code>int swscanf( const wchar_t* buffer, const wchar_t* format, ... );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.	[http://en.cppreference.com/w/cpp/io/c/fwscanf Cppreference]
std::wscanf	A										<pre><code>int wscanf( const wchar_t* format, ... );\\n< more overloads available ></code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.	[http://en.cppreference.com/w/cpp/io/c/fwscanf Cppreference]
std::getchar	A										<pre><code>int getchar();</code></pre>Reads the next character from stdin.	[http://en.cppreference.com/w/cpp/io/c/getchar Cppreference]
std::gets	A										<pre><code>char *gets( char *str );</code></pre>Reads stdin into given character string until a newline character is found or end-of-file occurs.	[http://en.cppreference.com/w/cpp/io/c/gets Cppreference]
std::perror	A										<pre><code>void perror( const char *s );</code></pre>Prints a textual description of the error code currently stored in the system variable errno to stderr.	[http://en.cppreference.com/w/cpp/io/c/perror Cppreference]
std::putchar	A										<pre><code>int putchar( int ch );</code></pre>Writes a character <code>ch</code> to <code>stdout</code>...	[http://en.cppreference.com/w/cpp/io/c/putchar Cppreference]
std::puts	A										<pre><code>int puts( char *str );</code></pre>Writes character string <code>str</code> and a newline to <code>stdout</code>...	[http://en.cppreference.com/w/cpp/io/c/puts Cppreference]
std::putwchar	A										<pre><code>wint_t putwchar( wchar_t ch );</code></pre>Writes a wide character <code>ch</code> to <code>stdout</code>...	[http://en.cppreference.com/w/cpp/io/c/putwchar Cppreference]
std::remove	A										<pre><code>int remove( const char *fname );</code></pre>Deletes the file identified by character string pointed to by <code>fname</code>.	[http://en.cppreference.com/w/cpp/io/c/remove Cppreference]
std::rename	A										<pre><code>int rename( const char *old_filename, const char *new_filename );</code></pre>Changes the filename of a file.	[http://en.cppreference.com/w/cpp/io/c/rename Cppreference]
std::rewind	A										<pre><code>void rewind( std::FILE* stream );</code></pre>Moves the file position indicator to the beginning of the given file stream as if by <code>std::fseek(stream, 0L, SEEK_SET)</code>, and clears the end-of-file and the error indicators on <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/rewind Cppreference]
std::setbuf	A										<pre><code>void setbuf( FILE* stream, char* buffer );</code></pre>Sets the internal buffer to use for I/O operations performed on the C stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/setbuf Cppreference]
std::setvbuf	A										<pre><code>int setvbuf( FILE *stream, char *buffer, int mode, size_t size );</code></pre>Sets the internal buffer of the given file stream <code>stream</code>.	[http://en.cppreference.com/w/cpp/io/c/setvbuf Cppreference]
std::tmpfile	A										<pre><code>FILE* tmpfile();</code></pre>Creates and opens a temporary file with unique auto-generated filename.	[http://en.cppreference.com/w/cpp/io/c/tmpfile Cppreference]
std::tmpnam	A										<pre><code>char* tmpnam( char* filename );</code></pre>Creates an unique filename that does not name a currently existing file, and stores it in the character string pointed to by <code>filename</code>.	[http://en.cppreference.com/w/cpp/io/c/tmpnam Cppreference]
std::ungetc	A										<pre><code>int ungetc( int ch, FILE *stream );</code></pre>Puts the character <code>ch</code> back to the given file stream.	[http://en.cppreference.com/w/cpp/io/c/ungetc Cppreference]
std::vfprintf	A										<pre><code>int vfprintf( FILE *stream, const char *format, va_list vlist );</code></pre>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/vfprintf Cppreference]
std::vprintf	A										<pre><code>int vprintf( const char* format, va_list vlist );</code></pre>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/vfprintf Cppreference]
std::vsnprintf	A										<pre><code>int vsnprintf( char *buffer, int buf_size, const char *format, va_list vlist );</code></pre>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/vfprintf Cppreference]
std::vsprintf	A										<pre><code>int vsprintf( char *buffer, const char *format, va_list vlist );</code></pre>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/vfprintf Cppreference]
std::vfscanf	A										<pre><code>int vfscanf( FILE *stream, const char *format, va_list vlist );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.	[http://en.cppreference.com/w/cpp/io/c/vfscanf Cppreference]
std::vscanf	A										<pre><code>​int vscanf( const char *format, va_list vlist );​</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.	[http://en.cppreference.com/w/cpp/io/c/vfscanf Cppreference]
std::vsscanf	A										<pre><code>int vsscanf( const char *buffer, const char *format, va_list vlist );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.	[http://en.cppreference.com/w/cpp/io/c/vfscanf Cppreference]
std::vfwprintf	A										<pre><code>int vfwprintf( FILE* stream, const wchar_t* format, va_list vlist );</code></pre>Loads the data from locations, defined by <code>vlist</code>,, converts them to wide string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/vfwprintf Cppreference]
std::vswprintf	A										<pre><code>int vswprintf( const wchar_t* buffer, std::size_t size, const wchar_t* format, va_list vlist );</code></pre>Loads the data from locations, defined by <code>vlist</code>,, converts them to wide string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/vfwprintf Cppreference]
std::vwprintf	A										<pre><code>int vwprintf( const wchar_t* format, va_list vlist );</code></pre>Loads the data from locations, defined by <code>vlist</code>,, converts them to wide string equivalents and writes the results to a variety of sinks.	[http://en.cppreference.com/w/cpp/io/c/vfwprintf Cppreference]
std::vfwscanf	A										<pre><code>int vfwscanf( FILE *stream, const wchar_t* format, va_list vlist );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.	[http://en.cppreference.com/w/cpp/io/c/vfwscanf Cppreference]
std::vswscanf	A										<pre><code>int vswscanf( const wchar_t* buffer, const wchar_t* format, va_list vlist );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.	[http://en.cppreference.com/w/cpp/io/c/vfwscanf Cppreference]
std::vwscanf	A										<pre><code>int vwscanf( const wchar_t* format, va_list vlist );</code></pre>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.	[http://en.cppreference.com/w/cpp/io/c/vfwscanf Cppreference]
std::fpos	A										<pre><code>template< class State >\\nclass fpos;</code></pre>Specializations of the class template std::fpos identify absolute positions in a stream or in a file.	[http://en.cppreference.com/w/cpp/io/fpos Cppreference]
std::ios_base	A										<pre><code>class ios_base;</code></pre>The class <code>ios_base</code> is a multipurpose class that serves as the base class for all I/O stream classes.	[http://en.cppreference.com/w/cpp/io/ios_base Cppreference]
std::basic_fstream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_ifstream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_ios::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_iostream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_istream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_istringstream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_ofstream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_ostream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_ostringstream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_stringstream::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::ios_base::failure	A										<pre><code>class failure;</code></pre>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.	[http://en.cppreference.com/w/cpp/io/ios_base/failure Cppreference]
std::basic_fstream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_ifstream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_ios::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_iostream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_istream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_istringstream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_ofstream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_ostream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_ostringstream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_stringstream::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::ios_base::flags	A										<pre><code>fmtflags flags() const;\\n< more overloads available ></code></pre>Manages format flags.	[http://en.cppreference.com/w/cpp/io/ios_base/flags Cppreference]
std::basic_fstream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_ifstream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_ios::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_iostream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_istream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_istringstream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_ofstream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_ostream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_ostringstream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_stringstream::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::ios_base::getloc	A										<pre><code>std::locale getloc();</code></pre>Returns the current locale associated with the stream.	[http://en.cppreference.com/w/cpp/io/ios_base/getloc Cppreference]
std::basic_fstream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_ifstream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_ios::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_iostream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_istream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_istringstream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_ofstream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_ostream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_ostringstream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_stringstream::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::ios_base::imbue	A										<pre><code>std::locale imbue( const std::locale& loc );</code></pre>Sets the associated locale of the stream to the given one.	[http://en.cppreference.com/w/cpp/io/ios_base/imbue Cppreference]
std::basic_fstream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_ifstream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_ios::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_iostream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_istream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_istringstream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_ofstream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_ostream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_ostringstream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_stringstream::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::ios_base::iword	A										<pre><code>long& iword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>long</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/iword Cppreference]
std::basic_fstream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_ifstream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_ios::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_iostream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_istream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_istringstream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_ofstream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_ostream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_ostringstream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_stringstream::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::ios_base::precision	A										<pre><code>streamsize precision() const;\\n< more overloads available ></code></pre>Manages the precision  of certain numeric output conversions.	[http://en.cppreference.com/w/cpp/io/ios_base/precision Cppreference]
std::basic_fstream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_ifstream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_ios::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_iostream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_istream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_istringstream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_ofstream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_ostream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_ostringstream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_stringstream::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::ios_base::pword	A										<pre><code>void*& pword( int index );</code></pre>First, allocates or resizes the private storage  sufficiently to make <code>index</code> a valid index, then returns a reference to the <code>void*</code> element of the private storage with the index <code>index</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/pword Cppreference]
std::basic_fstream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_ifstream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_ios::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_iostream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_istream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_istringstream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_ofstream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_ostream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_ostringstream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_stringstream::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::ios_base::register_callback	A										<pre><code>void register_callback( event_callback function, int index );</code></pre>Registers a user-defined function which will be called by <code>imbue()</code>, basic_ios::copyfmt() and <code>~ios_base()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/register_callback Cppreference]
std::basic_fstream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_ifstream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_ios::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_iostream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_istream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_istringstream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_ofstream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_ostream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_ostringstream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_stringstream::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::ios_base::setf	A										<pre><code>fmtflags setf( fmtflags flags );\\n< more overloads available ></code></pre>Sets the formatting flags to specified settings.	[http://en.cppreference.com/w/cpp/io/ios_base/setf Cppreference]
std::basic_fstream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_ifstream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_ios::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_iostream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_istream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_istringstream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_ofstream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_ostream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_ostringstream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_stringstream::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::ios_base::sync_with_stdio	A										<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.	[http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio Cppreference]
std::basic_fstream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_ifstream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_ios::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_iostream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_istream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_istringstream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_ofstream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_ostream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_ostringstream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_stringstream::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::ios_base::unsetf	A										<pre><code>void unsetf( fmtflags flags );</code></pre>Unsets the formatting flags defined by <code>flags</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/unsetf Cppreference]
std::basic_fstream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_ifstream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_ios::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_iostream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_istream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_istringstream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_ofstream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_ostream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_ostringstream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_stringstream::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::ios_base::width	A										<pre><code>streamsize width() const;\\n< more overloads available ></code></pre>Manages the minimum number of characters to generate on certain output operations and the maximum number of character to generate on certain input operations.	[http://en.cppreference.com/w/cpp/io/ios_base/width Cppreference]
std::basic_fstream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_ifstream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_ios::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_iostream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_istream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_istringstream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_ofstream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_ostream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_ostringstream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::basic_stringstream::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::ios_base::xalloc	A										<pre><code>static int xalloc();</code></pre>Returns an unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage by calling <code>iword()</code> and <code>pword()</code>.	[http://en.cppreference.com/w/cpp/io/ios_base/xalloc Cppreference]
std::endl	A										<pre><code>template< class CharT, class Traits >\\nstd::basic_ostream<charT,traits>& endl( std::basic_ostream<CharT, Traits>& os );</code></pre>Inserts a endline character into the output sequence <code>os</code> and flushes it as if by calling <code>os.put(os.widen('\n'))</code> followed by <code>os.flush()</code>.	[http://en.cppreference.com/w/cpp/io/manip/endl Cppreference]
std::ends	A										<pre><code>template< class CharT, class Traits >\\nstd::basic_ostream<charT,traits>& ends( std::basic_ostream<CharT, Traits>& os );</code></pre>Inserts a null character into the output sequence <code>os</code> as if by calling <code>os.put(CharT())</code>.	[http://en.cppreference.com/w/cpp/io/manip/ends Cppreference]
std::defaultfloat	A										<pre><code>std::ios_base& defaultfloat( std::ios_base& str );</code></pre>Modifies the default formatting for floating-point input/output.	[http://en.cppreference.com/w/cpp/io/manip/fixed Cppreference]
std::fixed	A										<pre><code>std::ios_base& fixed( std::ios_base& str );</code></pre>Modifies the default formatting for floating-point input/output.	[http://en.cppreference.com/w/cpp/io/manip/fixed Cppreference]
std::hexfloat	A										<pre><code>std::ios_base& hexfloat( std::ios_base& str );</code></pre>Modifies the default formatting for floating-point input/output.	[http://en.cppreference.com/w/cpp/io/manip/fixed Cppreference]
std::scientific	A										<pre><code>std::ios_base& scientific( std::ios_base& str );</code></pre>Modifies the default formatting for floating-point input/output.	[http://en.cppreference.com/w/cpp/io/manip/fixed Cppreference]
std::flush	A										<pre><code>template< class CharT, class Traits >\\nstd::basic_ostream<charT,traits>& flush( std::basic_ostream<CharT, Traits>& os );</code></pre>Flushes the output sequence <code>os</code> as if by calling <code>os.flush()</code>.	[http://en.cppreference.com/w/cpp/io/manip/flush Cppreference]
std::get_money	A										<pre><code>template< class MoneyT >\\n/*unspecified*/ get_money( MoneyT& mon, bool intl = false );</code></pre>When used in an expression <code>in &gt;&gt; get_money(mon, intl)</code>, parses the character input as a monetary value, as specified by the std::money_get facet of the locale currently imbued in <code>in</code>, and stores...	[http://en.cppreference.com/w/cpp/io/manip/get_money Cppreference]
std::get_time	A										<pre><code>template< class CharT >\\n/*unspecified*/ get_time( std::tm* tmb, const CharT* fmt);</code></pre>When used in an expression <code>in &gt;&gt; get_time(tmb, fmt)</code>, parses the character input as a date/time value according to format string <code>fmt</code> according to the std::time_get facet of the locale currently...	[http://en.cppreference.com/w/cpp/io/manip/get_time Cppreference]
std::dec	A										<pre><code>std::ios_base& dec( std::ios_base& str );</code></pre>Modifies the default numeric base for integer I/O...	[http://en.cppreference.com/w/cpp/io/manip/hex Cppreference]
std::hex	A										<pre><code>std::ios_base& hex( std::ios_base& str );</code></pre>Modifies the default numeric base for integer I/O...	[http://en.cppreference.com/w/cpp/io/manip/hex Cppreference]
std::oct	A										<pre><code>std::ios_base& oct( std::ios_base& str );</code></pre>Modifies the default numeric base for integer I/O...	[http://en.cppreference.com/w/cpp/io/manip/hex Cppreference]
std::internal	A										<pre><code>std::ios_base& internal( std::ios_base& str );</code></pre>Modifies the default positioning of the fill characters.	[http://en.cppreference.com/w/cpp/io/manip/left Cppreference]
std::left	A										<pre><code>std::ios_base& left( std::ios_base& str );</code></pre>Modifies the default positioning of the fill characters.	[http://en.cppreference.com/w/cpp/io/manip/left Cppreference]
std::right	A										<pre><code>std::ios_base& right( std::ios_base& str );</code></pre>Modifies the default positioning of the fill characters.	[http://en.cppreference.com/w/cpp/io/manip/left Cppreference]
std::put_money	A										<pre><code>template< class MoneyT >\\n/*unspecified*/ put_money( const MoneyT& mon, bool intl = false );</code></pre>When used in an expression <code>out &lt;&lt; put_money(mon, intl)</code>, converts the monetary value <code>mon</code> to its character representation as specified by the std::money_put facet of the locale currently imbued in ...	[http://en.cppreference.com/w/cpp/io/manip/put_money Cppreference]
std::put_time	A										<pre><code>template< class CharT >\\n/*unspecified*/ put_time( const std::tm* tmb, const CharT* fmt );</code></pre>When used in an expression <code>out &lt;&lt; put_time(tmb, fmt)</code>, converts the date and time information from a given calendar time <code>tmb</code> to a character string according to format string <code>fmt</code>, as if by...	[http://en.cppreference.com/w/cpp/io/manip/put_time Cppreference]
std::resetiosflags	A										<pre><code>/*unspecified*/ resetiosflags( std::ios_base::fmt_flags mask );</code></pre>When used in an expression <code>out &lt;&lt; resetiosflags(mask)</code> or <code>in &gt;&gt; resetiosflags(mask)</code>, clears all format flags of the stream <code>out</code> or <code>in</code> as specified by the <code>mask</code>.	[http://en.cppreference.com/w/cpp/io/manip/resetiosflags Cppreference]
std::setbase	A										<pre><code>/*unspecified*/ setbase( int base );</code></pre>When used in an expression <code>out &lt;&lt; setbase(base)</code> or <code>in &gt;&gt; setbase(base)</code>, changes the <code>basefield</code> flag of the stream <code>out</code> or <code>in</code>, depending on the value of <code>base</code>: the value <code>16</code> sets <code>basefield</code> to...	[http://en.cppreference.com/w/cpp/io/manip/setbase Cppreference]
std::setfill	A										<pre><code>template< class CharT >\\n/*unspecified*/ setfill( CharT c );</code></pre>When used in an expression <code>out &lt;&lt; setfill(c)</code> sets the fill character of the stream <code>out</code> to <code>c</code>.	[http://en.cppreference.com/w/cpp/io/manip/setfill Cppreference]
std::setiosflags	A										<pre><code>/*unspecified*/ setiosflags( std::ios_base::fmt_flags mask );</code></pre>When used in an expression <code>out &lt;&lt; setiosflags(mask)</code> or <code>in &gt;&gt; setiosflags(mask)</code>, sets all format flags of the stream <code>out</code> or <code>in</code> as specified by the <code>mask</code>.	[http://en.cppreference.com/w/cpp/io/manip/setiosflags Cppreference]
std::setprecision	A										<pre><code>/*unspecified*/ setprecision( int n );</code></pre>When used in an expression <code>out &lt;&lt; setprecision(n)</code> or <code>in &gt;&gt; setprecision(n)</code>, sets the <code>precision</code> parameter of the stream <code>out</code> or <code>in</code> to exactly <code>n</code>.	[http://en.cppreference.com/w/cpp/io/manip/setprecision Cppreference]
std::setw	A										<pre><code>/*unspecified*/ setw( int n );</code></pre>When used in an expression <code>out &lt;&lt; setw(n)</code> or <code>in &gt;&gt; setw(n)</code>, sets the <code>width</code> parameter of the stream <code>out</code> or <code>in</code> to exactly <code>n</code>.	[http://en.cppreference.com/w/cpp/io/manip/setw Cppreference]
std::noshowbase	A										<pre><code>std::ios_base& noshowbase( std::ios_base& str );</code></pre>1) enables the <code>showbase</code> flag in the stream <code>str</code> as if by calling <code>str.setf(std::ios_base::showbase)</code>...	[http://en.cppreference.com/w/cpp/io/manip/showbase Cppreference]
std::showbase	A										<pre><code>std::ios_base& showbase( std::ios_base& str );\\n< more overloads available ></code></pre>1) enables the <code>showbase</code> flag in the stream <code>str</code> as if by calling <code>str.setf(std::ios_base::showbase)</code>...	[http://en.cppreference.com/w/cpp/io/manip/showbase Cppreference]
std::noshowpoint	A										<pre><code>std::ios_base& noshowpoint( std::ios_base& str );</code></pre>Enables or disables the unconditional inclusion of the decimal point character in floating-point output.	[http://en.cppreference.com/w/cpp/io/manip/showpoint Cppreference]
std::showpoint	A										<pre><code>std::ios_base& showpoint( std::ios_base& str );\\n< more overloads available ></code></pre>Enables or disables the unconditional inclusion of the decimal point character in floating-point output.	[http://en.cppreference.com/w/cpp/io/manip/showpoint Cppreference]
std::noshowpos	A										<pre><code>std::ios_base& noshowpos( std::ios_base& str );</code></pre>Enables or disables the display of the plus sign <code>'+'</code> in non-negative integer output.	[http://en.cppreference.com/w/cpp/io/manip/showpos Cppreference]
std::showpos	A										<pre><code>std::ios_base& showpos( std::ios_base& str );\\n< more overloads available ></code></pre>Enables or disables the display of the plus sign <code>'+'</code> in non-negative integer output.	[http://en.cppreference.com/w/cpp/io/manip/showpos Cppreference]
std::noskipws	A										<pre><code>std::ios_base& noskipws( std::ios_base& str );</code></pre>Enables or disables skipping of leading whitespace by the formatted input functions (enabled by default).	[http://en.cppreference.com/w/cpp/io/manip/skipws Cppreference]
std::skipws	A										<pre><code>std::ios_base& skipws( std::ios_base& str );\\n< more overloads available ></code></pre>Enables or disables skipping of leading whitespace by the formatted input functions (enabled by default).	[http://en.cppreference.com/w/cpp/io/manip/skipws Cppreference]
std::nounitbuf	A										<pre><code>std::ios_base& nounitbuf( std::ios_base& str );</code></pre>Enables or disables automatic flushing of the output stream after any output operation.	[http://en.cppreference.com/w/cpp/io/manip/unitbuf Cppreference]
std::unitbuf	A										<pre><code>std::ios_base& unitbuf( std::ios_base& str );\\n< more overloads available ></code></pre>Enables or disables automatic flushing of the output stream after any output operation.	[http://en.cppreference.com/w/cpp/io/manip/unitbuf Cppreference]
std::nouppercase	A										<pre><code>std::ios_base& nouppercase( std::ios_base& str );</code></pre>Enables the use of uppercase characters in floating-point and hexadecimal integer output.	[http://en.cppreference.com/w/cpp/io/manip/uppercase Cppreference]
std::uppercase	A										<pre><code>std::ios_base& uppercase( std::ios_base& str );\\n< more overloads available ></code></pre>Enables the use of uppercase characters in floating-point and hexadecimal integer output.	[http://en.cppreference.com/w/cpp/io/manip/uppercase Cppreference]
std::ws	A										<pre><code>template< class CharT, class Traits >\\nstd::basic_istream<CharT,Traits>& ws( std::basic_istream<CharT, Traits>& is );</code></pre>Discards leading whitespace from an input stream.	[http://en.cppreference.com/w/cpp/io/manip/ws Cppreference]
std::advance	A										<pre><code>template< class InputIt, class Distance >\\nvoid advance( InputIt& it, Distance n );</code></pre>Increments given iterator <code>it</code> by <code>n</code> elements.	[http://en.cppreference.com/w/cpp/iterator/advance Cppreference]
std::back_insert_iterator	A										<pre><code>template< class Container >\\nclass back_insert_iterator : public std::iterator< std::output_iterator_tag,\\n                                                   void, void, void, void ></code></pre><code>std::back_insert_iterator</code> is an <code>OutputIterator</code> that appends to a container for which it was constructed.	[http://en.cppreference.com/w/cpp/iterator/back_insert_iterator Cppreference]
std::back_inserter	A										<pre><code>template< class Container >\\nstd::back_insert_iterator<Container> back_inserter( Container& c);</code></pre><code>back_inserter</code> is a convenience function template that constructs a std::back_insert_iterator for the container <code>c</code> with the type deduced from the type of the argument.	[http://en.cppreference.com/w/cpp/iterator/back_inserter Cppreference]
std::begin	A										<pre><code>template< class C > \\nauto cbegin( const C& c ) -> decltype(std::begin(c));</code></pre>Returns an iterator to the beginning of the given container <code>c</code> or array <code>array</code>.	[http://en.cppreference.com/w/cpp/iterator/begin Cppreference]
std::distance	A										<pre><code>template< class InputIt >\\ntypename std::iterator_traits<InputIt>::difference_type \\n    distance( InputIt first, InputIt last );</code></pre>Returns the number of elements between <code>first</code> and <code>last</code>.	[http://en.cppreference.com/w/cpp/iterator/distance Cppreference]
std::end	A										<pre><code>template< class C > \\nauto cend( const C& c ) -> decltype(std::end(c));</code></pre>Returns an iterator to the end  of the given container <code>c</code> or array <code>array</code>.	[http://en.cppreference.com/w/cpp/iterator/end Cppreference]
std::front_insert_iterator	A										<pre><code>template< class Container >\\nclass front_insert_iterator : public std::iterator< std::output_iterator_tag,\\n                                                   void,void,void,void ></code></pre><code>std::front_insert_iterator</code> is an output iterator that prepends elements to a container for which it was constructed.	[http://en.cppreference.com/w/cpp/iterator/front_insert_iterator Cppreference]
std::front_inserter	A										<pre><code>template< class Container >\\nstd::front_insert_iterator<Container> front_inserter( Container& c);</code></pre><code>front_inserter</code> is a convenience function template that constructs a std::front_insert_iterator for the container <code>c</code> with the type deduced from the type of the argument.	[http://en.cppreference.com/w/cpp/iterator/front_inserter Cppreference]
std::insert_iterator	A										<pre><code>template< class Container >\\nclass insert_iterator : public std::iterator< std::output_iterator_tag,\\n                                              void,void,void,void ></code></pre><code>std::insert_iterator</code> is an output iterator that inserts elements into a container for which it was constructed, at the position pointed to by the supplied iterator.	[http://en.cppreference.com/w/cpp/iterator/insert_iterator Cppreference]
std::inserter	A										<pre><code>template< class Container >\\nstd::insert_iterator<Container> inserter( Container& c, typename Container::iterator i );</code></pre><code>inserter</code> is a convenience function template that constructs a std::insert_iterator for the container <code>c</code> and its iterator <code>i</code> with the type deduced from the type of the argument.	[http://en.cppreference.com/w/cpp/iterator/inserter Cppreference]
std::istream_iterator	A										<pre><code>template< class T,\\n          class CharT = char,\\n          class Traits = std::char_traits<CharT>,\\n          class Distance = std::ptrdiff_t >\\nclass istream_iterator: public std::iterator<std::input_iterator_tag,\\n                                             T, Distance, const T*, const T&></code></pre><code>std::istream_iterator</code> is a single-pass input iterator that reads successive objects of type <code>T</code> from the std::basic_istream object for which it was constructed, by calling the appropriate ...	[http://en.cppreference.com/w/cpp/iterator/istream_iterator Cppreference]
std::istreambuf_iterator	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT> >\\nclass istreambuf_iterator : public std::iterator< std::input_iterator_tag,\\n                                                  CharT,\\n                                                  typename Traits::off_type,\\n                                                  /* unspecified, usually CharT* */,\\n                                                  CharT ></code></pre><code>std::istreambuf_iterator</code> is a single-pass input iterator that reads successive characters from the std::basic_streambuf object for which it was constructed.	[http://en.cppreference.com/w/cpp/iterator/istreambuf_iterator Cppreference]
std::iterator	A										<pre><code>template< \\n    class Category,\\n    class T,\\n    class Distance = std::ptrdiff_t,\\n    class Pointer = T*,\\n    class Reference = T& \\n> struct iterator;</code></pre><code>std::iterator</code> is the base class provided to simplify definitions of the required types for iterators.	[http://en.cppreference.com/w/cpp/iterator/iterator Cppreference]
std::bidirectional_iterator_tag	A										<pre><code>struct bidirectional_iterator_tag : public forward_iterator_tag { };\\n< more overloads available ></code></pre>Defines the category of an iterator.	[http://en.cppreference.com/w/cpp/iterator/iterator_tags Cppreference]
std::forward_iterator_tag	A										<pre><code>struct forward_iterator_tag : public input_iterator_tag { };\\n< more overloads available ></code></pre>Defines the category of an iterator.	[http://en.cppreference.com/w/cpp/iterator/iterator_tags Cppreference]
std::input_iterator_tag	A										<pre><code>struct input_iterator_tag { };\\n< more overloads available ></code></pre>Defines the category of an iterator.	[http://en.cppreference.com/w/cpp/iterator/iterator_tags Cppreference]
std::output_iterator_tag	A										<pre><code>struct output_iterator_tag { };</code></pre>Defines the category of an iterator.	[http://en.cppreference.com/w/cpp/iterator/iterator_tags Cppreference]
std::random_access_iterator_tag	A										<pre><code>struct random_access_iterator_tag : public bidirectional_iterator_tag { };</code></pre>Defines the category of an iterator.	[http://en.cppreference.com/w/cpp/iterator/iterator_tags Cppreference]
std::iterator_traits	A										<pre><code>template< class Iterator>\\nstruct iterator_traits;\\n< more overloads available ></code></pre><code>std::iterator_traits</code> is the type trait class that provides uniform interface to the properties of iterator types.	[http://en.cppreference.com/w/cpp/iterator/iterator_traits Cppreference]
std::make_move_iterator	A										<pre><code>template< class Iterator >\\nstd::move_iterator<Iterator> make_move_iterator( const Iterator& i );</code></pre><code>make_move_iterator</code> is a convenience function template that constructs a std::move_iterator for the given iterator <code>i</code> with the type deduced from the type of the argument.	[http://en.cppreference.com/w/cpp/iterator/make_move_iterator Cppreference]
std::move_iterator	A										<pre><code>template <class Iterator>\\nclass move_iterator</code></pre><code>std::move_iterator</code> is an iterator adaptor which behaves exactly like the underlying iterator , except that dereferencing converts the value returned by the underlying iterator into an rvalue.	[http://en.cppreference.com/w/cpp/iterator/move_iterator Cppreference]
std::next	A										<pre><code>template< class ForwardIt >\\nForwardIt next( ForwardIt it, \\n                typename std::iterator_traits<ForwardIt>::difference_type n = 1 );</code></pre>Return the <code>n</code>th successor of iterator <code>it</code>.	[http://en.cppreference.com/w/cpp/iterator/next Cppreference]
std::ostream_iterator	A										<pre><code>template< class T,\\n          class CharT = char,\\n          class Traits = std::char_traits<charT>>\\nclass ostream_iterator : public std::iterator<std::output_iterator_tag,\\n                                              void, void, void, void></code></pre><code>std::ostream_iterator</code> is a single-pass output iterator that writes successive objects of type <code>T</code> into the std::basic_ostream object for which it was constructed, using <code>operator&lt;&lt;</code>.	[http://en.cppreference.com/w/cpp/iterator/ostream_iterator Cppreference]
std::ostreambuf_iterator	A										<pre><code>template< class CharT, class Traits = std::char_traits<CharT>>\\nclass ostreambuf_iterator : public std::iterator<std::output_iterator_tag,\\n                                                 void, void, void, void></code></pre><code>std::ostreambuf_iterator</code> is a single-pass output iterator that writes successive characters into the std::basic_streambuf object for which it was constructed.	[http://en.cppreference.com/w/cpp/iterator/ostreambuf_iterator Cppreference]
std::prev	A										<pre><code>template< class BidirIt >\\nBidirIt prev( BidirIt it, \\n              typename std::iterator_traits<BidirIt>::difference_type n = 1 );</code></pre>Return the <code>n</code>th predecessor of iterator <code>it</code>.	[http://en.cppreference.com/w/cpp/iterator/prev Cppreference]
std::reverse_iterator	A										<pre><code>template< class Iterator >\\nclass reverse_iterator : public std::iterator<\\n                           typename std::iterator_traits<Iterator>::iterator_category,\\n                           typename std::iterator_traits<Iterator>::value_type,\\n                           typename std::iterator_traits<Iterator>::difference_type,\\n                           typename std::iterator_traits<Iterator>::pointer,\\n                           typename std::iterator_traits<Iterator>::reference ></code></pre><code>std::reverse_iterator</code> is an iterator adaptor that reverses the direction of a given iterator.	[http://en.cppreference.com/w/cpp/iterator/reverse_iterator Cppreference]
std::codecvt	A										<pre><code>template< \\n    class InternT, \\n    class ExternT, \\n    class State\\n> class codecvt;</code></pre>Class std::codecvt encapsulates conversion of character strings, including wide and multibyte, from one encoding to another.	[http://en.cppreference.com/w/cpp/locale/codecvt Cppreference]
std::codecvt::do_encoding	A										<pre><code>protected:\\nint do_encoding() const</code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt::encoding	A										<pre><code>public:\\nint encoding() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_byname::do_encoding	A										<pre><code>protected:\\nint do_encoding() const</code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_byname::encoding	A										<pre><code>public:\\nint encoding() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_utf16::do_encoding	A										<pre><code>protected:\\nint do_encoding() const</code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_utf16::encoding	A										<pre><code>public:\\nint encoding() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_utf8::do_encoding	A										<pre><code>protected:\\nint do_encoding() const</code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_utf8::encoding	A										<pre><code>public:\\nint encoding() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_utf8_utf16::do_encoding	A										<pre><code>protected:\\nint do_encoding() const</code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt_utf8_utf16::encoding	A										<pre><code>public:\\nint encoding() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_encoding</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/encoding Cppreference]
std::codecvt::do_in	A										<pre><code>protected:\\nresult do_in( stateT& state,\\n              const externT* from,\\n              const externT* from_end,\\n              const externT*& from_next,\\n              internT* to,\\n              internT* to_end,\\n              internT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt::in	A										<pre><code>public:\\nresult in( stateT& state,\\n           const externT* from,\\n           const externT* from_end,\\n           const externT*& from_next,\\n           internT* to,\\n           internT* to_end,\\n           internT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_byname::do_in	A										<pre><code>protected:\\nresult do_in( stateT& state,\\n              const externT* from,\\n              const externT* from_end,\\n              const externT*& from_next,\\n              internT* to,\\n              internT* to_end,\\n              internT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_byname::in	A										<pre><code>public:\\nresult in( stateT& state,\\n           const externT* from,\\n           const externT* from_end,\\n           const externT*& from_next,\\n           internT* to,\\n           internT* to_end,\\n           internT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_utf16::do_in	A										<pre><code>protected:\\nresult do_in( stateT& state,\\n              const externT* from,\\n              const externT* from_end,\\n              const externT*& from_next,\\n              internT* to,\\n              internT* to_end,\\n              internT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_utf16::in	A										<pre><code>public:\\nresult in( stateT& state,\\n           const externT* from,\\n           const externT* from_end,\\n           const externT*& from_next,\\n           internT* to,\\n           internT* to_end,\\n           internT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_utf8::do_in	A										<pre><code>protected:\\nresult do_in( stateT& state,\\n              const externT* from,\\n              const externT* from_end,\\n              const externT*& from_next,\\n              internT* to,\\n              internT* to_end,\\n              internT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_utf8::in	A										<pre><code>public:\\nresult in( stateT& state,\\n           const externT* from,\\n           const externT* from_end,\\n           const externT*& from_next,\\n           internT* to,\\n           internT* to_end,\\n           internT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_utf8_utf16::do_in	A										<pre><code>protected:\\nresult do_in( stateT& state,\\n              const externT* from,\\n              const externT* from_end,\\n              const externT*& from_next,\\n              internT* to,\\n              internT* to_end,\\n              internT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt_utf8_utf16::in	A										<pre><code>public:\\nresult in( stateT& state,\\n           const externT* from,\\n           const externT* from_end,\\n           const externT*& from_next,\\n           internT* to,\\n           internT* to_end,\\n           internT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_in</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/in Cppreference]
std::codecvt::do_length	A										<pre><code>protected:\\nint do_length( stateT& state,\\n               const externT* from,\\n               const externT* from_end,\\n               std::size_t max ) const</code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt::length	A										<pre><code>public:\\nint length( stateT& state,\\n            const externT* from,\\n            const externT* from_end,\\n            std::size_t max ) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_byname::do_length	A										<pre><code>protected:\\nint do_length( stateT& state,\\n               const externT* from,\\n               const externT* from_end,\\n               std::size_t max ) const</code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_byname::length	A										<pre><code>public:\\nint length( stateT& state,\\n            const externT* from,\\n            const externT* from_end,\\n            std::size_t max ) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_utf16::do_length	A										<pre><code>protected:\\nint do_length( stateT& state,\\n               const externT* from,\\n               const externT* from_end,\\n               std::size_t max ) const</code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_utf16::length	A										<pre><code>public:\\nint length( stateT& state,\\n            const externT* from,\\n            const externT* from_end,\\n            std::size_t max ) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_utf8::do_length	A										<pre><code>protected:\\nint do_length( stateT& state,\\n               const externT* from,\\n               const externT* from_end,\\n               std::size_t max ) const</code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_utf8::length	A										<pre><code>public:\\nint length( stateT& state,\\n            const externT* from,\\n            const externT* from_end,\\n            std::size_t max ) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_utf8_utf16::do_length	A										<pre><code>protected:\\nint do_length( stateT& state,\\n               const externT* from,\\n               const externT* from_end,\\n               std::size_t max ) const</code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt_utf8_utf16::length	A										<pre><code>public:\\nint length( stateT& state,\\n            const externT* from,\\n            const externT* from_end,\\n            std::size_t max ) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/length Cppreference]
std::codecvt::do_max_length	A										<pre><code>protected:\\nint do_max_length() const</code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt::max_length	A										<pre><code>public:\\nint max_length() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_byname::do_max_length	A										<pre><code>protected:\\nint do_max_length() const</code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_byname::max_length	A										<pre><code>public:\\nint max_length() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_utf16::do_max_length	A										<pre><code>protected:\\nint do_max_length() const</code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_utf16::max_length	A										<pre><code>public:\\nint max_length() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_utf8::do_max_length	A										<pre><code>protected:\\nint do_max_length() const</code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_utf8::max_length	A										<pre><code>public:\\nint max_length() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_utf8_utf16::do_max_length	A										<pre><code>protected:\\nint do_max_length() const</code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt_utf8_utf16::max_length	A										<pre><code>public:\\nint max_length() const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_max_length</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/max_length Cppreference]
std::codecvt::do_out	A										<pre><code>protected:\\nresult do_out( stateT& state,\\n               const internT* from,\\n               const internT* from_end,\\n               const internT*& from_next,\\n               externT* to,\\n               externT* to_end,\\n               externT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt::out	A										<pre><code>public:\\nresult out( stateT& state,\\n            const internT* from,\\n            const internT* from_end,\\n            const internT*& from_next,\\n            externT* to,\\n            externT* to_end,\\n            externT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_byname::do_out	A										<pre><code>protected:\\nresult do_out( stateT& state,\\n               const internT* from,\\n               const internT* from_end,\\n               const internT*& from_next,\\n               externT* to,\\n               externT* to_end,\\n               externT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_byname::out	A										<pre><code>public:\\nresult out( stateT& state,\\n            const internT* from,\\n            const internT* from_end,\\n            const internT*& from_next,\\n            externT* to,\\n            externT* to_end,\\n            externT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_utf16::do_out	A										<pre><code>protected:\\nresult do_out( stateT& state,\\n               const internT* from,\\n               const internT* from_end,\\n               const internT*& from_next,\\n               externT* to,\\n               externT* to_end,\\n               externT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_utf16::out	A										<pre><code>public:\\nresult out( stateT& state,\\n            const internT* from,\\n            const internT* from_end,\\n            const internT*& from_next,\\n            externT* to,\\n            externT* to_end,\\n            externT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_utf8::do_out	A										<pre><code>protected:\\nresult do_out( stateT& state,\\n               const internT* from,\\n               const internT* from_end,\\n               const internT*& from_next,\\n               externT* to,\\n               externT* to_end,\\n               externT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_utf8::out	A										<pre><code>public:\\nresult out( stateT& state,\\n            const internT* from,\\n            const internT* from_end,\\n            const internT*& from_next,\\n            externT* to,\\n            externT* to_end,\\n            externT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_utf8_utf16::do_out	A										<pre><code>protected:\\nresult do_out( stateT& state,\\n               const internT* from,\\n               const internT* from_end,\\n               const internT*& from_next,\\n               externT* to,\\n               externT* to_end,\\n               externT*& to_next ) const;</code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt_utf8_utf16::out	A										<pre><code>public:\\nresult out( stateT& state,\\n            const internT* from,\\n            const internT* from_end,\\n            const internT*& from_next,\\n            externT* to,\\n            externT* to_end,\\n            externT*& to_next ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_out</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/out Cppreference]
std::codecvt::do_unshift	A										<pre><code>protected:\\nresult do_unshift( stateT& state,\\n                   externT* to,\\n                   externT* to_end,\\n                   externT*& to_next) const</code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt::unshift	A										<pre><code>public:\\nresult unshift( stateT& state,\\n                externT* to,\\n                externT* to_end,\\n                externT*& to_next) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_byname::do_unshift	A										<pre><code>protected:\\nresult do_unshift( stateT& state,\\n                   externT* to,\\n                   externT* to_end,\\n                   externT*& to_next) const</code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_byname::unshift	A										<pre><code>public:\\nresult unshift( stateT& state,\\n                externT* to,\\n                externT* to_end,\\n                externT*& to_next) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_utf16::do_unshift	A										<pre><code>protected:\\nresult do_unshift( stateT& state,\\n                   externT* to,\\n                   externT* to_end,\\n                   externT*& to_next) const</code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_utf16::unshift	A										<pre><code>public:\\nresult unshift( stateT& state,\\n                externT* to,\\n                externT* to_end,\\n                externT*& to_next) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_utf8::do_unshift	A										<pre><code>protected:\\nresult do_unshift( stateT& state,\\n                   externT* to,\\n                   externT* to_end,\\n                   externT*& to_next) const</code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_utf8::unshift	A										<pre><code>public:\\nresult unshift( stateT& state,\\n                externT* to,\\n                externT* to_end,\\n                externT*& to_next) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_utf8_utf16::do_unshift	A										<pre><code>protected:\\nresult do_unshift( stateT& state,\\n                   externT* to,\\n                   externT* to_end,\\n                   externT*& to_next) const</code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_utf8_utf16::unshift	A										<pre><code>public:\\nresult unshift( stateT& state,\\n                externT* to,\\n                externT* to_end,\\n                externT*& to_next) const\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_unshift</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/codecvt/unshift Cppreference]
std::codecvt_base	A										<pre><code>class codecvt_base;</code></pre>The class std::codecvt_base provides the conversion status constants which are inherited and used by the std::codecvt facets.	[http://en.cppreference.com/w/cpp/locale/codecvt_base Cppreference]
std::codecvt_byname	A										<pre><code>template< class InternT, class ExternT, class State >\\nclass codecvt_byname : public std::codecvt<InternT, ExternT, State>;</code></pre>std::codecvt_byname is a std::codecvt facet which encapsulates multibyte/wide character conversion rules of a locale specified at its construction.	[http://en.cppreference.com/w/cpp/locale/codecvt_byname Cppreference]
std::codecvt_utf16	A										<pre><code>template< class Elem,\\n          unsigned long Maxcode = 0x10ffff,\\n          std::codecvt_mode Mode = (std::codecvt_mode)0 >\\nclass codecvt_utf16 : public std::codecvt<Elem, char, std::mbstate_t>;;</code></pre>std::codecvt_utf16 is a std::codecvt facet which encapsulates conversion between a UTF-16 encoded byte string and UCS2 or UCS4 character string .	[http://en.cppreference.com/w/cpp/locale/codecvt_utf16 Cppreference]
std::codecvt_utf8	A										<pre><code>template< \\n    class Elem,\\n    unsigned long Maxcode = 0x10ffff,\\n    std::codecvt_mode Mode = (std::codecvt_mode)0 \\n> class codecvt_utf8 : public std::codecvt<Elem, char, std::mbstate_t>;</code></pre>std::codecvt_utf8 is a std::codecvt facet which encapsulates conversion between a UTF-8 encoded byte string and UCS2 or UCS4 character string .	[http://en.cppreference.com/w/cpp/locale/codecvt_utf8 Cppreference]
std::codecvt_utf8_utf16	A										<pre><code>template< class Elem,\\n          unsigned long Maxcode = 0x10ffff,\\n          std::codecvt_mode Mode = (std::codecvt_mode)0 >\\nclass codecvt_utf8_utf16 : public std::codecvt<Elem, char, std::mbstate_t>;</code></pre>std::codecvt_utf8_utf16 is a std::codecvt facet which encapsulates conversion between a UTF-8 encoded byte string and UTF-16 encoded character string.	[http://en.cppreference.com/w/cpp/locale/codecvt_utf8_utf16 Cppreference]
std::collate	A										<pre><code>template< class CharT >\\nclass collate;</code></pre>Class std::collate encapsulates locale-specific collation (comparison) and hashing of strings.	[http://en.cppreference.com/w/cpp/locale/collate Cppreference]
std::collate::compare	A										<pre><code>public:\\nint compare( const CharT* low1, const CharT* high1,\\n             const CharT* low2, const CharT* high2 ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_compare</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/compare Cppreference]
std::collate::do_compare	A										<pre><code>protected:\\nvirtual int do_compare( const CharT* low1, const CharT* high1,\\n                        const CharT* low2, const CharT* high2 ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_compare</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/compare Cppreference]
std::collate_byname::compare	A										<pre><code>public:\\nint compare( const CharT* low1, const CharT* high1,\\n             const CharT* low2, const CharT* high2 ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_compare</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/compare Cppreference]
std::collate_byname::do_compare	A										<pre><code>protected:\\nvirtual int do_compare( const CharT* low1, const CharT* high1,\\n                        const CharT* low2, const CharT* high2 ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_compare</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/compare Cppreference]
std::collate::do_hash	A										<pre><code>protected:\\nvirtual long do_hash( const CharT* beg, const CharT* end ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_hash</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/hash Cppreference]
std::collate::hash	A										<pre><code>public:\\nlong hash( const CharT* beg, const CharT* end ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_hash</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/hash Cppreference]
std::collate_byname::do_hash	A										<pre><code>protected:\\nvirtual long do_hash( const CharT* beg, const CharT* end ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_hash</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/hash Cppreference]
std::collate_byname::hash	A										<pre><code>public:\\nlong hash( const CharT* beg, const CharT* end ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_hash</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/hash Cppreference]
std::collate::do_transform	A										<pre><code>protected:\\nvirtual string_type do_transform( const CharT* low, const CharT* high ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_transform</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/transform Cppreference]
std::collate::transform	A										<pre><code>public:\\nstring_type transform( const CharT* low, const CharT* high ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_transform</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/transform Cppreference]
std::collate_byname::do_transform	A										<pre><code>protected:\\nvirtual string_type do_transform( const CharT* low, const CharT* high ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_transform</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/transform Cppreference]
std::collate_byname::transform	A										<pre><code>public:\\nstring_type transform( const CharT* low, const CharT* high ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_transform</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/collate/transform Cppreference]
std::collate_byname	A										<pre><code>template< class CharT >\\nclass collate_byname : public std::collate<CharT>;</code></pre>std::collate_byname is a std::collate facet which encapsulates locale-specific collation (comparison) and hashing of strings.	[http://en.cppreference.com/w/cpp/locale/collate_byname Cppreference]
std::ctype	A										<pre><code>template< class CharT >\\nclass ctype;</code></pre>Class ctype encapsulates character classification features.	[http://en.cppreference.com/w/cpp/locale/ctype Cppreference]
std::ctype_base	A										<pre><code>class ctype_base;</code></pre>The class std::ctype_base lists the character classification categories which are inherited by the std::ctype facets.	[http://en.cppreference.com/w/cpp/locale/ctype_base Cppreference]
std::ctype_byname	A										<pre><code>template< class CharT >\\nclass ctype_byname : public std::ctype<CharT>;</code></pre>std::ctype_byname is a std::ctype facet which encapsulates character classification rules of the locale specified at its construction.	[http://en.cppreference.com/w/cpp/locale/ctype_byname Cppreference]
std::has_facet	A										<pre><code>template< class Facet >\\nbool has_facet( const locale& loc );</code></pre>Checks if the locale <code>loc</code> implements the facet <code>Facet</code>.	[http://en.cppreference.com/w/cpp/locale/has_facet Cppreference]
std::lconv	A										<pre><code>struct lconv;</code></pre>The class <code>std::lconv</code> contains numeric and monetary formatting rules as defined by a C locale.	[http://en.cppreference.com/w/cpp/locale/lconv Cppreference]
std::locale	A										<pre><code>class locale;</code></pre>An object of class std::locale is an indexed set of reference-counted pointers to facets.	[http://en.cppreference.com/w/cpp/locale/locale Cppreference]
std::locale::classic	A										<pre><code>static const locale& classic();</code></pre>Obtains a reference to the C++ locale that implements the classic "C" locale semantics.	[http://en.cppreference.com/w/cpp/locale/locale/classic Cppreference]
std::locale::combine	A										<pre><code>template< class Facet >\\nlocale combine( const locale& other ) const;</code></pre>Constructs a locale object which is a copy of <code>*this</code> except for the facet of type <code>Facet</code>, which is copied from <code>other</code>.	[http://en.cppreference.com/w/cpp/locale/locale/combine Cppreference]
std::locale::facet	A										<pre><code>class locale::facet;</code></pre>std::locale::facet is the base class for facets.	[http://en.cppreference.com/w/cpp/locale/locale/facet Cppreference]
std::locale::global	A										<pre><code>static locale global( const locale& loc );</code></pre>Replaces the global C++ locale with <code>loc</code>, which means all future calls to the std::locale default constructor will now return a copy of <code>loc</code>.	[http://en.cppreference.com/w/cpp/locale/locale/global Cppreference]
std::locale::id	A										<pre><code>class locale::id;</code></pre>The class std::locale::id provides implementation-specific identification of a locale facet.	[http://en.cppreference.com/w/cpp/locale/locale/id Cppreference]
std::locale::name	A										<pre><code>std::string name() const;</code></pre>Returns the name of the locale, which is the name by which it is known to the operating system, such as "POSIX" or "en_US.	[http://en.cppreference.com/w/cpp/locale/locale/name Cppreference]
std::locale::operator()	A										<pre><code>template< class CharT, class Traits, class Alloc >\\nbool operator()( const basic_string<CharT,Traits,Alloc>& s1,\\n                 const basic_string<CharT,Traits,Alloc>& s2) const;</code></pre>Compares two string arguments <code>s1</code> and <code>s2</code> according to the lexicographic comparison rules defined by this locale's <code>std::collate&lt;charT&gt;</code> facet.	[http://en.cppreference.com/w/cpp/locale/locale/operator() Cppreference]
std::locale::operator=	A										<pre><code>const locale& operator=( const locale& other );</code></pre>Creates a copy of <code>other</code>, replacing the contents of <code>*this</code>.	[http://en.cppreference.com/w/cpp/locale/locale/operator= Cppreference]
std::locale::operator!=	A										<pre><code>bool operator!=( const locale& other ) const;</code></pre>Tests two locales for equality.	[http://en.cppreference.com/w/cpp/locale/locale/operator_cmp Cppreference]
std::locale::operator==	A										<pre><code>bool operator==( const locale& other ) const;</code></pre>Tests two locales for equality.	[http://en.cppreference.com/w/cpp/locale/locale/operator_cmp Cppreference]
std::localeconv	A										<pre><code>std::lconv* localeconv();</code></pre>The <code>localeconv</code> function obtains a pointer to a static object of type std::lconv, which represents numeric and monetary formatting rules of the current C locale.	[http://en.cppreference.com/w/cpp/locale/localeconv Cppreference]
std::messages	A										<pre><code>template< class CharT >\\nclass messages;</code></pre>Class template std::messages encapsulates retrieval of strings from message catalogs, such as the ones provided by GNU gettext or by POSIX catgets.	[http://en.cppreference.com/w/cpp/locale/messages Cppreference]
std::messages::close	A										<pre><code>public:\\nvoid close( catalog c ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/close Cppreference]
std::messages::do_close	A										<pre><code>protected:\\nvirtual void do_close( catalog c ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/close Cppreference]
std::messages_byname::close	A										<pre><code>public:\\nvoid close( catalog c ) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/close Cppreference]
std::messages_byname::do_close	A										<pre><code>protected:\\nvirtual void do_close( catalog c ) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/close Cppreference]
std::messages::do_get	A										<pre><code>protected:\\nvirtual string_type do_get( catalog cat, int set, int msgid, const string_type& dfault ) const;</code></pre>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/get Cppreference]
std::messages::get	A										<pre><code>public:\\nstring_type get( catalog cat, int set, int msgid, const string_type& dfault ) const;\\n< more overloads available ></code></pre>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/get Cppreference]
std::messages_byname::do_get	A										<pre><code>protected:\\nvirtual string_type do_get( catalog cat, int set, int msgid, const string_type& dfault ) const;</code></pre>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/get Cppreference]
std::messages_byname::get	A										<pre><code>public:\\nstring_type get( catalog cat, int set, int msgid, const string_type& dfault ) const;\\n< more overloads available ></code></pre>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/get Cppreference]
std::messages::do_open	A										<pre><code>protected:\\nvirtual catalog do_open( const std::basic_string<char>& name, const std::locale& loc ) const;</code></pre>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/open Cppreference]
std::messages::open	A										<pre><code>public:\\ncatalog open( const std::basic_string<char>& name, const std::locale& loc ) const;\\n< more overloads available ></code></pre>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/open Cppreference]
std::messages_byname::do_open	A										<pre><code>protected:\\nvirtual catalog do_open( const std::basic_string<char>& name, const std::locale& loc ) const;</code></pre>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/open Cppreference]
std::messages_byname::open	A										<pre><code>public:\\ncatalog open( const std::basic_string<char>& name, const std::locale& loc ) const;\\n< more overloads available ></code></pre>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/messages/open Cppreference]
std::messages_base	A										<pre><code>class messages_base;</code></pre>The class std::messages_base provides a type definition which is inherited and used by the std::messages facets.	[http://en.cppreference.com/w/cpp/locale/messages_base Cppreference]
std::messages_byname	A										<pre><code>template< class CharT >\\nclass messages_byname : public std::messages<CharT>;</code></pre>std::messages_byname is a std::messages facet which encapsulates retrieval of strings from message catalogs of the locale specified at its construction.	[http://en.cppreference.com/w/cpp/locale/messages_byname Cppreference]
std::money_base	A										<pre><code>class money_base;</code></pre>The class std::money_base provides constants which are inherited and used by the std::moneypunct, std::money_get and std::money_put facets.	[http://en.cppreference.com/w/cpp/locale/money_base Cppreference]
std::money_get	A										<pre><code>template< \\n    class CharT,\\n    class InputIt = std::istreambuf_iterator<CharT>\\n> class money_get;</code></pre>Class template <code>std::money_get</code> encapsulates the rules for parsing monetary values from character streams.	[http://en.cppreference.com/w/cpp/locale/money_get Cppreference]
std::money_put	A										<pre><code>template< \\n    class CharT,\\n    class OutputIt = std::ostreambuf_iterator<CharT>\\n> class money_put;</code></pre>Class <code>std::money_put</code> encapsulates the rules for formatting monetary values as strings.	[http://en.cppreference.com/w/cpp/locale/money_put Cppreference]
std::moneypunct	A										<pre><code>template< class CharT, bool International = false >\\nclass moneypunct;</code></pre>The facet std::moneypunct encapsulates monetary value format preferences.	[http://en.cppreference.com/w/cpp/locale/moneypunct Cppreference]
std::moneypunct::do_thousands_sep	A										<pre><code>protected:\\nchar_type virtual do_thousands_sep() const;</code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/moneypunct/thousands_sep Cppreference]
std::moneypunct::thousands_sep	A										<pre><code>public:\\nchar_type thousands_sep() const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/moneypunct/thousands_sep Cppreference]
std::moneypunct_byname::do_thousands_sep	A										<pre><code>protected:\\nchar_type virtual do_thousands_sep() const;</code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/moneypunct/thousands_sep Cppreference]
std::moneypunct_byname::thousands_sep	A										<pre><code>public:\\nchar_type thousands_sep() const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/moneypunct/thousands_sep Cppreference]
std::moneypunct_byname	A										<pre><code>template< class CharT, bool Intl = false >\\nclass moneypunct_byname : public std::moneypunct<CharT, Intl>;</code></pre>std::moneypunct_byname is a std::moneypunct facet which encapsulates monetary formatting preferences of a locale specified at its construction.	[http://en.cppreference.com/w/cpp/locale/moneypunct_byname Cppreference]
std::num_get	A										<pre><code>template< \\n    class CharT,\\n    class InputIt = std::istreambuf_iterator<CharT>\\n> class num_get;</code></pre>Class <code>std::num_get</code> encapsulates the rules for parsing string representations of numeric values.	[http://en.cppreference.com/w/cpp/locale/num_get Cppreference]
std::num_get::do_get	A										<pre><code>protected:\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, bool& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, long& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, long long& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, unsigned short& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, unsigned int& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, unsigned long& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, unsigned long long& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, float& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, double& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, long double& v ) const;\\niter_type do_get( iter_type in, iter_type end, std::ios_base& str, \\n                  std::ios_base::iostate& err, void*& v ) const;</code></pre>1) public member function, calls the member function <code>do_get</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/num_get/get Cppreference]
std::num_get::get	A										<pre><code>public:\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, bool& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, long& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, long long& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, unsigned short& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, unsigned int& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, unsigned long& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, unsigned long long& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, float& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, double& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, long double& v ) const;\\niter_type get( iter_type in, iter_type end, std::ios_base& str, \\n               std::ios_base::iostate& err, void*& v ) const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_get</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/num_get/get Cppreference]
std::num_put	A										<pre><code>template< \\n    class CharT,\\n    class OutputIt = std::ostreambuf_iterator<CharT>\\n> class num_put;</code></pre>Class <code>std::num_put</code> encapsulates the rules for formatting numeric values as strings.	[http://en.cppreference.com/w/cpp/locale/num_put Cppreference]
std::num_put::do_put	A										<pre><code>protected:\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, bool v) const;\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, long v) const;\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, long long v) const;\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, unsigned long) const;\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, unsigned long long) const;\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, double v) const;\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, long double v) const;\\niter_type do_put( iter_type out, std::ios_base& str, char_type fill, const void* v) const;</code></pre>1) public member function, calls the protected virtual member function <code>do_put</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/num_put/put Cppreference]
std::num_put::put	A										<pre><code>public:\\niter_type put( iter_type out, std::ios_base& str, char_type fill, bool v) const;\\niter_type put( iter_type out, std::ios_base& str, char_type fill, long v) const;\\niter_type put( iter_type out, std::ios_base& str, char_type fill, long long v) const;\\niter_type put( iter_type out, std::ios_base& str, char_type fill, unsigned long v) const;\\niter_type put( iter_type out, std::ios_base& str, char_type fill, unsigned long long v) const;\\niter_type put( iter_type out, std::ios_base& str, char_type fill, double v) const;\\niter_type put( iter_type out, std::ios_base& str, char_type fill, long double v) const;\\niter_type put( iter_type out, std::ios_base& str, char_type fill, const void* v) const;\\n< more overloads available ></code></pre>1) public member function, calls the protected virtual member function <code>do_put</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/num_put/put Cppreference]
std::numpunct	A										<pre><code>template< class CharT >\\nclass numpunct;</code></pre>The facet std::numpunct encapsulates numeric punctuation preferences.	[http://en.cppreference.com/w/cpp/locale/numpunct Cppreference]
std::numpunct::decimal_point	A										<pre><code>public:\\nchar_type decimal_point() const;\\n< more overloads available ></code></pre>1) Public member function, calls the member function <code>do_decimal_point</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/decimal_point Cppreference]
std::numpunct::do_decimal_point	A										<pre><code>protected:\\nchar_type virtual do_decimal_point() const;</code></pre>1) Public member function, calls the member function <code>do_decimal_point</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/decimal_point Cppreference]
std::numpunct_byname::decimal_point	A										<pre><code>public:\\nchar_type decimal_point() const;\\n< more overloads available ></code></pre>1) Public member function, calls the member function <code>do_decimal_point</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/decimal_point Cppreference]
std::numpunct_byname::do_decimal_point	A										<pre><code>protected:\\nchar_type virtual do_decimal_point() const;</code></pre>1) Public member function, calls the member function <code>do_decimal_point</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/decimal_point Cppreference]
std::numpunct::do_grouping	A										<pre><code>protected:\\nvirtual std::string do_grouping() const;</code></pre>1) public member function, calls the member function <code>do_grouping</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/grouping Cppreference]
std::numpunct::grouping	A										<pre><code>public:\\nstd::string grouping() const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_grouping</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/grouping Cppreference]
std::numpunct_byname::do_grouping	A										<pre><code>protected:\\nvirtual std::string do_grouping() const;</code></pre>1) public member function, calls the member function <code>do_grouping</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/grouping Cppreference]
std::numpunct_byname::grouping	A										<pre><code>public:\\nstd::string grouping() const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_grouping</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/grouping Cppreference]
std::numpunct::do_thousands_sep	A										<pre><code>protected:\\nchar_type virtual do_thousands_sep() const;</code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/thousands_sep Cppreference]
std::numpunct::thousands_sep	A										<pre><code>public:\\nchar_type thousands_sep() const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/thousands_sep Cppreference]
std::numpunct_byname::do_thousands_sep	A										<pre><code>protected:\\nchar_type virtual do_thousands_sep() const;</code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/thousands_sep Cppreference]
std::numpunct_byname::thousands_sep	A										<pre><code>public:\\nchar_type thousands_sep() const;\\n< more overloads available ></code></pre>1) public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.	[http://en.cppreference.com/w/cpp/locale/numpunct/thousands_sep Cppreference]
std::numpunct::do_falsename	A										<pre><code>protected:\\nvirtual string_type do_falsename() const;</code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct::do_truename	A										<pre><code>protected:\\nvirtual string_type do_truename() const;</code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct::falsename	A										<pre><code>public:\\nstring_type falsename() const;\\n< more overloads available ></code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct::truename	A										<pre><code>public:\\nstring_type truename() const;\\n< more overloads available ></code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct_byname::do_falsename	A										<pre><code>protected:\\nvirtual string_type do_falsename() const;</code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct_byname::do_truename	A										<pre><code>protected:\\nvirtual string_type do_truename() const;</code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct_byname::falsename	A										<pre><code>public:\\nstring_type falsename() const;\\n< more overloads available ></code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct_byname::truename	A										<pre><code>public:\\nstring_type truename() const;\\n< more overloads available ></code></pre>1-2) Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.	[http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename Cppreference]
std::numpunct_byname	A										<pre><code>template< class CharT >\\nclass numpunct_byname : public std::numpunct<CharT>;</code></pre>std::numpunct_byname is a std::numpunct facet which encapsulates numeric punctuation preferences of a locale specified at its construction.	[http://en.cppreference.com/w/cpp/locale/numpunct_byname Cppreference]
std::setlocale	A										<pre><code>char* setlocale( int category, const char* locale);</code></pre>The <code>setlocale</code> function installs the specified system locale or its portion as the new C locale.	[http://en.cppreference.com/w/cpp/locale/setlocale Cppreference]
std::time_base	A										<pre><code>class time_base;</code></pre>The class std::time_base provides the date order constants which are inherited by the std::time_get facets.	[http://en.cppreference.com/w/cpp/locale/time_base Cppreference]
std::time_get	A										<pre><code>template< \\n    class CharT, \\n    class InputIt = std::istreambuf_iterator<CharT> \\n> class time_get;</code></pre>Class template <code>std::time_get</code> encapsulates date and time parsing rules.	[http://en.cppreference.com/w/cpp/locale/time_get Cppreference]
std::time_get_byname	A										<pre><code>template< class CharT, class InputIterator = std::istreambuf_iterator<CharT> >\\nclass time_get_byname : public std::time_get<CharT, InputIterator> {</code></pre>std::time_get_byname is a std::time_get facet which encapsulates time and date parsing rules of the locale specified at its construction.	[http://en.cppreference.com/w/cpp/locale/time_get_byname Cppreference]
std::time_put	A										<pre><code>template< \\n    class CharT, \\n    class OutputIt = std::ostreambuf_iterator<CharT> \\n> class time_put;</code></pre>Class template <code>std::time_put</code> encapsulates date and time formatting rules.	[http://en.cppreference.com/w/cpp/locale/time_put Cppreference]
std::time_put::do_put	A										<pre><code>protected:\\nvirtual iter_type do_put( iter_type out, std::ios_base& str,\\n                          char_type fill, const std::tm* t,\\n                          char format, char modifier ) const;</code></pre>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.	[http://en.cppreference.com/w/cpp/locale/time_put/put Cppreference]
std::time_put::put	A										<pre><code>public:\\niter_type put( iter_type out, std::ios_base& str,\\n               char_type fill, const std::tm* t,\\n               const charT* fmtbeg, const charT* fmtend ) const;\\n< more overloads available ></code></pre>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.	[http://en.cppreference.com/w/cpp/locale/time_put/put Cppreference]
std::time_put_byname::do_put	A										<pre><code>protected:\\nvirtual iter_type do_put( iter_type out, std::ios_base& str,\\n                          char_type fill, const std::tm* t,\\n                          char format, char modifier ) const;</code></pre>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.	[http://en.cppreference.com/w/cpp/locale/time_put/put Cppreference]
std::time_put_byname::put	A										<pre><code>public:\\niter_type put( iter_type out, std::ios_base& str,\\n               char_type fill, const std::tm* t,\\n               const charT* fmtbeg, const charT* fmtend ) const;\\n< more overloads available ></code></pre>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.	[http://en.cppreference.com/w/cpp/locale/time_put/put Cppreference]
std::time_put_byname	A										<pre><code>template< class CharT, class OutputIterator = std::ostreambuf_iterator<CharT> >\\nclass time_put_byname : public std::time_put<CharT, OutputIterator>;</code></pre>std::time_put_byname is a std::time_put facet which encapsulates time and date formatting rules of the locale specified at its construction.	[http://en.cppreference.com/w/cpp/locale/time_put_byname Cppreference]
std::use_facet	A										<pre><code>template< class Facet >\\nconst Facet& use_facet( const std::locale& loc );</code></pre>Obtains a reference to a facet implemented by <code>loc</code>.	[http://en.cppreference.com/w/cpp/locale/use_facet Cppreference]
std::wbuffer_convert	A										<pre><code>template<class Codecvt,\\n         class Elem = wchar_t,\\n         class Tr = std::char_traits<Elem> >\\nclass wbuffer_convert : public std::basic_streambuf<Elem, Tr></code></pre>std::wbuffer_convert is a wrapper over stream buffer of type <code>std::basic_streambuf&lt;char&gt;</code> which gives it the appearance of <code>std::basic_streambuf&lt;Elem&gt;</code>.	[http://en.cppreference.com/w/cpp/locale/wbuffer_convert Cppreference]
std::wbuffer_convert::rdbuf	A										<pre><code>std::streambuf* rdbuf() const;\\n< more overloads available ></code></pre>1) returns the pointer to the underlying byte stream...	[http://en.cppreference.com/w/cpp/locale/wbuffer_convert/rdbuf Cppreference]
std::wbuffer_convert::state	A										<pre><code>state_type state() const;</code></pre>Returns the current value of the conversion state, which is stored in this <code>wbuffer_convert</code> object.	[http://en.cppreference.com/w/cpp/locale/wbuffer_convert/state Cppreference]
std::wstring_convert	A										<pre><code>template< class Codecvt,\\n          class Elem = wchar_t,\\n          class Wide_alloc = std::allocator<Elem>,\\n          class Byte_alloc = std::allocator<char> >\\nclass wstring_convert;</code></pre>Class template std::wstring_convert performs conversions between byte string std::string and wide string <code>std::basic_string&lt;Elem&gt;</code>, using an individual code conversion facet <code>Codecvt</code>.	[http://en.cppreference.com/w/cpp/locale/wstring_convert Cppreference]
std::wstring_convert::converted	A										<pre><code>std::size_t converted() const;</code></pre>Returns the number of source characters that were processed by the most recent <code>from_bytes()</code> or <code>to_bytes()</code>.	[http://en.cppreference.com/w/cpp/locale/wstring_convert/converted Cppreference]
std::wstring_convert::from_bytes	A										<pre><code>wide_string from_bytes( char byte );\\n< more overloads available ></code></pre>Performs multibyte to wide conversion, using the codecvt facet supplied at construction.	[http://en.cppreference.com/w/cpp/locale/wstring_convert/from_bytes Cppreference]
std::wstring_convert::state	A										<pre><code>state_type state() const;</code></pre>Returns the current value of the conversion state, which is stored in this <code>wstring_convert</code> object.	[http://en.cppreference.com/w/cpp/locale/wstring_convert/state Cppreference]
std::wstring_convert::to_bytes	A										<pre><code>byte_string to_bytes( Elem wchar );\\n< more overloads available ></code></pre>Performs wide to multibyte conversion, using the <code>codecvt</code> facet supplied at construction.	[http://en.cppreference.com/w/cpp/locale/wstring_convert/to_bytes Cppreference]
std::addressof	A										<pre><code>template< class T >\\nT* addressof(T& arg);</code></pre>Obtains the actual address of the object or function <code>arg</code>, even in presence of overloaded <code>operator&amp;</code>...	[http://en.cppreference.com/w/cpp/memory/addressof Cppreference]
std::align	A										<pre><code>void* align( std::size_t alignment,\\n             std::size_t size,\\n             void*& ptr,\\n             std::size_t& space );</code></pre>If it is possible to fit <code>size</code> bytes of storage aligned by <code>alignment</code> into the buffer pointed to by <code>ptr</code> with length <code>space</code>, the function modifies <code>ptr</code> to point to the first possible address of such...	[http://en.cppreference.com/w/cpp/memory/align Cppreference]
std::allocator	A										<pre><code>template< class T >\\nstruct allocator;\\n< more overloads available ></code></pre>The <code>std::allocator</code> class template is the default <code>Allocator</code> used by all standard library containers if no user-specified allocator is provided.	[http://en.cppreference.com/w/cpp/memory/allocator Cppreference]
std::allocator::address	A										<pre><code>pointer address( reference x ) const;\\n< more overloads available ></code></pre>Returns the actual address of <code>x</code> even in presence of overloaded <code>operator&amp;</code>.	[http://en.cppreference.com/w/cpp/memory/allocator/address Cppreference]
std::allocator::allocate	A										<pre><code>pointer allocate( size_type n, std::allocator<void>::const_pointer hint = 0 );</code></pre>Allocates <code>n * sizeof(T)</code> bytes of uninitialized storage by calling <code>::operator new(std::size_t)</code>, but it is unspecified when and how this function is called.	[http://en.cppreference.com/w/cpp/memory/allocator/allocate Cppreference]
std::allocator::deallocate	A										<pre><code>void deallocate(pointer p, size_type n);</code></pre>Deallocates the storage referenced by the pointer <code>p</code>, which must be a pointer obtained by an earlier call to <code>allocate()</code>.	[http://en.cppreference.com/w/cpp/memory/allocator/deallocate Cppreference]
std::allocator::max_size	A										<pre><code>size_type max_size() const</code></pre>Returns the maximum theoretically possible value of <code>n</code>, for which the call <code>allocate(n, 0)</code> could succeed.	[http://en.cppreference.com/w/cpp/memory/allocator/max_size Cppreference]
std::allocator_arg_t	A										<pre><code>struct allocator_arg_t {};</code></pre><code>std::allocator_arg_t</code> is an empty class type used to disambiguate the overloads of constructors and member functions of allocator-aware objects, including std::tuple, std::function, std::promise, and...	[http://en.cppreference.com/w/cpp/memory/allocator_arg_t Cppreference]
std::allocator_traits	A										<pre><code>template< class Alloc >\\nstruct allocator_traits;</code></pre>The <code>allocator_traits</code> class template provides the standardized way to access various properties of allocators.	[http://en.cppreference.com/w/cpp/memory/allocator_traits Cppreference]
std::allocator_traits::allocate	A										<pre><code>static pointer allocate( Alloc& a, size_type n );\\n< more overloads available ></code></pre>1) Uses the allocator <code>a</code> to allocate <code>n*sizeof(Alloc::value_type)</code> bytes of uninitialized storage, by calling <code>a.allocate(n)</code>...	[http://en.cppreference.com/w/cpp/memory/allocator_traits/allocate Cppreference]
std::allocator_traits::construct	A										<pre><code>template< class T, class... Args >\\nstatic void construct( Alloc& a, T* p, Args&&... args );</code></pre>If possible, constructs an object of type <code>T</code> in allocated uninitialized storage pointed to by <code>p</code>, by calling...	[http://en.cppreference.com/w/cpp/memory/allocator_traits/construct Cppreference]
std::allocator_traits::deallocate	A										<pre><code>static void deallocate( Alloc& a, pointer p, size_type n );</code></pre>Uses the allocator <code>a</code> to deallocate the storage referenced by <code>p</code>, by calling <code>a.deallocate(p, n)</code>...	[http://en.cppreference.com/w/cpp/memory/allocator_traits/deallocate Cppreference]
std::allocator_traits::destroy	A										<pre><code>template< class T >\\nstatic void destroy( Alloc& a, T* p );</code></pre>Calls the destructor of the object pointed to by <code>p</code>.	[http://en.cppreference.com/w/cpp/memory/allocator_traits/destroy Cppreference]
std::allocator_traits::max_size	A										<pre><code>static size_type max_size( Alloc& a )</code></pre>If possible, obtains the maximum theoretically possible allocation size from the allocator <code>a</code>, by calling...	[http://en.cppreference.com/w/cpp/memory/allocator_traits/max_size Cppreference]
std::allocator_traits::select_on_container_copy_construction	A										<pre><code>static Alloc select_on_container_copy_construction( const Alloc& a )</code></pre>If possible, obtains the copy-constructed version of the allocator <code>a</code>, by calling <code>a.select_on_container_copy_construction()</code>.	[http://en.cppreference.com/w/cpp/memory/allocator_traits/select_on_container_copy_construction Cppreference]
std::auto_ptr	A										<pre><code>template< class T > class auto_ptr;\\n< more overloads available ></code></pre><code>auto_ptr</code> is a smart pointer that manages an object obtained via new and deletes that object when <code>auto_ptr</code> itself is destroyed.	[http://en.cppreference.com/w/cpp/memory/auto_ptr Cppreference]
std::auto_ptr::get	A										<pre><code>T* get() const;</code></pre>Returns the pointer that is held by <code>*this</code>.	[http://en.cppreference.com/w/cpp/memory/auto_ptr/get Cppreference]
std::auto_ptr::operator*	A										<pre><code>T& operator*() const;</code></pre>Dereferences a pointer to the managed object.	[http://en.cppreference.com/w/cpp/memory/auto_ptr/operator* Cppreference]
std::auto_ptr::operator->	A										<pre><code>T* operator->() const;</code></pre>Dereferences a pointer to the managed object.	[http://en.cppreference.com/w/cpp/memory/auto_ptr/operator* Cppreference]
std::auto_ptr::operator=	A										<pre><code>auto_ptr& operator=( auto_ptr& r );\\n< more overloads available ></code></pre>Replaces the managed object with the one managed by <code>r</code>.	[http://en.cppreference.com/w/cpp/memory/auto_ptr/operator= Cppreference]
std::auto_ptr::release	A										<pre><code>T* release();</code></pre>Releases the held pointer.	[http://en.cppreference.com/w/cpp/memory/auto_ptr/release Cppreference]
std::auto_ptr::reset	A										<pre><code>void reset( T* p = 0 );</code></pre>Replaces the held pointer by <code>p</code>.	[http://en.cppreference.com/w/cpp/memory/auto_ptr/reset Cppreference]
std::bad_weak_ptr	A										<pre><code>class bad_weak_ptr;</code></pre><code>std::bad_weak_ptr</code> is the type of the object thrown as exceptions by the constructors of std::shared_ptr that take std::weak_ptr as the argument, when the std::weak_ptr refers to an already deleted...	[http://en.cppreference.com/w/cpp/memory/bad_weak_ptr Cppreference]
std::calloc	A										<pre><code>void* calloc( std::size_t num, std::size_t size );</code></pre>Allocates memory for an array of <code>num</code> objects of size <code>size</code> and zero-initializes it.	[http://en.cppreference.com/w/cpp/memory/c/calloc Cppreference]
std::free	A										<pre><code>void free( void* ptr );</code></pre>Deallocates the space previously allocated by <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code>.	[http://en.cppreference.com/w/cpp/memory/c/free Cppreference]
std::malloc	A										<pre><code>void* malloc( std::size_t size );</code></pre>Allocates <code>size</code> bytes of uninitialized storage.	[http://en.cppreference.com/w/cpp/memory/c/malloc Cppreference]
std::realloc	A										<pre><code>void* realloc( void* ptr, std::size_t new_size );</code></pre>Reallocates the given area of memory.	[http://en.cppreference.com/w/cpp/memory/c/realloc Cppreference]
std::default_delete	A										<pre><code>template< class T > struct default_delete\\n< more overloads available ></code></pre><code>std::default_delete</code> is the default destruction policy used by std::unique_ptr when no deleter is specified.	[http://en.cppreference.com/w/cpp/memory/default_delete Cppreference]
std::enable_shared_from_this	A										<pre><code>template< class T > class enable_shared_from_this;</code></pre><code>std::enable_shared_from_this</code> allows an object <code>t</code> that is currently managed by a std::shared_ptr named <code>pt</code> to safely generate additional std::shared_ptr instances <code>pt1, pt2, ...</code> that all share ownership of...	[http://en.cppreference.com/w/cpp/memory/enable_shared_from_this Cppreference]
std::enable_shared_from_this::operator=	A										<pre><code>enable_shared_from_this<T>& operator=(const enable_shared_from_this<T> &obj) noexcept;</code></pre>Does nothing; returns <code>*this</code>.	[http://en.cppreference.com/w/cpp/memory/enable_shared_from_this/operator= Cppreference]
std::enable_shared_from_this::shared_from_this	A										<pre><code>shared_ptr<T> shared_from_this();\\n< more overloads available ></code></pre>Returns a <code>std::shared_ptr&lt;T&gt;</code> that shares ownership of <code>*this</code> with all existing <code>std::shared_ptr&lt;T&gt;</code> that refer to <code>*this</code>.	[http://en.cppreference.com/w/cpp/memory/enable_shared_from_this/shared_from_this Cppreference]
std::declare_no_pointers	A										<pre><code>void declare_no_pointers( char *p, std::size_t n )</code></pre>Informs the garbage collector or leak detector that the specified memory region  contains no traceable pointers.	[http://en.cppreference.com/w/cpp/memory/gc/declare_no_pointers Cppreference]
std::declare_reachable	A										<pre><code>void declare_reachable( void* p )</code></pre>Declares the object referenced by the pointer <code>p</code> reachable.	[http://en.cppreference.com/w/cpp/memory/gc/declare_reachable Cppreference]
std::get_pointer_safety	A										<pre><code>std::pointer_safety get_pointer_safety()</code></pre>Obtains the implementation-defined pointer safety model, which is a value of type std::pointer_safety.	[http://en.cppreference.com/w/cpp/memory/gc/get_pointer_safety Cppreference]
std::pointer_safety	A										<pre><code>enum class pointer_safety {\\n     relaxed,\\n     preferred,\\n     strict\\n};</code></pre>The scoped enumeration type <code>pointer_safety</code> lists the pointer safety modes supported by C++...	[http://en.cppreference.com/w/cpp/memory/gc/pointer_safety Cppreference]
std::undeclare_no_pointers	A										<pre><code>void undeclare_no_pointers( char *p, std::size_t n )</code></pre>Unregisters a range earlier registered with <code>std::declare_no_pointers()</code>.	[http://en.cppreference.com/w/cpp/memory/gc/undeclare_no_pointers Cppreference]
std::undeclare_reachable	A										<pre><code>template< class T >\\nT* undeclare_reachable( T* p )</code></pre>Removes the reachable status of the object, referenced by the pointer <code>p</code>, if it was previously set by std::declare_reachable.	[http://en.cppreference.com/w/cpp/memory/gc/undeclare_reachable Cppreference]
std::get_temporary_buffer	A										<pre><code>template< class T >\\nstd::pair< T*, std::ptrdiff_t > get_temporary_buffer( std::ptrdiff_t count )</code></pre>Allocates storage sufficient to store up to <code>count</code> adjacent objects of type <code>T</code>.	[http://en.cppreference.com/w/cpp/memory/get_temporary_buffer Cppreference]
std::bad_alloc	A										<pre><code>class bad_alloc : public std::exception;</code></pre><code>std::bad_alloc</code> is the type of the object thrown as exceptions by the allocation functions to report failure to allocate storage.	[http://en.cppreference.com/w/cpp/memory/new/bad_alloc Cppreference]
std::bad_array_new_length	A										<pre><code>class bad_array_new_length;</code></pre><code>std::bad_array_new_length</code> is the type of the object thrown as exceptions by the new-expressions to report invalid array lengths if...	[http://en.cppreference.com/w/cpp/memory/new/bad_array_new_length Cppreference]
std::get_new_handler	A										<pre><code>std::new_handler get_new_handler();</code></pre>Returns the currently installed new-handler, which may be a null pointer.	[http://en.cppreference.com/w/cpp/memory/new/get_new_handler Cppreference]
std::nothrow_t	A										<pre><code>struct nothrow_t {};</code></pre><code>std::nothrow_t</code> is an empty class type used to disambiguate the overloads of throwing and non-throwing allocation functions.	[http://en.cppreference.com/w/cpp/memory/new/nothrow_t Cppreference]
operator delete	A										<pre><code>void operator delete  ( void* ptr );\\n< more overloads available ></code></pre>Deallocates storage.	[http://en.cppreference.com/w/cpp/memory/new/operator_delete Cppreference]
operator delete[]	A										<pre><code>void operator delete[]( void* ptr );\\n< more overloads available ></code></pre>Deallocates storage.	[http://en.cppreference.com/w/cpp/memory/new/operator_delete Cppreference]
operator new	A										<pre><code>void* operator new  ( std::size_t count );\\n< more overloads available ></code></pre>Allocates requested number of bytes.	[http://en.cppreference.com/w/cpp/memory/new/operator_new Cppreference]
operator new[]	A										<pre><code>void* operator new[]( std::size_t count );\\n< more overloads available ></code></pre>Allocates requested number of bytes.	[http://en.cppreference.com/w/cpp/memory/new/operator_new Cppreference]
std::set_new_handler	A										<pre><code>std::new_handler set_new_handler(std::new_handler new_p)</code></pre>Makes <code>new_p</code> the new global new-handler function and returns the previously installed new-handler.	[http://en.cppreference.com/w/cpp/memory/new/set_new_handler Cppreference]
std::owner_less	A										<pre><code>template< class T >\\nstruct owner_less; /* undefined */\\n< more overloads available ></code></pre>This function object provides owner-based (as opposed to value-based) mixed-type ordering of both std::weak_ptr and std::shared_ptr.	[http://en.cppreference.com/w/cpp/memory/owner_less Cppreference]
std::pointer_traits	A										<pre><code>template< class Ptr > struct pointer_traits;\\n< more overloads available ></code></pre>The <code>pointer_traits</code> class template provides the standardized way to access certain properties of pointer-like types.	[http://en.cppreference.com/w/cpp/memory/pointer_traits Cppreference]
std::raw_storage_iterator	A										<pre><code>template< class OutputIt, class T >\\nclass raw_storage_iterator\\n    : public std::iterator<std::output_iterator_tag, void, void, void, void>;</code></pre>The output iterator <code>std::raw_storage_iterator</code> makes it possible for standard algorithms to store results in uninitialized memory.	[http://en.cppreference.com/w/cpp/memory/raw_storage_iterator Cppreference]
std::raw_storage_iterator::operator*	A										<pre><code>raw_storage_iterator& operator*();</code></pre>Dereferences the iterator.	[http://en.cppreference.com/w/cpp/memory/raw_storage_iterator/operator* Cppreference]
std::raw_storage_iterator::operator=	A										<pre><code>raw_storage_iterator& operator=( const T& el );</code></pre>Constructs a value at the location the iterator points to from <code>el</code>.	[http://en.cppreference.com/w/cpp/memory/raw_storage_iterator/operator= Cppreference]
std::return_temporary_buffer	A										<pre><code>template< class T >\\nvoid return_temporary_buffer( T* p )</code></pre>Deallocates storage previously allocated with std::get_temporary_buffer.	[http://en.cppreference.com/w/cpp/memory/return_temporary_buffer Cppreference]
std::scoped_allocator_adaptor	A										<pre><code>template< class OuterAlloc, class... InnerAlloc >\\nclass scoped_allocator_adaptor : public OuterAlloc;</code></pre>The <code>std::scoped_allocator_adaptor</code> class template is an allocator which can be used with multilevel containers .	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor Cppreference]
std::scoped_allocator_adaptor::allocate	A										<pre><code>pointer allocate( size_type n );\\n< more overloads available ></code></pre>1) Uses the outer allocator to allocate uninitialized storage, by calling <code>std::allocator_traits&lt;OuterAlloc&gt;::allocate(outer_allocator(), n)</code>...	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/allocate Cppreference]
std::scoped_allocator_adaptor::construct	A										<pre><code>template < class T, class... Args >\\nvoid construct( T* p, Args&&... args )\\n< more overloads available ></code></pre>Constructs an object in allocated, but not initialized storage pointed to by <code>p</code> using OuterAllocator and the provided constructor arguments.	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/construct Cppreference]
std::scoped_allocator_adaptor::deallocate	A										<pre><code>void deallocate( pointer p, size_type n )</code></pre>Uses the outer allocator to deallocate the storage referenced by <code>p</code>, by calling <code>std::allocator_traits&lt;OuterAlloc&gt;::deallocate(outer_allocator(), p, n)</code>...	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/deallocate Cppreference]
std::scoped_allocator_adaptor::destroy	A										<pre><code>template< class T >\\nvoid destroy( T* p );</code></pre>Uses the outer allocator to call the destructor of the object pointed to by <code>p</code>, by calling...	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/destroy Cppreference]
std::scoped_allocator_adaptor::inner_allocator	A										<pre><code>inner_allocator_type& inner_allocator()\\n< more overloads available ></code></pre>Obtains a reference to the inner allocator used to declare this <code>scoped_allocator_adaptor</code>.	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/inner_allocator Cppreference]
std::scoped_allocator_adaptor::max_size	A										<pre><code>size_type max_size() const</code></pre>Reports the maximum allocation size supported by the outer allocator, by calling <code>std::allocator_traits&lt;OuterAlloc&gt;::max_size(outer_allocator())</code>...	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/max_size Cppreference]
std::scoped_allocator_adaptor::outer_allocator	A										<pre><code>outer_allocator_type& outer_allocator()\\n< more overloads available ></code></pre>Obtains a reference to the outer allocator used to declare this class.	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/outer_allocator Cppreference]
std::scoped_allocator_adaptor::select_on_container_copy_construction	A										<pre><code>scoped_allocator_adaptor select_on_container_copy_construction() const</code></pre>Creates a new instance of <code>std::scoped_allocator_adaptor</code>, where the outer allocator base class and each inner allocator subobject are obtained by calling ...	[http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/select_on_container_copy_construction Cppreference]
std::shared_ptr	A										<pre><code>template< class T > class shared_ptr;</code></pre><code>std::shared_ptr</code> is a smart pointer that retains shared ownership of an object through a pointer.	[http://en.cppreference.com/w/cpp/memory/shared_ptr Cppreference]
std::allocate_shared	A										<pre><code>template< class T, class Alloc, class... Args >\\nshared_ptr<T> allocate_shared( const Alloc& alloc, Args... args );</code></pre>Constructs an object of type <code>T</code> and wraps it in a std::shared_ptr using <code>args</code> as the parameter list for the constructor of <code>T</code>.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/allocate_shared Cppreference]
std::shared_ptr::get	A										<pre><code>T* get() const;</code></pre>Returns a pointer to the managed object.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/get Cppreference]
std::make_shared	A										<pre><code>template< class T, class... Args >\\nshared_ptr<T> make_shared( Args&&... args );</code></pre>Constructs an object of type <code>T</code> and wraps it in a std::shared_ptr using <code>args</code> as the parameter list for the constructor of <code>T</code>.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/make_shared Cppreference]
std::shared_ptr::operator*	A										<pre><code>T& operator*() const;</code></pre>Dereferences pointer to the managed object.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/operator* Cppreference]
std::shared_ptr::operator->	A										<pre><code>T* operator->() const;</code></pre>Dereferences pointer to the managed object.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/operator* Cppreference]
std::shared_ptr::operator=	A										<pre><code>shared_ptr& operator=( const shared_ptr& r );\\n< more overloads available ></code></pre>Replaces the managed object with the one managed by <code>r</code>.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/operator= Cppreference]
std::shared_ptr::owner_before	A										<pre><code>template< class T > \\nbool owner_before( const shared_ptr<T>& other) const;\\n< more overloads available ></code></pre>Checks whether this <code>shared_ptr</code> precedes <code>other</code> in implementation defined owner-based (as opposed to value-based) order.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/owner_before Cppreference]
std::const_pointer_cast	A										<pre><code>template< class T, class U > \\nshared_ptr<T> const_pointer_cast( const shared_ptr<U>& r );</code></pre>Will return a new instance of std::shared_ptr with a casted managed object type from the <code>r</code>'s managed object type.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/pointer_cast Cppreference]
std::dynamic_pointer_cast	A										<pre><code>template< class T, class U > \\nshared_ptr<T> dynamic_pointer_cast( const shared_ptr<U>& r );</code></pre>Will return a new instance of std::shared_ptr with a casted managed object type from the <code>r</code>'s managed object type.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/pointer_cast Cppreference]
std::static_pointer_cast	A										<pre><code>template< class T, class U > \\nshared_ptr<T> static_pointer_cast( const shared_ptr<U>& r );</code></pre>Will return a new instance of std::shared_ptr with a casted managed object type from the <code>r</code>'s managed object type.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/pointer_cast Cppreference]
std::shared_ptr::reset	A										<pre><code>void reset();\\n< more overloads available ></code></pre>Replaces the managed object with an object pointed to by <code>ptr</code>.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/reset Cppreference]
std::shared_ptr::swap	A										<pre><code>void swap( shared_ptr& r );</code></pre>Exchanges the contents of <code>*this</code> and <code>r</code>...	[http://en.cppreference.com/w/cpp/memory/shared_ptr/swap Cppreference]
std::shared_ptr::unique	A										<pre><code>bool unique() const;</code></pre>Checks if <code>*this</code> is the only <code>shared_ptr</code> instance managing the current object, i.e. whether <code>use_count() == 1</code>.	[http://en.cppreference.com/w/cpp/memory/shared_ptr/unique Cppreference]
std::uninitialized_copy	A										<pre><code>template< class InputIt, class ForwardIt >\\nForwardIt uninitialized_copy( InputIt first, InputIt last, ForwardIt d_first );</code></pre>Copies elements from the range <code>[first, last)</code> to an uninitialized memory area beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/memory/uninitialized_copy Cppreference]
std::uninitialized_copy_n	A										<pre><code>template< class InputIt, class Size, class ForwardIt >\\nForwardIt uninitialized_copy_n( InputIt first, Size count, ForwardIt d_first);</code></pre>Copies <code>count</code> elements from a range beginning at <code>first</code> to an uninitialized memory area beginning at <code>d_first</code>.	[http://en.cppreference.com/w/cpp/memory/uninitialized_copy_n Cppreference]
std::uninitialized_fill	A										<pre><code>template< class ForwardIt, class T >\\nvoid uninitialized_fill( ForwardIt first, ForwardIt last, const T& value )</code></pre>Copies the given <code>value</code> to an uninitialized memory area, defined by the range <code>[first, last)</code>.	[http://en.cppreference.com/w/cpp/memory/uninitialized_fill Cppreference]
std::uninitialized_fill_n	A										<pre><code>template< class ForwardIt, class Size, class T >\\nvoid uninitialized_fill_n( ForwardIt first, Size count, const T& value )</code></pre>Copies the given value <code>value</code> to the first <code>count</code> elements in an uninitialized memory area beginning at <code>first</code>.	[http://en.cppreference.com/w/cpp/memory/uninitialized_fill_n Cppreference]
std::unique_ptr	A										<pre><code>template<\\n    class T,\\n    class Deleter = std::default_delete<T>\\n> class unique_ptr;\\n< more overloads available ></code></pre><code>std::unique_ptr</code> is a smart pointer that retains sole ownership of an object through a pointer and destroys that object when the <code>unique_ptr</code> goes out of scope.	[http://en.cppreference.com/w/cpp/memory/unique_ptr Cppreference]
std::unique_ptr::get	A										<pre><code>pointer get() const;</code></pre>Returns a pointer to the managed object or <code>nullptr</code> if no object is owned.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/get Cppreference]
std::unique_ptr::get_deleter	A										<pre><code>      Deleter& get_deleter();\\n< more overloads available ></code></pre>Returns the deleter object which would be used for destruction of the managed object.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/get_deleter Cppreference]
std::unique_ptr::operator*	A										<pre><code>typename std::add_lvalue_reference<T>::type operator*() const;</code></pre><code>operator*</code> and <code>operator-&gt;</code> provide access to the object owned by <code>*this</code>.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/operator* Cppreference]
std::unique_ptr::operator->	A										<pre><code>pointer operator->() const;</code></pre><code>operator*</code> and <code>operator-&gt;</code> provide access to the object owned by <code>*this</code>.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/operator* Cppreference]
std::unique_ptr::operator=	A										<pre><code>unique_ptr& operator=( unique_ptr&& r );\\n< more overloads available ></code></pre>1) Transfers ownership of the object pointed to by <code>r</code> to <code>*this</code> as if by calling <code>reset(r.release())</code> followed by an assignment from <code>std::forward&lt;E&gt;(r.get_deleter())</code>.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/operator= Cppreference]
std::unique_ptr::release	A										<pre><code>pointer release();</code></pre>Releases the ownership of the managed object if any.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/release Cppreference]
std::unique_ptr::reset	A										<pre><code>void reset( pointer ptr = pointer() );</code></pre>Replaces the managed object.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/reset Cppreference]
std::unique_ptr::swap	A										<pre><code>void swap(unique_ptr& other);</code></pre>Swaps the managed objects and associated deleters with another <code>unique_ptr</code> object <code>other</code>.	[http://en.cppreference.com/w/cpp/memory/unique_ptr/swap Cppreference]
std::uses_allocator	A										<pre><code>template< class T, class Alloc >\\nstruct uses_allocator</code></pre>If <code>T</code> has a member typedef <code>allocator_type</code> which is convertible from <code>Alloc</code>, provides the member constant <code>value</code> equal to <code>true</code>.	[http://en.cppreference.com/w/cpp/memory/uses_allocator Cppreference]
std::weak_ptr	A										<pre><code>template< class T > class weak_ptr;</code></pre><code>std::weak_ptr</code> is a smart pointer that holds a non-owning ("weak") reference to an object that is managed by std::shared_ptr.	[http://en.cppreference.com/w/cpp/memory/weak_ptr Cppreference]
std::weak_ptr::expired	A										<pre><code>bool expired() const;</code></pre>Checks whether the managed object has already been deleted.	[http://en.cppreference.com/w/cpp/memory/weak_ptr/expired Cppreference]
std::weak_ptr::lock	A										<pre><code>std::shared_ptr<T> lock() const</code></pre>Creates a new <code>shared_ptr</code> that shares ownership of the managed object.	[http://en.cppreference.com/w/cpp/memory/weak_ptr/lock Cppreference]
std::weak_ptr::operator=	A										<pre><code>weak_ptr& operator=( const weak_ptr& r );\\n< more overloads available ></code></pre>Replaces the managed object with the one managed by <code>r</code>.	[http://en.cppreference.com/w/cpp/memory/weak_ptr/operator= Cppreference]
std::weak_ptr::owner_before	A										<pre><code>template< class T > \\nbool owner_before( const weak_ptr<T>& other) const;\\n< more overloads available ></code></pre>Checks whether this <code>weak_ptr</code> precedes <code>other</code> in implementation defined owner-based (as opposed to value-based) order.	[http://en.cppreference.com/w/cpp/memory/weak_ptr/owner_before Cppreference]
std::weak_ptr::reset	A										<pre><code>void reset();</code></pre>Releases the reference to the managed object.	[http://en.cppreference.com/w/cpp/memory/weak_ptr/reset Cppreference]
std::weak_ptr::swap	A										<pre><code>void swap( weak_ptr& r );</code></pre>Exchanges the contents of <code>*this</code> and <code>r</code>...	[http://en.cppreference.com/w/cpp/memory/weak_ptr/swap Cppreference]
std::weak_ptr::use_count	A										<pre><code>long use_count() const;</code></pre>Returns the number of <code>shared_ptr</code> instances that share ownership of the managed object, or <code>​0​</code> if the managed object has already been deleted, i.e. <code>*this</code> is empty.	[http://en.cppreference.com/w/cpp/memory/weak_ptr/use_count Cppreference]
std::complex	A										<pre><code>template< class T >\\nclass complex; //not defined\\n< more overloads available ></code></pre>The specializations <code>std::complex&lt;float&gt;</code>, <code>std::complex&lt;double&gt;</code>, and <code>std::complex&lt;long double&gt;</code> are literal types for representing and manipulating complex numbers.	[http://en.cppreference.com/w/cpp/numeric/complex Cppreference]
std::complex::imag	A										<pre><code>constexpr T imag() const;\\n< more overloads available ></code></pre>Accesses the imaginary part of the complex number.	[http://en.cppreference.com/w/cpp/numeric/complex/imag Cppreference]
std::complex::operator=	A										<pre><code>complex<T>& operator=( const T& x );\\n< more overloads available ></code></pre>Assigns new values to the contents.	[http://en.cppreference.com/w/cpp/numeric/complex/operator= Cppreference]
std::complex::operator*=	A										<pre><code>complex<T>& operator*=( const T& other );\\n< more overloads available ></code></pre>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.	[http://en.cppreference.com/w/cpp/numeric/complex/operator_arith Cppreference]
std::complex::operator+=	A										<pre><code>complex<T>& operator+=( const T& other );\\n< more overloads available ></code></pre>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.	[http://en.cppreference.com/w/cpp/numeric/complex/operator_arith Cppreference]
std::complex::operator-=	A										<pre><code>complex<T>& operator-=( const T& other );\\n< more overloads available ></code></pre>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.	[http://en.cppreference.com/w/cpp/numeric/complex/operator_arith Cppreference]
std::complex::operator/=	A										<pre><code>complex<T>& operator/=( const T& other );\\n< more overloads available ></code></pre>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.	[http://en.cppreference.com/w/cpp/numeric/complex/operator_arith Cppreference]
std::complex::real	A										<pre><code>constexpr T real() const;\\n< more overloads available ></code></pre>Accesses the real part of the complex number.	[http://en.cppreference.com/w/cpp/numeric/complex/real Cppreference]
std::fegetenv	A										<pre><code>int fegetenv( std::fenv_t* envp )</code></pre>1) Attempts to store the status of the floating-point environment in the object pointed to by <code>envp</code>.	[http://en.cppreference.com/w/cpp/numeric/fenv/feenv Cppreference]
std::fesetenv	A										<pre><code>int fesetenv( const std::fenv_t* envp );</code></pre>1) Attempts to store the status of the floating-point environment in the object pointed to by <code>envp</code>.	[http://en.cppreference.com/w/cpp/numeric/fenv/feenv Cppreference]
std::fegetexceptflag	A										<pre><code>int fegetexceptflag( std::fexcept_t* flagp, int excepts );</code></pre>1) Attempts to obtain the full contents of the floating-point exception flags that are listed in the bitmask argument <code>excepts</code>, which is a bitwise OR of the floating point exception macros.	[http://en.cppreference.com/w/cpp/numeric/fenv/feexceptflag Cppreference]
std::fesetexceptflag	A										<pre><code>int fesetexceptflag( const std::fexcept_t* flagp, int excepts );</code></pre>1) Attempts to obtain the full contents of the floating-point exception flags that are listed in the bitmask argument <code>excepts</code>, which is a bitwise OR of the floating point exception macros.	[http://en.cppreference.com/w/cpp/numeric/fenv/feexceptflag Cppreference]
std::feholdexcept	A										<pre><code>int feholdexcept( std::fenv_t* envp )</code></pre>First, saves the current floating-point environment to the object pointed to by <code>envp</code> (similar to std::fegetenv), then clears all floating-point status flags, and then installs the non-stop mode:...	[http://en.cppreference.com/w/cpp/numeric/fenv/feholdexcept Cppreference]
std::feraiseexcept	A										<pre><code>int feraiseexcept( int excepts );</code></pre>Attempts to raise all floating point exceptions listed in <code>excepts</code> .	[http://en.cppreference.com/w/cpp/numeric/fenv/feraiseexcept Cppreference]
std::fegetround	A										<pre><code>int fegetround()</code></pre>1) Attempts to establish the floating-point rounding direction equal to the argument <code>round</code>, which is expected to be one of the floating point rounding macros.	[http://en.cppreference.com/w/cpp/numeric/fenv/feround Cppreference]
std::fesetround	A										<pre><code>int fesetround( int round )</code></pre>1) Attempts to establish the floating-point rounding direction equal to the argument <code>round</code>, which is expected to be one of the floating point rounding macros.	[http://en.cppreference.com/w/cpp/numeric/fenv/feround Cppreference]
std::fetestexcept	A										<pre><code>int fetestexcept( int excepts );</code></pre>Determines which of the specified subset of the floating point exceptions are currently set.	[http://en.cppreference.com/w/cpp/numeric/fenv/fetestexcept Cppreference]
std::feupdateenv	A										<pre><code>int feupdateenv( const std::fenv_t* envp )</code></pre>First, remembers the currently raised floating-point exceptions, then restores the floating-point environment from the object pointed to by <code>envp</code> (similar to std::fesetenv), then raises the...	[http://en.cppreference.com/w/cpp/numeric/fenv/feupdateenv Cppreference]
std::abs(int)	A										<pre><code>int       abs( int n );\\n< more overloads available ></code></pre>Computes the absolute value of an integer number.	[http://en.cppreference.com/w/cpp/numeric/math/abs Cppreference]
std::labs	A										<pre><code>long       labs( long n );\\n< more overloads available ></code></pre>Computes the absolute value of an integer number.	[http://en.cppreference.com/w/cpp/numeric/math/abs Cppreference]
std::llabs	A										<pre><code>long long llabs( long long n );</code></pre>Computes the absolute value of an integer number.	[http://en.cppreference.com/w/cpp/numeric/math/abs Cppreference]
std::acos	A										<pre><code>float       acos( float arg );\\n< more overloads available ></code></pre>Computes arc cosine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/acos Cppreference]
std::acosh	A										<pre><code>float       acosh( float arg );\\n< more overloads available ></code></pre>Computes hyperbolic arc cosine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/acosh Cppreference]
std::asin	A										<pre><code>float       asin( float arg );\\n< more overloads available ></code></pre>Computes arc sine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/asin Cppreference]
std::asinh	A										<pre><code>float       asinh( float arg );\\n< more overloads available ></code></pre>Computes hyperbolic arc sine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/asinh Cppreference]
std::atan	A										<pre><code>float       atan( float arg );\\n< more overloads available ></code></pre>Computes arc tangent of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/atan Cppreference]
std::atan2	A										<pre><code>float       atan2( float y, float x );\\n< more overloads available ></code></pre>Computes the inverse tangent of <code>y/x</code> using the signs of arguments to correctly determine quadrant.	[http://en.cppreference.com/w/cpp/numeric/math/atan2 Cppreference]
std::atanh	A										<pre><code>float       atanh( float arg );\\n< more overloads available ></code></pre>Computes hyperbolic arc tangent of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/atanh Cppreference]
std::cbrt	A										<pre><code>float       cbrt( float arg );\\n< more overloads available ></code></pre>Computes cubic root of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/cbrt Cppreference]
std::ceil	A										<pre><code>float       ceil( float arg );\\n< more overloads available ></code></pre>Computes nearest integer not less than <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/ceil Cppreference]
std::copysign	A										<pre><code>float       copysign( float x, float y );\\n< more overloads available ></code></pre>Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>.	[http://en.cppreference.com/w/cpp/numeric/math/copysign Cppreference]
std::cos	A										<pre><code>float       cos( float arg );\\n< more overloads available ></code></pre>Computes cosine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/cos Cppreference]
std::cosh	A										<pre><code>float       cosh( float arg );\\n< more overloads available ></code></pre>Computes hyperbolic cosine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/cosh Cppreference]
std::div	A										<pre><code>std::div_t     div( int x, int y );\\n< more overloads available ></code></pre>Computes quotient and remainder simultaneously.	[http://en.cppreference.com/w/cpp/numeric/math/div Cppreference]
std::ldiv	A										<pre><code>std::ldiv_t    div( long x, long y );\\n< more overloads available ></code></pre>Computes quotient and remainder simultaneously.	[http://en.cppreference.com/w/cpp/numeric/math/div Cppreference]
std::erf	A										<pre><code>float       erf( float arg );\\n< more overloads available ></code></pre>Computes the error function of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/erf Cppreference]
std::erfc	A										<pre><code>float       erfc( float arg );\\n< more overloads available ></code></pre>Computes the complementary error function of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/erfc Cppreference]
std::exp	A										<pre><code>float       exp( float arg );\\n< more overloads available ></code></pre>Computes the <i>e</i> (Euler's number, <code>2.7182818</code>) raised to the given power <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/exp Cppreference]
std::exp2	A										<pre><code>double      exp2( double n );\\n< more overloads available ></code></pre>Computes 2 raised to the given power <code>n</code>...	[http://en.cppreference.com/w/cpp/numeric/math/exp2 Cppreference]
std::expm1	A										<pre><code>float       expm1( float arg );\\n< more overloads available ></code></pre>Computes the <i>e</i> (Euler's number, <code>2.7182818</code>) raised to the given power <code>arg</code>, minus <code>1</code>.	[http://en.cppreference.com/w/cpp/numeric/math/expm1 Cppreference]
std::abs(float)	A										<pre><code>float       abs( float arg );\\n< more overloads available ></code></pre>Computes the absolute value of a floating point value <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/fabs Cppreference]
std::fabs	A										<pre><code>float       fabs( float arg );\\n< more overloads available ></code></pre>Computes the absolute value of a floating point value <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/fabs Cppreference]
std::fdim	A										<pre><code>float       fdim( float x, float y );\\n< more overloads available ></code></pre>Returns the positive difference between <code>x</code> and <code>y</code>.	[http://en.cppreference.com/w/cpp/numeric/math/fdim Cppreference]
std::floor	A										<pre><code>float       floor( float arg );\\n< more overloads available ></code></pre>Computes nearest integer not greater than <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/floor Cppreference]
std::fma	A										<pre><code>float       fma( float x, float y, float z );\\n< more overloads available ></code></pre>The fma functions compute <code>(x*y) + z</code>, rounded as one ternary operation, according to the rounding mode characterized by the value of FLT_ROUNDS.	[http://en.cppreference.com/w/cpp/numeric/math/fma Cppreference]
std::fmax	A										<pre><code>float       fmax( float x, float y );\\n< more overloads available ></code></pre>Returns the larger of two floating point arguments.	[http://en.cppreference.com/w/cpp/numeric/math/fmax Cppreference]
std::fmin	A										<pre><code>float       fmin( float x, float y );\\n< more overloads available ></code></pre>Returns the smaller of two floating point arguments.	[http://en.cppreference.com/w/cpp/numeric/math/fmin Cppreference]
std::fmod	A										<pre><code>float       fmod( float x, float y );\\n< more overloads available ></code></pre>Computes the remainder of the division operation <code>x/y</code>, that is, the value <code>x-ny</code> for some integer <code>n</code> such that the magnitude of the result is less than the magnitude of <code>y</code>.	[http://en.cppreference.com/w/cpp/numeric/math/fmod Cppreference]
std::fpclassify	A										<pre><code>int fpclassify( float arg );\\n< more overloads available ></code></pre>Categorizes floating point value <code>arg</code> into the following categories: zero, subnormal, normal, infinite, NAN, or implementation-defined category.	[http://en.cppreference.com/w/cpp/numeric/math/fpclassify Cppreference]
std::frexp	A										<pre><code>float       frexp( float arg, int* exp );\\n< more overloads available ></code></pre>Decomposes given floating point value to significand and exponent.	[http://en.cppreference.com/w/cpp/numeric/math/frexp Cppreference]
std::hypot	A										<pre><code>float       hypot( float x, float y );\\n< more overloads available ></code></pre>Computes the square root of the sum of the squares of <code>x</code> and <code>y</code>, without undue overflow or underflow at intermediate stages of the computation.	[http://en.cppreference.com/w/cpp/numeric/math/hypot Cppreference]
std::ilogb	A										<pre><code>int         ilogb( float arg );\\n< more overloads available ></code></pre>Extracts the value of the exponent from the floating-point argument <code>arg</code>, and returns it as a signed integer value.	[http://en.cppreference.com/w/cpp/numeric/math/ilogb Cppreference]
std::isfinite	A										<pre><code>bool isfinite( float arg );\\n< more overloads available ></code></pre>Determines if the given floating point number <code>arg</code> has finite value i.e. it is normal, subnormal or zero, but not infinite or <code>NAN</code>.	[http://en.cppreference.com/w/cpp/numeric/math/isfinite Cppreference]
std::isinf	A										<pre><code>bool isinf( float arg );\\n< more overloads available ></code></pre>Determines if the given floating point number <code>arg</code> is positive or negative infinity.	[http://en.cppreference.com/w/cpp/numeric/math/isinf Cppreference]
std::isnan	A										<pre><code>bool isnan( float arg );\\n< more overloads available ></code></pre>Determines if the given floating point number <code>arg</code> is not-a-number (<code>NaN</code>).	[http://en.cppreference.com/w/cpp/numeric/math/isnan Cppreference]
std::isnormal	A										<pre><code>bool isnormal( float arg );\\n< more overloads available ></code></pre>Determines if the given floating point number <code>arg</code> is normal, i.e. is neither zero, subnormal, infinite, nor <code>NaN</code>.	[http://en.cppreference.com/w/cpp/numeric/math/isnormal Cppreference]
std::ldexp	A										<pre><code>float       ldexp( float arg, int exp );\\n< more overloads available ></code></pre>Multiplies an floating point value <code>arg</code> by 2 raised to power <code>exp</code>.	[http://en.cppreference.com/w/cpp/numeric/math/ldexp Cppreference]
std::lgamma	A										<pre><code>float       lgamma( float arg );\\n< more overloads available ></code></pre>Computes the natural logarithm of the absolute value of the gamma function of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/lgamma Cppreference]
std::log	A										<pre><code>float       log( float arg );\\n< more overloads available ></code></pre>Computes the natural (base <i>e</i>) logarithm of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/log Cppreference]
std::log10	A										<pre><code>float       log10( float arg );\\n< more overloads available ></code></pre>Computes the common (base <code>10</code>) logarithm of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/log10 Cppreference]
std::log1p	A										<pre><code>float       log1p( float arg );\\n< more overloads available ></code></pre>Computes the natural (base <code>e</code>) logarithm of <code>1+arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/log1p Cppreference]
std::logb	A										<pre><code>float       logb( float arg );\\n< more overloads available ></code></pre>Extracts the value of the exponent from the floating-point argument <code>arg</code>, and returns it as a floating-point value.	[http://en.cppreference.com/w/cpp/numeric/math/logb Cppreference]
std::modf	A										<pre><code>float       modf( float x, float* iptr );\\n< more overloads available ></code></pre>Decomposes given floating point value <code>x</code> into integral and fractional parts, each having the same type and sign as <code>x</code>.	[http://en.cppreference.com/w/cpp/numeric/math/modf Cppreference]
std::nan	A										<pre><code>float nanf( const char* arg );\\n< more overloads available ></code></pre>Converts the implementation-defined character string <code>arg</code> into the corresponding quiet NaN value.	[http://en.cppreference.com/w/cpp/numeric/math/nan Cppreference]
std::nanf	A										<pre><code>float nanf( const char* arg );</code></pre>Converts the implementation-defined character string <code>arg</code> into the corresponding quiet NaN value.	[http://en.cppreference.com/w/cpp/numeric/math/nan Cppreference]
std::nanl	A										<pre><code>long double nanl( const char* arg );</code></pre>Converts the implementation-defined character string <code>arg</code> into the corresponding quiet NaN value.	[http://en.cppreference.com/w/cpp/numeric/math/nan Cppreference]
std::nearbyint	A										<pre><code>float       nearbyint( float arg );\\n< more overloads available ></code></pre>Rounds the floating-point argument <code>arg</code> to an integer value in floating-point format, using the current rounding mode.	[http://en.cppreference.com/w/cpp/numeric/math/nearbyint Cppreference]
std::nextafter	A										<pre><code>float       nextafter( float from, float to );\\n< more overloads available ></code></pre>Returns the next representable value of <code>from</code> in the direction of <code>to</code>.	[http://en.cppreference.com/w/cpp/numeric/math/nextafter Cppreference]
std::nexttoward	A										<pre><code>float       nexttoward( float from, long double to );\\n< more overloads available ></code></pre>Returns the next representable value of <code>from</code> in the direction of <code>to</code>.	[http://en.cppreference.com/w/cpp/numeric/math/nextafter Cppreference]
std::pow	A										<pre><code>float       pow( float base, float exp );\\n< more overloads available ></code></pre>Computes the value of <code>base</code> raised to the power <code>exp</code> or <code>iexp</code>.	[http://en.cppreference.com/w/cpp/numeric/math/pow Cppreference]
std::remainder	A										<pre><code>float       remainder( float x, float y );\\n< more overloads available ></code></pre>Computes the remainder of the floating point division operation <code>x/y</code>.	[http://en.cppreference.com/w/cpp/numeric/math/remainder Cppreference]
std::remquo	A										<pre><code>float       remquo( float x, float y, int *quo );\\n< more overloads available ></code></pre>Computes the remainder of the floating point division operation <code>x/y</code> as the <code>remainder</code> function does.	[http://en.cppreference.com/w/cpp/numeric/math/remquo Cppreference]
std::llrint	A										<pre><code>long long llrint( float arg );\\n< more overloads available ></code></pre>Rounds the floating-point argument <code>arg</code> to an integer value in floating-point format, using the current rounding mode.	[http://en.cppreference.com/w/cpp/numeric/math/rint Cppreference]
std::lrint	A										<pre><code>long lrint( float arg );\\n< more overloads available ></code></pre>Rounds the floating-point argument <code>arg</code> to an integer value in floating-point format, using the current rounding mode.	[http://en.cppreference.com/w/cpp/numeric/math/rint Cppreference]
std::rint	A										<pre><code>float rint( float arg );\\n< more overloads available ></code></pre>Rounds the floating-point argument <code>arg</code> to an integer value in floating-point format, using the current rounding mode.	[http://en.cppreference.com/w/cpp/numeric/math/rint Cppreference]
std::llround	A										<pre><code>long long llround( float arg );\\n< more overloads available ></code></pre>Computes nearest integer to <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/round Cppreference]
std::lround	A										<pre><code>long lround( float arg );\\n< more overloads available ></code></pre>Computes nearest integer to <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/round Cppreference]
std::round	A										<pre><code>float round( float arg );\\n< more overloads available ></code></pre>Computes nearest integer to <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/round Cppreference]
std::scalbln	A										<pre><code>float       scalbln( float x, long exp );\\n< more overloads available ></code></pre>Multiplies an floating point value <code>x</code> by FLT_RADIX raised to power <code>exp</code>.	[http://en.cppreference.com/w/cpp/numeric/math/scalbn Cppreference]
std::scalbn	A										<pre><code>float       scalbn( float x, int exp );\\n< more overloads available ></code></pre>Multiplies an floating point value <code>x</code> by FLT_RADIX raised to power <code>exp</code>.	[http://en.cppreference.com/w/cpp/numeric/math/scalbn Cppreference]
std::signbit	A										<pre><code>bool signbit( float arg );\\n< more overloads available ></code></pre> Determines if the given floating point number <code>arg</code> is negative.	[http://en.cppreference.com/w/cpp/numeric/math/signbit Cppreference]
std::sin	A										<pre><code>float       sin( float arg );\\n< more overloads available ></code></pre>Computes sine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/sin Cppreference]
std::sinh	A										<pre><code>float       sinh( float arg );\\n< more overloads available ></code></pre>Computes hyperbolic sine of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/sinh Cppreference]
std::sqrt	A										<pre><code>float       sqrt( float arg );\\n< more overloads available ></code></pre>Computes square root of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/sqrt Cppreference]
std::tan	A										<pre><code>float       tan( float arg );\\n< more overloads available ></code></pre>Computes tangent of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/tan Cppreference]
std::tanh	A										<pre><code>float       tanh( float arg );\\n< more overloads available ></code></pre>Computes hyperbolic tangent of <code>arg</code>...	[http://en.cppreference.com/w/cpp/numeric/math/tanh Cppreference]
std::tgamma	A										<pre><code>float       tgamma( float arg );\\n< more overloads available ></code></pre>Computes the gamma function of <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/tgamma Cppreference]
std::trunc	A										<pre><code>float       trunc( float arg );\\n< more overloads available ></code></pre>Computes nearest integer not greater in magnitude than <code>arg</code>.	[http://en.cppreference.com/w/cpp/numeric/math/trunc Cppreference]
std::bernoulli_distribution	A										<pre><code>class bernoulli_distribution;</code></pre>Produces random boolean values, according to the discrete probability function.	[http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution Cppreference]
std::bernoulli_distribution::p	A										<pre><code>double p() const;</code></pre>Returns the p parameter the distribution was constructed with.	[http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/p Cppreference]
std::bernoulli_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/param Cppreference]
std::binomial_distribution	A										<pre><code>template< class IntType = int >\\nclass binomial_distribution;</code></pre>Produces random non-negative integer values i, distributed according to discrete probability function:...	[http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution Cppreference]
std::binomial_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/param Cppreference]
std::cauchy_distribution	A										<pre><code>template< class RealType = double >\\nclass cauchy_distribution;</code></pre>Produces random numbers according to a Cauchy distribution (also called Lorentz distribution):...	[http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution Cppreference]
std::cauchy_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/operator() Cppreference]
std::cauchy_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/param Cppreference]
std::chi_squared_distribution	A										<pre><code>template< class RealType = double >\\nclass chi_squared_distribution;</code></pre>The <code>chi_squared_distribution</code> produces random numbers x&gt;0 according to the Chi-squared distribution:...	[http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution Cppreference]
std::chi_squared_distribution::n	A										<pre><code>RealType n() const;</code></pre>Returns the n parameter the distribution was constructed with.	[http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/n Cppreference]
std::chi_squared_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/operator() Cppreference]
std::chi_squared_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/param Cppreference]
std::discard_block_engine::max	A										<pre><code>static constexpr result_type max();</code></pre>Returns the maximum value potentially generated by the engine adaptor.	[http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/max Cppreference]
std::discard_block_engine::min	A										<pre><code>static constexpr result_type min();</code></pre>Returns the minimum value potentially generated by the engine adaptor.	[http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/min Cppreference]
std::discard_block_engine::seed	A										<pre><code>void seed();\\n< more overloads available ></code></pre>Reinitializes the internal state of the underlying engine using a new seed value.	[http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/seed Cppreference]
std::discrete_distribution	A										<pre><code>template< class IntType = int >\\nclass discrete_distribution;</code></pre><code>std::discrete_distribution</code> produces random integers on the interval <code>[0, n)</code>, where the probability of each individual integer <code>i</code> is defined as wi/S, that is the <i>weight</i> of the <code>i</code>th integer divided by the...	[http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution Cppreference]
std::discrete_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/operator() Cppreference]
std::discrete_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/param Cppreference]
std::discrete_distribution::probabilities	A										<pre><code>std::vector<double> probabilities() const;</code></pre>Obtains a <code>std::vector&lt;double&gt;</code> containing the individual probabilities of each integer that is generated by this distribution.	[http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/probabilities Cppreference]
std::exponential_distribution	A										<pre><code>template< class RealType = double >\\nclass exponential_distribution;</code></pre>Produces random non-negative floating-point values x, distributed according to probability density function:...	[http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution Cppreference]
std::exponential_distribution::lambda	A										<pre><code>RealType lambda() const;</code></pre>Returns the λ distribution parameter the distribution was constructed with.	[http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/lambda Cppreference]
std::exponential_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/operator() Cppreference]
std::exponential_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/param Cppreference]
std::extreme_value_distribution	A										<pre><code>template< class RealType = double >\\nclass extreme_value_distribution;</code></pre>The <code>extreme_value_distribution</code> class is a <code>RandomNumberDistribution</code> that produces random numbers according to the extreme value distribution :...	[http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution Cppreference]
std::extreme_value_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/operator() Cppreference]
std::extreme_value_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/param Cppreference]
std::fisher_f_distribution	A										<pre><code>template< class RealType = double >\\nclass fisher_f_distribution;</code></pre>The <code>fisher_f_distribution</code> class is a <code>RandomNumberDistribution</code> that produces random numbers according to the f-distribution:...	[http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution Cppreference]
std::fisher_f_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/operator() Cppreference]
std::fisher_f_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/param Cppreference]
std::gamma_distribution	A										<pre><code>template< class RealType = double >\\nclass gamma_distribution;</code></pre>Produces random positive integer values x, distributed according to probability density function:...	[http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution Cppreference]
std::gamma_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/operator() Cppreference]
std::gamma_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/param Cppreference]
std::generate_canonical	A										<pre><code>template< class RealType, size_t bits, class Generator >\\nRealType generate_canonical( Generator& g );</code></pre>Generates a random floating point number in range [0; 1).	[http://en.cppreference.com/w/cpp/numeric/random/generate_canonical Cppreference]
std::geometric_distribution	A										<pre><code>template< class IntType = int >\\nclass geometric_distribution;</code></pre>Produces random non-negative integer values i, distributed according to discrete probability function:...	[http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution Cppreference]
std::geometric_distribution::p	A										<pre><code>double p() const;</code></pre>Returns the p distribution parameter the distribution was constructed with.	[http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/p Cppreference]
std::geometric_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/param Cppreference]
std::independent_bits_engine::max	A										<pre><code>static constexpr result_type max();</code></pre>Returns the maximum value potentially generated by the engine adaptor.	[http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/max Cppreference]
std::independent_bits_engine::min	A										<pre><code>static constexpr result_type min();</code></pre>Returns the minimum value potentially generated by the engine adaptor.	[http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/min Cppreference]
std::independent_bits_engine::seed	A										<pre><code>void seed();\\n< more overloads available ></code></pre>Reinitializes the internal state of the underlying engine using a new seed value.	[http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/seed Cppreference]
std::linear_congruential_engine::discard	A										<pre><code>void discard( unsigned long long z );</code></pre>Advances the internal state by <code>z</code> times.	[http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/discard Cppreference]
std::linear_congruential_engine::max	A										<pre><code>static constexpr result_type max();</code></pre>Returns the maximum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/max Cppreference]
std::linear_congruential_engine::min	A										<pre><code>static constexpr result_type min();</code></pre>Returns the minimum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/min Cppreference]
std::linear_congruential_engine::seed	A										<pre><code>void seed( result_type value = default_seed );\\n< more overloads available ></code></pre>Reinitializes the internal state of the random-number engine using new seed value.	[http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/seed Cppreference]
std::lognormal_distribution	A										<pre><code>template< class RealType = double >\\nclass lognormal_distribution;</code></pre>The lognormal_distribution random number distribution produces random numbers x &gt; 0 according to a log-normal distribution:...	[http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution Cppreference]
std::lognormal_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/operator() Cppreference]
std::lognormal_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/param Cppreference]
std::mersenne_twister_engine::discard	A										<pre><code>void discard( unsigned long long z );</code></pre>Advances the internal state by <code>z</code> times.	[http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/discard Cppreference]
std::mersenne_twister_engine::max	A										<pre><code>static constexpr result_type max();</code></pre>Returns the maximum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/max Cppreference]
std::mersenne_twister_engine::min	A										<pre><code>static constexpr result_type min();</code></pre>Returns the minimum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/min Cppreference]
std::mersenne_twister_engine::seed	A										<pre><code>void seed( result_type value = default_seed );\\n< more overloads available ></code></pre>Reinitializes the internal state of the random-number engine using new seed value.	[http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/seed Cppreference]
std::negative_binomial_distribution	A										<pre><code>template< class IntType = int >\\nclass negative_binomial_distribution;</code></pre>Produces random non-negative integer values i, distributed according to discrete probability function:...	[http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution Cppreference]
std::negative_binomial_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/param Cppreference]
std::normal_distribution	A										<pre><code>template< class RealType = double >\\nclass normal_distribution;</code></pre>Normal (or Gaussian) random number distribution:...	[http://en.cppreference.com/w/cpp/numeric/random/normal_distribution Cppreference]
std::normal_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/operator() Cppreference]
std::normal_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/param Cppreference]
std::piecewise_constant_distribution	A										<pre><code>template< class RealType = double >\\nclass piecewise_constant_distribution;</code></pre><code>std::piecewise_constant_distribution</code> produces random floating-point numbers, which are uniformly distributed within each of the several subintervals [bi, bi+1), each with its own weight wi.	[http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution Cppreference]
std::piecewise_constant_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/operator() Cppreference]
std::piecewise_constant_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/param Cppreference]
std::piecewise_linear_distribution	A										<pre><code>template< class RealType = double >\\nclass piecewise_linear_distribution;</code></pre><code>std::piecewise_linear_distribution</code> produces random floating-point numbers, which are distributed according to a linear probability density function within each of the several subintervals [bi, bi+1).	[http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution Cppreference]
std::piecewise_linear_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/operator() Cppreference]
std::piecewise_linear_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/param Cppreference]
std::poisson_distribution	A										<pre><code>template< class IntType = int >\\nclass poisson_distribution;</code></pre>Produces random non-negative integer values i, distributed according to discrete probability function:...	[http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution Cppreference]
std::poisson_distribution::mean	A										<pre><code>double mean() const;</code></pre>Returns the μ parameter the distribution was constructed with.	[http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/mean Cppreference]
std::poisson_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/param Cppreference]
std::rand	A										<pre><code>int rand();</code></pre>Returns a pseudo-random integral value between <code>​0​</code> and <code>RAND_MAX</code> (0 and <code>RAND_MAX</code> included).	[http://en.cppreference.com/w/cpp/numeric/random/rand Cppreference]
std::random_device	A										<pre><code>class random_device;</code></pre><code>std::random_device</code> is a uniformly-distributed integer random number generator that produces non-deterministic random numbers.	[http://en.cppreference.com/w/cpp/numeric/random/random_device Cppreference]
std::random_device::entropy	A										<pre><code>double entropy() const;</code></pre>Obtains an estimate of the random number device entropy, which is a floating-point value between min() and log2(max()+1).	[http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy Cppreference]
std::random_device::max	A										<pre><code>static constexpr result_type max();</code></pre>Returns the maximum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/random_device/max Cppreference]
std::random_device::min	A										<pre><code>static constexpr result_type min();</code></pre>Returns the minimum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/random_device/min Cppreference]
std::random_device::operator()	A										<pre><code>result_type operator()();</code></pre>Generates a non-deterministic uniformly-distributed random value.	[http://en.cppreference.com/w/cpp/numeric/random/random_device/operator() Cppreference]
std::seed_seq	A										<pre><code>class seed_seq;</code></pre><code>std::seed_seq</code> consumes a sequence of integer-valued data and produces a requested number of unsigned integer values <code>i</code>, 0 ≤ i &lt; 232, based on the consumed data.	[http://en.cppreference.com/w/cpp/numeric/random/seed_seq Cppreference]
std::seed_seq::generate	A										<pre><code>template< class RandomIt >\\nvoid generate( RandomIt begin, RandomIt end );</code></pre>Fills the range <code>[begin, end)</code> with unsigned integer values <code>i</code>, 0 ≤ i &lt; 232, based on the data originally provided in the constructor of this <code>seed_seq</code>.	[http://en.cppreference.com/w/cpp/numeric/random/seed_seq/generate Cppreference]
std::seed_seq::param	A										<pre><code>template< class OutputIt >\\nvoid param( OutputIt dest ) const;</code></pre>Outputs the initial seed sequence that's stored in the <code>std::seed_seq</code> object.	[http://en.cppreference.com/w/cpp/numeric/random/seed_seq/param Cppreference]
std::seed_seq::size	A										<pre><code>std::size_t size() const</code></pre>Returns the size of the stored initial seed sequence.	[http://en.cppreference.com/w/cpp/numeric/random/seed_seq/size Cppreference]
std::shuffle_order_engine::max	A										<pre><code>static constexpr result_type max();</code></pre>Returns the maximum value potentially generated by the engine adaptor.	[http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/max Cppreference]
std::shuffle_order_engine::min	A										<pre><code>static constexpr result_type min();</code></pre>Returns the minimum value potentially generated by the engine adaptor.	[http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/min Cppreference]
std::shuffle_order_engine::seed	A										<pre><code>void seed();\\n< more overloads available ></code></pre>Reinitializes the internal state of the underlying engine using a new seed value.	[http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/seed Cppreference]
std::srand	A										<pre><code>void srand( unsigned seed );</code></pre>Seeds the pseudo-random number generator used by <code>rand()</code> with the value <code>seed</code>.	[http://en.cppreference.com/w/cpp/numeric/random/srand Cppreference]
std::student_t_distribution	A										<pre><code>template< class RealType = double >\\nclass student_t_distribution;</code></pre>Produces random floating-point values x, distributed according to probability density function:...	[http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution Cppreference]
std::student_t_distribution::n	A										<pre><code>RealType n() const;</code></pre>Returns the n distribution parameter (number of the degrees of freedom) the distribution was constructed with.	[http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/n Cppreference]
std::student_t_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/operator() Cppreference]
std::student_t_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/param Cppreference]
std::subtract_with_carry_engine::discard	A										<pre><code>void discard( unsigned long long z );</code></pre>Advances the internal state by <code>z</code> times.	[http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/discard Cppreference]
std::subtract_with_carry_engine::max	A										<pre><code>static constexpr result_type max();</code></pre>Returns the maximum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/max Cppreference]
std::subtract_with_carry_engine::min	A										<pre><code>static constexpr result_type min();</code></pre>Returns the minimum value potentially generated by the random-number engine.	[http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/min Cppreference]
std::subtract_with_carry_engine::seed	A										<pre><code>void seed( result_type value = default_seed );\\n< more overloads available ></code></pre>Reinitializes the internal state of the random-number engine using new seed value.	[http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/seed Cppreference]
std::uniform_int_distribution	A										<pre><code>template< class IntType = int >\\nclass uniform_int_distribution;</code></pre>Produces random integer values i, uniformly distributed on the closed interval <code>[a, b]</code>.	[http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution Cppreference]
std::uniform_int_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/operator() Cppreference]
std::uniform_int_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/param Cppreference]
std::uniform_real_distribution	A										<pre><code>template< class RealType = double >\\nclass uniform_real_distribution;</code></pre>Produces random floating-point values i, uniformly distributed on the interval <code>[a, b)</code>.	[http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution Cppreference]
std::uniform_real_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/param Cppreference]
std::weibull_distribution	A										<pre><code>template< class RealType = double >\\nclass weibull_distribution;</code></pre>The <code>weibull_distribution</code> meets the requirements of a <code>RandomNumberDistribution</code> and produces random numbers according to the Weibull distribution:...	[http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution Cppreference]
std::weibull_distribution::operator()	A										<pre><code>template< class Generator >\\nresult_type operator()( Generator& g );\\n< more overloads available ></code></pre>Generates random numbers that are distributed according to the associated probability function.	[http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/operator() Cppreference]
std::weibull_distribution::param	A										<pre><code>param_type param() const;\\n< more overloads available ></code></pre>Manages the associated distribution parameter set.	[http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/param Cppreference]
std::ratio	A										<pre><code>template< \\n    std::intmax_t Num, \\n    std::intmax_t Denom = 1 \\n> class ratio;</code></pre>The class template <code>std::ratio</code> provides compile-time rational arithmetic support.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio Cppreference]
std::ratio_add	A										<pre><code>template< class R1, class R2 >\\nusing ratio_add = /* unspecified */;</code></pre>The template alias <code>std::ratio_add</code> denotes the result of adding two exact rational fractions represented by the std::ratio instances <code>R1</code> and <code>R2</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_add Cppreference]
std::ratio_divide	A										<pre><code>template< class R1, class R2 >\\nusing ratio_divide = /* unspecified */;</code></pre>The template alias <code>std::ratio_divide</code> denotes the result of dividing two exact rational fractions represented by the std::ratio instances <code>R1</code> and <code>R2</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_divide Cppreference]
std::ratio_equal	A										<pre><code>template< class R1, class R2 >\\nstruct ratio_equal : std::integral_constant;</code></pre>If the ratios R1 and R2 are equal, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_equal Cppreference]
std::ratio_greater	A										<pre><code>template< class R1, class R2 >\\nstruct ratio_greater : std::integral_constant;</code></pre>If the ratio <code>R1</code> is greater than than the ratio <code>R2</code>, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_greater Cppreference]
std::ratio_greater_equal	A										<pre><code>template< class R1, class R2 >\\nstruct ratio_greater_equal : std::integral_constant;</code></pre>If the ratio <code>R1</code> is greater than or equal to the ratio <code>R2</code>, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_greater_equal Cppreference]
std::ratio_less	A										<pre><code>template< class R1, class R2 >\\nstruct ratio_less : std::integral_constant;</code></pre>If the ratio R1 is less than the ratio R2, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_less Cppreference]
std::ratio_less_equal	A										<pre><code>template< class R1, class R2 >\\nstruct ratio_less_equal : std::integral_constant;</code></pre>If the ratio <code>R1</code> is less than or equal to the ratio <code>R2</code>, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_less_equal Cppreference]
std::ratio_multiply	A										<pre><code>template< class R1, class R2 >\\nusing ratio_multiply = /* unspecified */;</code></pre>The template alias <code>std::ratio_multiply</code> denotes the result of multiplying two exact rational fractions represented by the std::ratio instances <code>R1</code> and <code>R2</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_multiply Cppreference]
std::ratio_not_equal	A										<pre><code>template< class R1, class R2 >\\nstruct ratio_not_equal : std::integral_constant;</code></pre>If the ratios R1 and R2 are not equal, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_not_equal Cppreference]
std::ratio_subtract	A										<pre><code>template< class R1, class R2 >\\nusing ratio_subtract = /* unspecified */;</code></pre>The template alias <code>std::ratio_subtract</code> denotes the result of subtracting two exact rational fractions represented by the std::ratio instances <code>R1</code> and <code>R2</code>.	[http://en.cppreference.com/w/cpp/numeric/ratio/ratio_subtract Cppreference]
std::valarray	A										<pre><code>template< class T >\\nclass valarray;</code></pre>std::valarray is the class for representing and manipulating arrays of values.	[http://en.cppreference.com/w/cpp/numeric/valarray Cppreference]
std::basic_regex	A										<pre><code>template <\\n    class CharT = char,\\n    class Traits = std::regex_traits<CharT>\\n> class basic_regex;</code></pre>The class template <code>basic_regex</code> provides a general framework for holding regular expressions.	[http://en.cppreference.com/w/cpp/regex/basic_regex Cppreference]
std::basic_regex::assign	A										<pre><code>basic_regex& assign( const basic_regex& other );\\n< more overloads available ></code></pre>Assigns the contents to the regular expression.	[http://en.cppreference.com/w/cpp/regex/basic_regex/assign Cppreference]
std::basic_regex::flags	A										<pre><code>flag_type flags() const;</code></pre>Returns the regular expression syntax flags as set in the constructor or the last call to <code>assign()</code>.	[http://en.cppreference.com/w/cpp/regex/basic_regex/flags Cppreference]
std::basic_regex::getloc	A										<pre><code>locale_type getloc() const;</code></pre>Returns the current locale associated with the regular expression.	[http://en.cppreference.com/w/cpp/regex/basic_regex/getloc Cppreference]
std::basic_regex::imbue	A										<pre><code>locale_type imbue( locale_type loc );</code></pre>Replaces the current locale with <code>loc</code>.	[http://en.cppreference.com/w/cpp/regex/basic_regex/imbue Cppreference]
std::basic_regex::mark_count	A										<pre><code>unsigned mark_count() const;</code></pre>Returns the number of marked sub-expressions within the regular expression.	[http://en.cppreference.com/w/cpp/regex/basic_regex/mark_count Cppreference]
std::basic_regex::operator=	A										<pre><code>basic_regex& operator=( const basic_regex& other );\\n< more overloads available ></code></pre>Assigns the contents.	[http://en.cppreference.com/w/cpp/regex/basic_regex/operator= Cppreference]
std::basic_regex::swap	A										<pre><code>void swap( basic_regex& other );</code></pre>Exchanges the contents of two regular expressions.	[http://en.cppreference.com/w/cpp/regex/basic_regex/swap Cppreference]
std::match_results	A										<pre><code>template<\\n    class BidirIt,\\n    class Alloc = std::allocator<std::sub_match<BidirIt>>\\n> class match_results;</code></pre>The class template std::match_results holds a collection of character sequences that represent the result of a regular expression match.	[http://en.cppreference.com/w/cpp/regex/match_results Cppreference]
std::match_results::begin	A										<pre><code>iterator begin();\\n< more overloads available ></code></pre>Returns an iterator to the beginning of the list of sub-matches.	[http://en.cppreference.com/w/cpp/regex/match_results/begin Cppreference]
std::match_results::cbegin	A										<pre><code>const_iterator cbegin() const;</code></pre>Returns an iterator to the beginning of the list of sub-matches.	[http://en.cppreference.com/w/cpp/regex/match_results/begin Cppreference]
std::match_results::empty	A										<pre><code>bool empty() const;</code></pre>Checks whether the match was successful.	[http://en.cppreference.com/w/cpp/regex/match_results/empty Cppreference]
std::match_results::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the end of the list of sub-matches.	[http://en.cppreference.com/w/cpp/regex/match_results/end Cppreference]
std::match_results::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the end of the list of sub-matches.	[http://en.cppreference.com/w/cpp/regex/match_results/end Cppreference]
std::match_results::format	A										<pre><code>template< class OutputIt >\\nOutputIter format( OutputIt out,\\n                   const char_type* fmt_first, const char_type* fmt_last,\\n                   std::regex_constants::match_flag_type flags =\\n                       std::regex_constants::format_default ) const;\\n< more overloads available ></code></pre><code>format</code> outputs a format string, replacing any format specifiers or escape sequences in that string with match data from <code>*this</code>.	[http://en.cppreference.com/w/cpp/regex/match_results/format Cppreference]
std::match_results::get_allocator	A										<pre><code>allocator_type get_allocator() const;</code></pre>Returns the allocator associated with the object.	[http://en.cppreference.com/w/cpp/regex/match_results/get_allocator Cppreference]
std::match_results::length	A										<pre><code>difference_type length( size_type n = 0 ) const;</code></pre>Returns the length of the specified sub-match.	[http://en.cppreference.com/w/cpp/regex/match_results/length Cppreference]
std::match_results::max_size	A										<pre><code>size_type max_size() const;</code></pre>Returns the maximum number of submatches the <code>match_results</code> type is able to hold due to system or library implementation limitations.	[http://en.cppreference.com/w/cpp/regex/match_results/max_size Cppreference]
std::match_results::operator[]	A										<pre><code>const_reference operator[]( size_type n ) const;</code></pre>Returns an indicated sub-match.	[http://en.cppreference.com/w/cpp/regex/match_results/operator_at Cppreference]
std::match_results::position	A										<pre><code>difference_type position( size_type sub = 0 ) const;</code></pre>Returns the position of the first character of the specified sub-match.	[http://en.cppreference.com/w/cpp/regex/match_results/position Cppreference]
std::match_results::size	A										<pre><code>size_type size() const;</code></pre>Returns the number of submatches, i.e. <code>std::distance(begin(), end())</code>.	[http://en.cppreference.com/w/cpp/regex/match_results/size Cppreference]
std::match_results::str	A										<pre><code>string_type str( size_type n = 0 ) const;</code></pre>Returns a string representing the indicated sub-match.	[http://en.cppreference.com/w/cpp/regex/match_results/str Cppreference]
std::match_results::swap	A										<pre><code>void swap( match_results& other );</code></pre>Exchanges the shared states of two <code>match_results</code> objects.	[http://en.cppreference.com/w/cpp/regex/match_results/swap Cppreference]
std::regex_error	A										<pre><code>class regex_error : public std::runtime_error {\\n  public:\\n    explicit regex_error(std::regex_constants::error_type ecode);\\n    std::regex_constants::error_type code() const;\\n};</code></pre>Defines the type of exception object thrown to report errors in the regular expressions library.	[http://en.cppreference.com/w/cpp/regex/regex_error Cppreference]
std::regex_error::code	A										<pre><code>std::regex_constants::error_type code() const;</code></pre>Returns the std::regex_constants::error_type that was passed to the std::regex_error constructor.	[http://en.cppreference.com/w/cpp/regex/regex_error/code Cppreference]
std::regex_iterator	A										<pre><code>template<\\n    class BidirIt,\\n    class CharT = typename std::iterator_traits<BidirIt>::value_type,\\n    class Traits = std::regex_traits<CharT>\\n> class regex_iterator</code></pre><code>std::regex_iterator</code> is a read-only <code>ForwardIterator</code> that accesses the individual matches of a regular expression within the underlying character sequence.	[http://en.cppreference.com/w/cpp/regex/regex_iterator Cppreference]
std::regex_iterator::operator*	A										<pre><code>const value_type& operator*() const;</code></pre>Extracts the current std::regex_match from a <code>regex_iterator</code>:...	[http://en.cppreference.com/w/cpp/regex/regex_iterator/operator* Cppreference]
std::regex_iterator::operator->	A										<pre><code>const value_type* operator->() const;</code></pre>Extracts the current std::regex_match from a <code>regex_iterator</code>:...	[http://en.cppreference.com/w/cpp/regex/regex_iterator/operator* Cppreference]
std::regex_match	A										<pre><code>template< class BidirIt, \\n          class Alloc, class CharT, class Traits >\\nbool regex_match( BidirIt first, BidirIt last,\\n                  std::match_results<BidirIt,Alloc>& m,\\n                  const std::basic_regex<CharT,Traits>& e,\\n                  std::regex_constants::match_flag_type flags = \\n                      std::regex_constants::match_default );\\n< more overloads available ></code></pre>1) Determines if there is a match between the regular expression <code>e</code> and the entire target character sequence <code>[first,last)</code>, taking into account the effect of <code>flags</code>.	[http://en.cppreference.com/w/cpp/regex/regex_match Cppreference]
std::regex_replace	A										<pre><code>template< class OutputIt, class BidirIt,\\n          class Traits, class CharT,\\n          class STraits, class SAlloc >\\nOutputIt regex_replace( OutputIt out, BidirIt first, BidirIt last,\\n                        const std::basic_regex<CharT,Traits>& re,\\n                        const std::basic_string<CharT,STraits,SAlloc>& fmt,\\n                        std::regex_constants::match_flag_type flags = \\n                            std::regex_constants::match_default );\\n< more overloads available ></code></pre><code>regex_replace</code> uses a regular expression to perform substitution on a sequence of characters:...	[http://en.cppreference.com/w/cpp/regex/regex_replace Cppreference]
std::regex_search	A										<pre><code>template< class BidirIt, \\n          class Alloc, class CharT, class Traits >\\nbool regex_search( BidirIt first, BidirIt last,\\n                   std::match_results<BidirIt,Alloc>& m,\\n                   const std::basic_regex<CharT,Traits>& e,\\n                   std::regex_constants::match_flag_type flags = \\n                       std::regex_constants::match_default );\\n< more overloads available ></code></pre>Determines if there is a match between the regular express <code>e</code> and some subsequence in the target character sequence.	[http://en.cppreference.com/w/cpp/regex/regex_search Cppreference]
std::regex_token_iterator	A										<pre><code>template<\\n    class BidirIt,\\n    class CharT = typename std::iterator_traits<BidirIt>::value_type,\\n    class Traits = std::regex_traits<CharT>\\n> class regex_token_iterator</code></pre><code>std::regex_token_iterator</code> is a read-only <code>ForwardIterator</code> that accesses the individual sub-matches of every match of a regular expression within the underlying character sequence.	[http://en.cppreference.com/w/cpp/regex/regex_token_iterator Cppreference]
std::regex_traits	A										<pre><code>template< class CharT >\\nclass regex_traits;</code></pre>The type trait template <code>regex_traits</code> supplies std::basic_regex with the set of types and functions necessary to operate on the type <code>CharT</code>.	[http://en.cppreference.com/w/cpp/regex/regex_traits Cppreference]
std::regex_traits::isctype	A										<pre><code>bool isctype( CharT c, char_class_type f ) const;</code></pre>Determines whether the character <code>c</code> belongs to the character class identified by <code>f</code>, which, in turn, is a value returned by <code>lookup_classname()</code>.	[http://en.cppreference.com/w/cpp/regex/regex_traits/isctype Cppreference]
std::regex_traits::length	A										<pre><code>static std::size_t length(const char_type* p);</code></pre>Calculates the length of a null-terminated character sequence, that is, the smallest <code>i</code> such that <code>p[i]==0</code>.	[http://en.cppreference.com/w/cpp/regex/regex_traits/length Cppreference]
std::regex_traits::lookup_classname	A										<pre><code>template< class ForwardIt >\\nchar_class_type lookup_classname( ForwardIt first,\\n                                  ForwardIt last,\\n                                  bool icase = false ) const;</code></pre>If the character sequence <code>[first, last)</code> represents the name of a valid character class in the currently imbued locale , returns the implementation-defined value representing this character class.	[http://en.cppreference.com/w/cpp/regex/regex_traits/lookup_classname Cppreference]
std::regex_traits::lookup_collatename	A										<pre><code>template< class ForwardIt >\\nstring_type lookup_collatename( ForwardIt first, ForwardIt last ) const;</code></pre>If the character sequence <code>[first, last)</code> represents the name of a valid collating element in the currently imbued locale, returns the name of that collating element.	[http://en.cppreference.com/w/cpp/regex/regex_traits/lookup_collatename Cppreference]
std::regex_traits::transform	A										<pre><code>template< class ForwardIt >\\nstring_type transform( ForwardIt first, ForwardIt last) const</code></pre>Obtains the sort key for the character sequence <code>[first, last)</code>, such that if a sort key compares less than another sort key with <code>operator&lt;</code>, then the character sequence that produced the first sort...	[http://en.cppreference.com/w/cpp/regex/regex_traits/transform Cppreference]
std::regex_traits::transform_primary	A										<pre><code>template< class ForwardIt >\\nstring_type transform_primary( ForwardIt first, ForwardIt last ) const</code></pre>For the character sequence <code>[first, last)</code>, obtains the primary sort key in the imbued locale's collating order.	[http://en.cppreference.com/w/cpp/regex/regex_traits/transform_primary Cppreference]
std::regex_traits::translate	A										<pre><code>CharT translate(CharT c) const;</code></pre>Obtains the comparison key for the character <code>c</code>, such that all characters that are equivalent to this character in the imbued locale produce the same key.	[http://en.cppreference.com/w/cpp/regex/regex_traits/translate Cppreference]
std::regex_traits::translate_nocase	A										<pre><code>CharT translate_nocase(CharT c) const;</code></pre>Obtains the comparison key for the character <code>c</code>, such that all characters that are equivalent to this character in the imbued locale, ignoring the case differences, if any, produce the same key.	[http://en.cppreference.com/w/cpp/regex/regex_traits/translate_nocase Cppreference]
std::sub_match	A										<pre><code>template<\\n    class BidirIt\\n> class sub_match;</code></pre>The class template <code>sub_match</code> is used by the regular expression engine to denote sequences of characters matched by marked sub-expressions.	[http://en.cppreference.com/w/cpp/regex/sub_match Cppreference]
std::sub_match::operator string_type	A										<pre><code>operator string_type() const;</code></pre>1) Implicitly converts to an object of the underlying std::basic_string type.	[http://en.cppreference.com/w/cpp/regex/sub_match/str Cppreference]
std::sub_match::str	A										<pre><code>operator string_type() const;\\n< more overloads available ></code></pre>1) Implicitly converts to an object of the underlying std::basic_string type.	[http://en.cppreference.com/w/cpp/regex/sub_match/str Cppreference]
std::basic_string	A										<pre><code>template< \\n    class CharT, \\n    class Traits = std::char_traits<CharT>, \\n    class Allocator = std::allocator<CharT>\\n> class basic_string;</code></pre>The class template <code>basic_string</code> stores and manipulates sequences of <code>char</code>-like objects.	[http://en.cppreference.com/w/cpp/string/basic_string Cppreference]
std::basic_string::append	A										<pre><code>basic_string& append( size_type count, const CharT& ch );\\n< more overloads available ></code></pre>Appends additional characters to the string.	[http://en.cppreference.com/w/cpp/string/basic_string/append Cppreference]
std::basic_string::assign	A										<pre><code>basic_string& assign( size_type count, CharT ch );\\n< more overloads available ></code></pre>Replaces the contents of the string.	[http://en.cppreference.com/w/cpp/string/basic_string/assign Cppreference]
std::basic_string::at	A										<pre><code>reference       at( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the character at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/at Cppreference]
std::basic_string::back	A										<pre><code>CharT& back();\\n< more overloads available ></code></pre>Returns reference to the last character in the string.	[http://en.cppreference.com/w/cpp/string/basic_string/back Cppreference]
std::basic_string::begin	A										<pre><code>iterator begin();\\n< more overloads available ></code></pre>Returns an iterator to the first character of the string.	[http://en.cppreference.com/w/cpp/string/basic_string/begin Cppreference]
std::basic_string::cbegin	A										<pre><code>const_iterator cbegin() const;</code></pre>Returns an iterator to the first character of the string.	[http://en.cppreference.com/w/cpp/string/basic_string/begin Cppreference]
std::basic_string::c_str	A										<pre><code>const CharT* c_str() const;</code></pre>Returns a pointer to a null-terminated character array with data equivalent to those stored in the string.	[http://en.cppreference.com/w/cpp/string/basic_string/c_str Cppreference]
std::basic_string::capacity	A										<pre><code>size_type capacity() const;</code></pre>Returns the number of characters that the string has currently allocated space for.	[http://en.cppreference.com/w/cpp/string/basic_string/capacity Cppreference]
std::basic_string::clear	A										<pre><code>void clear();</code></pre>Removes all characters from the string.	[http://en.cppreference.com/w/cpp/string/basic_string/clear Cppreference]
std::basic_string::compare	A										<pre><code>int compare( const basic_string& str ) const;\\n< more overloads available ></code></pre>Compares two character sequences.	[http://en.cppreference.com/w/cpp/string/basic_string/compare Cppreference]
std::basic_string::copy	A										<pre><code>size_type copy( CharT* dest,\\n                size_type count,\\n                size_type pos = 0);</code></pre>Copies a substring <code>[pos, pos+count)</code> to character string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/copy Cppreference]
std::basic_string::data	A										<pre><code>const CharT* data() const;</code></pre>Returns pointer to the underlying array serving as character storage.	[http://en.cppreference.com/w/cpp/string/basic_string/data Cppreference]
std::basic_string::empty	A										<pre><code>bool empty() const;</code></pre>Checks if the string has no characters, i.e. whether <code>begin() == end()</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/empty Cppreference]
std::basic_string::cend	A										<pre><code>const_iterator cend() const;</code></pre>Returns an iterator to the character following the last character of the string.	[http://en.cppreference.com/w/cpp/string/basic_string/end Cppreference]
std::basic_string::end	A										<pre><code>iterator end();\\n< more overloads available ></code></pre>Returns an iterator to the character following the last character of the string.	[http://en.cppreference.com/w/cpp/string/basic_string/end Cppreference]
std::basic_string::erase	A										<pre><code>basic_string& erase( size_type index = 0, size_type count = npos );</code></pre>Removes specified characters from the string.	[http://en.cppreference.com/w/cpp/string/basic_string/erase Cppreference]
std::basic_string::find	A										<pre><code>size_type find( const basic_string& str, size_type pos = 0 ) const;\\n< more overloads available ></code></pre>Finds the first substring equal to the given character sequence.	[http://en.cppreference.com/w/cpp/string/basic_string/find Cppreference]
std::basic_string::find_first_not_of	A										<pre><code>size_type find_first_not_of( const basic_string& str, size_type pos = 0 ) const;\\n< more overloads available ></code></pre>Finds the first character equal to none of the characters in the given character sequence.	[http://en.cppreference.com/w/cpp/string/basic_string/find_first_not_of Cppreference]
std::basic_string::find_first_of	A										<pre><code>size_type find_first_of( const basic_string& str, size_type pos = 0 ) const;\\n< more overloads available ></code></pre>Finds the first character equal to one of characters in the given character sequence.	[http://en.cppreference.com/w/cpp/string/basic_string/find_first_of Cppreference]
std::basic_string::find_last_not_of	A										<pre><code>size_type find_last_not_of( const basic_string& str, size_type pos = npos ) const;\\n< more overloads available ></code></pre>Finds the last character equal to none of the characters in the given character sequence.	[http://en.cppreference.com/w/cpp/string/basic_string/find_last_not_of Cppreference]
std::basic_string::find_last_of	A										<pre><code>size_type find_last_of( const basic_string& str, size_type pos = npos ) const;\\n< more overloads available ></code></pre>Finds the last character equal to one of characters in the given character sequence.	[http://en.cppreference.com/w/cpp/string/basic_string/find_last_of Cppreference]
std::basic_string::front	A										<pre><code>CharT& front();\\n< more overloads available ></code></pre>Returns reference to the first character in the string.	[http://en.cppreference.com/w/cpp/string/basic_string/front Cppreference]
std::basic_string::get_allocator	A										<pre><code>allocator_type get_allocator() const;</code></pre>Returns the allocator associated with the string.	[http://en.cppreference.com/w/cpp/string/basic_string/get_allocator Cppreference]
std::getline	A										<pre><code>template< class CharT, class Traits, class Allocator >\\nstd::basic_istream<CharT,Traits>& getline( std::basic_istream<CharT,Traits>& input,\\n                                           std::basic_string<CharT,Traits,Allocator>& str,\\n                                           CharT delim );\\n< more overloads available ></code></pre><code>getline</code> reads characters from an input stream and places them into a string:...	[http://en.cppreference.com/w/cpp/string/basic_string/getline Cppreference]
std::basic_string::insert	A										<pre><code>basic_string& insert( size_type index, size_type count, CharT ch );\\n< more overloads available ></code></pre>Inserts characters into the string.	[http://en.cppreference.com/w/cpp/string/basic_string/insert Cppreference]
std::basic_string::max_size	A										<pre><code>size_type max_size() const;</code></pre>Returns the maximum number of elements the string is able to hold due to system or library implementation limitations, i.e. ​<code>std::distance(begin(), end())</code>​ for the largest string.	[http://en.cppreference.com/w/cpp/string/basic_string/max_size Cppreference]
std::basic_string::operator=	A										<pre><code>basic_string& operator=( const basic_string& str );\\n< more overloads available ></code></pre>Replaces the contents of the string.	[http://en.cppreference.com/w/cpp/string/basic_string/operator= Cppreference]
std::basic_string::operator[]	A										<pre><code>reference       operator[]( size_type pos );\\n< more overloads available ></code></pre>Returns a reference to the character at specified location <code>pos</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/operator_at Cppreference]
std::basic_string::pop_back	A										<pre><code>void pop_back();</code></pre>Removes the last character from the string.	[http://en.cppreference.com/w/cpp/string/basic_string/pop_back Cppreference]
std::basic_string::push_back	A										<pre><code>void push_back( CharT ch );</code></pre>Appends the given character <code>ch</code> to the end of the string.	[http://en.cppreference.com/w/cpp/string/basic_string/push_back Cppreference]
std::basic_string::crbegin	A										<pre><code>const_iterator crbegin() const;</code></pre>Returns a reverse iterator to the first character of the reversed string.	[http://en.cppreference.com/w/cpp/string/basic_string/rbegin Cppreference]
std::basic_string::rbegin	A										<pre><code>iterator rbegin();\\n< more overloads available ></code></pre>Returns a reverse iterator to the first character of the reversed string.	[http://en.cppreference.com/w/cpp/string/basic_string/rbegin Cppreference]
std::basic_string::crend	A										<pre><code>const_iterator crend() const;</code></pre>Returns a reverse iterator to the character following the last character of the reversed string.	[http://en.cppreference.com/w/cpp/string/basic_string/rend Cppreference]
std::basic_string::rend	A										<pre><code>iterator rend();\\n< more overloads available ></code></pre>Returns a reverse iterator to the character following the last character of the reversed string.	[http://en.cppreference.com/w/cpp/string/basic_string/rend Cppreference]
std::basic_string::replace	A										<pre><code>basic_string& replace( size_type pos, size_type count,\\n                       const basic_string& str );\\nbasic_string& replace( const_iterator first, const_iterator last,\\n                       const basic_string& str );\\n< more overloads available ></code></pre>Replaces the part of the string indicated by either <code>[pos, pos + count)</code> or <code>[first, last)</code> with a new string.	[http://en.cppreference.com/w/cpp/string/basic_string/replace Cppreference]
std::basic_string::reserve	A										<pre><code>void reserve( size_type size );</code></pre>Sets the capacity of the string to at least <code>size</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/reserve Cppreference]
std::basic_string::resize	A										<pre><code>void resize( size_type count );\\n< more overloads available ></code></pre>Resizes the string to contain <code>count</code> characters.	[http://en.cppreference.com/w/cpp/string/basic_string/resize Cppreference]
std::basic_string::rfind	A										<pre><code>size_type rfind( const basic_string& str, size_type pos = npos ) const;\\n< more overloads available ></code></pre>Finds the last substring equal to the given character sequence.	[http://en.cppreference.com/w/cpp/string/basic_string/rfind Cppreference]
std::basic_string::shrink_to_fit	A										<pre><code>void shrink_to_fit();</code></pre>Requests the removal of unused capacity.	[http://en.cppreference.com/w/cpp/string/basic_string/shrink_to_fit Cppreference]
std::basic_string::length	A										<pre><code>size_type length() const;</code></pre>Returns the number of <code>CharT</code> elements in the string, i.e. <code>std::distance(begin(), end())</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/size Cppreference]
std::basic_string::size	A										<pre><code>size_type size() const;\\n< more overloads available ></code></pre>Returns the number of <code>CharT</code> elements in the string, i.e. <code>std::distance(begin(), end())</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/size Cppreference]
std::stod	A										<pre><code>double      stod( const std::string& str, size_t *pos = 0 );</code></pre>Interprets a floating point value in a string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stof Cppreference]
std::stof	A										<pre><code>float       stof( const std::string& str, size_t *pos = 0 );</code></pre>Interprets a floating point value in a string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stof Cppreference]
std::stold	A										<pre><code>long double stold( const std::string& str, size_t *pos = 0 );</code></pre>Interprets a floating point value in a string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stof Cppreference]
std::stoi	A										<pre><code>int       stoi( const std::string& str, size_t *pos = 0, int base = 10 );</code></pre>Interprets a signed integer value in the string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stol Cppreference]
std::stol	A										<pre><code>long      stol( const std::string& str, size_t *pos = 0, int base = 10 );\\n< more overloads available ></code></pre>Interprets a signed integer value in the string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stol Cppreference]
std::stoll	A										<pre><code>long long stoll( const std::string& str, size_t *pos = 0, int base = 10 );</code></pre>Interprets a signed integer value in the string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stol Cppreference]
std::stoul	A										<pre><code>unsigned long      stoul( const std::string& str, size_t *pos = 0, int base = 10 );\\n< more overloads available ></code></pre>Interprets an unsigned integer value in the string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stoul Cppreference]
std::stoull	A										<pre><code>unsigned long long stoull( const std::string& str, size_t *pos = 0, int base = 10 );</code></pre>Interprets an unsigned integer value in the string <code>str</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/stoul Cppreference]
std::basic_string::substr	A										<pre><code>basic_string substr( size_type pos = 0,\\n                     size_type count = npos );</code></pre>Returns a substring <code>[pos, pos+count)</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/substr Cppreference]
std::basic_string::swap	A										<pre><code>void swap( basic_string& other );</code></pre>Exchanges the contents of the string with those of <code>other</code>.	[http://en.cppreference.com/w/cpp/string/basic_string/swap Cppreference]
std::atof	A										<pre><code>double atof( const char *str );</code></pre>Interprets an floating point value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/atof Cppreference]
std::atoi	A										<pre><code>int       atoi( const char *str );</code></pre>Interprets an integer value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/atoi Cppreference]
std::atol	A										<pre><code>long      atol( const char *str )\\n< more overloads available ></code></pre>Interprets an integer value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/atoi Cppreference]
std::atoll	A										<pre><code>long long atoll( const char *str );</code></pre>Interprets an integer value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/atoi Cppreference]
std::isalnum	A										<pre><code>int isalnum( int ch );</code></pre>Checks if the given character is an alphanumeric character according to the current C locale, i.e. either a number , an uppercase letter , or a lowercase letter .	[http://en.cppreference.com/w/cpp/string/byte/isalnum Cppreference]
std::isalpha	A										<pre><code>int isalpha( int ch );</code></pre>Checks if the given character is an alphabetic character according to the currently installed C locale.	[http://en.cppreference.com/w/cpp/string/byte/isalpha Cppreference]
std::isblank	A										<pre><code>int isblank( int ch );</code></pre>Checks if the given character is classified as a blank character  by the currently installed C locale.	[http://en.cppreference.com/w/cpp/string/byte/isblank Cppreference]
std::iscntrl	A										<pre><code>int iscntrl( int ch );</code></pre>Checks if the given character is classified as a control character by the currently installed C locale.	[http://en.cppreference.com/w/cpp/string/byte/iscntrl Cppreference]
std::isdigit	A										<pre><code>int isdigit( int ch );</code></pre>Checks if the given character is one of the 10 decimal digits: <code>0123456789</code>.	[http://en.cppreference.com/w/cpp/string/byte/isdigit Cppreference]
std::isgraph	A										<pre><code>int isgraph( int ch );</code></pre>Checks if the given character has a graphical representation.	[http://en.cppreference.com/w/cpp/string/byte/isgraph Cppreference]
std::islower	A										<pre><code>int islower( int ch );</code></pre>Checks if the given character is classified as a lowercase character according to the current C locale.	[http://en.cppreference.com/w/cpp/string/byte/islower Cppreference]
std::isprint	A										<pre><code>int isprint( int ch );</code></pre>Checks if the given character can be printed.	[http://en.cppreference.com/w/cpp/string/byte/isprint Cppreference]
std::ispunct	A										<pre><code>int ispunct( int ch );</code></pre>Checks if the given character is a punctuation character in the current C locale.	[http://en.cppreference.com/w/cpp/string/byte/ispunct Cppreference]
std::isspace	A										<pre><code>int isspace( int ch );</code></pre>Checks if the given character is classified as a whitespace character by the currently installed C locale.	[http://en.cppreference.com/w/cpp/string/byte/isspace Cppreference]
std::isupper	A										<pre><code>int isupper( int ch );</code></pre>Checks if the given character is an uppercase character according to the current C locale.	[http://en.cppreference.com/w/cpp/string/byte/isupper Cppreference]
std::isxdigit	A										<pre><code>int isxdigit( int ch );</code></pre>Checks if the given wide character is a hexadecimal numeric character (<code>0123456789abcdefABCDEF</code>).	[http://en.cppreference.com/w/cpp/string/byte/isxdigit Cppreference]
std::memchr	A										<pre><code>const void* memchr( const void* ptr, int ch, std::size_t count );\\n< more overloads available ></code></pre>Converts <code>ch</code> to <code>unsigned char</code> and locates the first occurrence of that value in the initial <code>count</code> characters  of the object pointed to by <code>ptr</code>.	[http://en.cppreference.com/w/cpp/string/byte/memchr Cppreference]
std::memcmp	A										<pre><code>int memcmp( const void* lhs, const void* rhs, std::size_t count );</code></pre>Reinterprets the objects pointed to by <code>lhs</code> and <code>rhs</code> as arrays of <code>unsigned char</code> and compares the first <code>count</code> characters of these arrays.	[http://en.cppreference.com/w/cpp/string/byte/memcmp Cppreference]
std::memcpy	A										<pre><code>void* memcpy( void* dest, const void* src, std::size_t count );</code></pre>Copies <code>count</code> bytes from the object pointed to by <code>src</code> to the object pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/byte/memcpy Cppreference]
std::memmove	A										<pre><code>void* memmove( void* dest, const void* src, std::size_t count );</code></pre>Copies <code>count</code> characters from the object pointed to by <code>src</code> to the object pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/byte/memmove Cppreference]
std::memset	A										<pre><code>void* memset( void* dest, int ch, std::size_t count );</code></pre>Converts the value <code>ch</code> to <code>unsigned char</code> and copies it into each of the first <code>count</code> characters of the object pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/byte/memset Cppreference]
std::strcat	A										<pre><code>char *strcat( char *dest, const char *src );</code></pre>Appends a byte string pointed to by <code>src</code> to a byte string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/byte/strcat Cppreference]
std::strchr	A										<pre><code>const char* strchr( const char* str, int ch );\\n< more overloads available ></code></pre>Finds the first occurrence of the character <code>ch</code> in the byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strchr Cppreference]
std::strcmp	A										<pre><code>int strcmp( const char *lhs, const char *rhs );</code></pre>Compares two null-terminated byte strings.	[http://en.cppreference.com/w/cpp/string/byte/strcmp Cppreference]
std::strcoll	A										<pre><code>int strcoll( const char* lhs, const char* rhs );</code></pre>Compares two null-terminated byte strings according to the current locale as defined by the LC_COLLATE category.	[http://en.cppreference.com/w/cpp/string/byte/strcoll Cppreference]
std::strcpy	A										<pre><code>char *strcpy( char *dest, const char *src );</code></pre>Copies the byte string pointed to by <code>src</code> to byte string, pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/byte/strcpy Cppreference]
std::strcspn	A										<pre><code>size_t strcspn( const char *dest, const char *src );</code></pre>Returns the length of the maximum initial segment of the byte string pointed to by <code>dest</code>, that consists of only the characters <i>not</i> found in byte string pointed to by <code>src</code>.	[http://en.cppreference.com/w/cpp/string/byte/strcspn Cppreference]
std::strerror	A										<pre><code>char* strerror( int errnum );</code></pre>Returns text version of the error code <code>errnum</code>.	[http://en.cppreference.com/w/cpp/string/byte/strerror Cppreference]
std::strlen	A										<pre><code>std::size_t strlen( const char* str );</code></pre>Returns the length of the given byte string.	[http://en.cppreference.com/w/cpp/string/byte/strlen Cppreference]
std::strncat	A										<pre><code>char *strncat( char *dest, const char *src, std::size_t count );</code></pre>Appends a byte string pointed to by <code>src</code> to a byte string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/byte/strncat Cppreference]
std::strncmp	A										<pre><code>int strncmp( const char *lhs, const char *rhs, size_t count );</code></pre>Compares at most <code>count</code> characters of two null-terminated byte strings.	[http://en.cppreference.com/w/cpp/string/byte/strncmp Cppreference]
std::strncpy	A										<pre><code>char *strncpy( char *dest, const char *src, std::size_t count );</code></pre>Copies at most <code>count</code> characters of the byte string pointed to by <code>src</code>  to character array pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/byte/strncpy Cppreference]
std::strpbrk	A										<pre><code>const char* strpbrk( const char* dest, const char* str );\\n< more overloads available ></code></pre>Finds the first character in byte string pointed to by <code>dest</code>, that is also in byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strpbrk Cppreference]
std::strrchr	A										<pre><code>const char* strrchr( const char* str, int ch );\\n< more overloads available ></code></pre>Finds the last occurrence of <code>ch</code> (after conversion to <code>char</code>) in the byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strrchr Cppreference]
std::strspn	A										<pre><code>size_t strspn( const char *dest, const char *src );</code></pre>Returns the length of the maximum initial segment of the byte string pointed to by <code>dest</code>, that consists of only the characters found in byte string pointed to by <code>src</code>.	[http://en.cppreference.com/w/cpp/string/byte/strspn Cppreference]
std::strstr	A										<pre><code>const char* strstr( const char* str, const char* target );\\n< more overloads available ></code></pre>Finds the first occurrence of the byte string <code>target</code> in the byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strstr Cppreference]
std::strtod	A										<pre><code>double      strtod( const char* str, char** str_end );</code></pre>Interprets a floating point value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtof Cppreference]
std::strtof	A										<pre><code>float       strtof( const char* str, char** str_end );</code></pre>Interprets a floating point value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtof Cppreference]
std::strtold	A										<pre><code>long double strtold( const char* str, char** str_end );</code></pre>Interprets a floating point value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtof Cppreference]
std::strtoimax	A										<pre><code>std::intmax_t strtoimax( const char* nptr, char** endptr, int base );</code></pre>Interprets an integer value in a byte string pointed to by <code>nptr</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtoimax Cppreference]
std::strtoumax	A										<pre><code>std::uintmax_t strtoumax( const char* nptr, char** endptr, int base );</code></pre>Interprets an integer value in a byte string pointed to by <code>nptr</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtoimax Cppreference]
std::strtok	A										<pre><code>char* strtok( char* str, const char* delim );</code></pre>Finds the next token in a null-terminated byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtok Cppreference]
std::strtol	A										<pre><code>long      strtol( const char *str, char **str_end, int base );\\n< more overloads available ></code></pre>Interprets an integer value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtol Cppreference]
std::strtoll	A										<pre><code>long long strtoll( const char *str, char **str_end, int base );</code></pre>Interprets an integer value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtol Cppreference]
std::strtoul	A										<pre><code>unsigned long      strtoul( const char *str, char **str_end, int base );\\n< more overloads available ></code></pre>Interprets an unsigned integer value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtoul Cppreference]
std::strtoull	A										<pre><code>unsigned long long strtoull( const char *str, char **str_end, int base );</code></pre>Interprets an unsigned integer value in a byte string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/byte/strtoul Cppreference]
std::strxfrm	A										<pre><code>std::size_t strxfrm( char* dest, const char* src, std::size_t count );</code></pre>Transforms the null-terminated byte string pointed to by <code>src</code> into the implementation-defined form such that comparing two transformed strings with std::strcmp gives the same result as comparing the...	[http://en.cppreference.com/w/cpp/string/byte/strxfrm Cppreference]
std::tolower	A										<pre><code>int tolower( int ch );</code></pre>Converts the given character to lowercase according to the character conversion rules defined by the currently installed C locale.	[http://en.cppreference.com/w/cpp/string/byte/tolower Cppreference]
std::toupper	A										<pre><code>int toupper( int ch );</code></pre>Converts the given character to uppercase according to the character conversion rules defined by the currently installed C locale.	[http://en.cppreference.com/w/cpp/string/byte/toupper Cppreference]
std::char_traits	A										<pre><code>template<\\n    class CharT \\n> class char_traits;</code></pre>The <code>char_traits</code> class is a traits class template that abstracts basic character and string operations for a given character type.	[http://en.cppreference.com/w/cpp/string/char_traits Cppreference]
std::char_traits::assign	A										<pre><code>static void assign( char_type& r, const char_type& a );\\n< more overloads available ></code></pre>Assigns a character.	[http://en.cppreference.com/w/cpp/string/char_traits/assign Cppreference]
std::char_traits::compare	A										<pre><code>static int compare( const char_type* s1, const char_type* s2, std::size_t count );</code></pre>Compares the first <code>count</code> characters of the character strings <code>s1</code> and <code>s2</code>.	[http://en.cppreference.com/w/cpp/string/char_traits/compare Cppreference]
std::char_traits::copy	A										<pre><code>static char_type* copy( char_type* dest, const char_type* src, std::size_t count );</code></pre>Copies <code>count</code> character from character string pointed to by <code>src</code> to character string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/char_traits/copy Cppreference]
std::char_traits::find	A										<pre><code>static const char_type* find( const char_type* p, std::size_t count, const char_type& ch );</code></pre>Searches for character <code>ch</code> within the first <code>count</code> characters of the sequence pointed to by <code>p</code>.	[http://en.cppreference.com/w/cpp/string/char_traits/find Cppreference]
std::char_traits::length	A										<pre><code>static std::size_t length( const char_type* s );</code></pre>Returns the length of the character sequence pointed to by <code>s</code>, that is, the position of the terminating null character (<code>Char()</code>).	[http://en.cppreference.com/w/cpp/string/char_traits/length Cppreference]
std::char_traits::move	A										<pre><code>static char_type* move( char_type* dest, const char_type* src, std::size_t count );</code></pre>Copies <code>count</code> character from character string pointed to by <code>src</code> to character string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/char_traits/move Cppreference]
std::btowc	A										<pre><code>std::wint_t btowc( int c );</code></pre>Widens a single-byte character <code>c</code> to its wide character equivalent.	[http://en.cppreference.com/w/cpp/string/multibyte/btowc Cppreference]
std::c16rtomb	A										<pre><code>std::size_t c16rtomb( char* s, char16_t c16, std::mbstate_t* ps );</code></pre>Converts a 16-bit wide character to narrow multibyte character.	[http://en.cppreference.com/w/cpp/string/multibyte/c16rtomb Cppreference]
std::c32rtomb	A										<pre><code>std::size_t c32rtomb( char* s, char32_t c32, std::mbstate_t* ps );</code></pre>Converts a 32-bit wide character to its narrow multibyte representation.	[http://en.cppreference.com/w/cpp/string/multibyte/c32rtomb Cppreference]
std::mblen	A										<pre><code>int mblen( const char* s, std::size_t n );</code></pre>Determines the size, in bytes, of the multibyte character whose first byte is pointed to by <code>s</code>.	[http://en.cppreference.com/w/cpp/string/multibyte/mblen Cppreference]
std::mbrlen	A										<pre><code>std::size_t mbrlen( const char* s, std::size_t n, std::mbstate_t* ps);</code></pre>Determines the size, in bytes, of the remainder of the multibyte character whose first byte is pointed to by <code>s</code>, given the current conversion state <code>ps</code>.	[http://en.cppreference.com/w/cpp/string/multibyte/mbrlen Cppreference]
std::mbrtoc16	A										<pre><code>std::size_t mbrtoc16( char16_t* pc16,\\n                      const char* s,\\n                      std::size_t n,\\n                      std::mbstate_t* ps );</code></pre>Converts a narrow multibyte character to 16-bit character representation (typically, UTF-16).	[http://en.cppreference.com/w/cpp/string/multibyte/mbrtoc16 Cppreference]
std::mbrtoc32	A										<pre><code>std::size_t mbrtoc32( char32_t* pc32,\\n                      const char* s,\\n                      std::size_t n,\\n                      std::mbstate_t* ps );</code></pre>Converts a narrow multibyte character to its 32-bit character representation (typically, UTF-32).	[http://en.cppreference.com/w/cpp/string/multibyte/mbrtoc32 Cppreference]
std::mbrtowc	A										<pre><code>std::size_t mbrtowc( wchar_t* pwc,\\n                     const char* s,\\n                     std::size_t n,\\n                     std::mbstate_t* ps );</code></pre>Converts a narrow multibyte character to a wide character.	[http://en.cppreference.com/w/cpp/string/multibyte/mbrtowc Cppreference]
std::mbsinit	A										<pre><code>int mbsinit( const std::mbstate_t* ps);</code></pre>If <code>ps</code> is not a null pointer, the <code>mbsinit</code> function determines whether the pointed-to std::mbstate_t object describes the initial conversion state.	[http://en.cppreference.com/w/cpp/string/multibyte/mbsinit Cppreference]
std::mbsrtowcs	A										<pre><code>std::size_t mbsrtowcs( wchar_t* dst,\\n                       const char** src,\\n                       std::size_t len,\\n                       std::mbstate_t* ps );</code></pre>Converts a null-terminated multibyte character sequence, which begins in the conversion state described by <code>*ps</code>, from the array whose first element is pointed to by <code>*src</code> to its wide character...	[http://en.cppreference.com/w/cpp/string/multibyte/mbsrtowcs Cppreference]
std::mbstate_t	A										<pre><code>struct mbstate_t;</code></pre>The type mbstate_t is a trivial non-array type that can represent any of the conversion states that can occur in an implementation-defined set of supported multibyte character encoding rules.	[http://en.cppreference.com/w/cpp/string/multibyte/mbstate_t Cppreference]
std::mbstowcs	A										<pre><code>std::size_t mbstowcs( wchar_t* dst, const char* src, std::size_t len)</code></pre>Converts a multibyte character string from the array whose first element is pointed to by <code>src</code> to its wide character  representation.	[http://en.cppreference.com/w/cpp/string/multibyte/mbstowcs Cppreference]
std::mbtowc	A										<pre><code>int mbtowc( wchar_t* pwc, const char* s, std::size_t n )</code></pre>Converts a multibyte character whose first byte is pointed to by <code>s</code> to a wide character, written to <code>*pwc</code> if <code>pwc</code> is not null.	[http://en.cppreference.com/w/cpp/string/multibyte/mbtowc Cppreference]
std::wcrtomb	A										<pre><code>std::size_t wcrtomb( char* s, wchar_t wc, std::mbstate_t* ps );</code></pre>Converts a wide character to its narrow multibyte representation.	[http://en.cppreference.com/w/cpp/string/multibyte/wcrtomb Cppreference]
std::wcstombs	A										<pre><code>std::size_t wcstombs( char* dst, const wchar_t* src, std::size_t len)</code></pre>Converts a sequence of wide characters from the array whose first element is pointed to by <code>src</code> to its narrow multibyte representation that begins in the initial shift state.	[http://en.cppreference.com/w/cpp/string/multibyte/wcstombs Cppreference]
std::wctob	A										<pre><code>int wctob( std::wint_t c );</code></pre>Narrows a wide character <code>c</code> if its multibyte character equivalent in the initial shift state is a single byte.	[http://en.cppreference.com/w/cpp/string/multibyte/wctob Cppreference]
std::wctomb	A										<pre><code>int wctomb( char *s, wchar_t wc );</code></pre>Converts a wide character <code>wc</code> to multibyte encoding and stores it (including any shift sequences) in the char array whose first element is pointed to by <code>s</code>.	[http://en.cppreference.com/w/cpp/string/multibyte/wctomb Cppreference]
std::iswalnum	A										<pre><code>int iswalnum( std::wint_t ch );</code></pre>Checks if the given wide character is an alphanumeric character, i.e. either a number (<code>0123456789</code>), an uppercase letter , a lowercase letter  or any alphanumeric character specific to the current locale.	[http://en.cppreference.com/w/cpp/string/wide/iswalnum Cppreference]
std::iswalpha	A										<pre><code>int iswalpha( std::wint_t ch );</code></pre>Checks if the given wide character is an alphabetic character, i.e. either an uppercase letter , a lowercase letter  or any alphabetic character specific to the current locale.	[http://en.cppreference.com/w/cpp/string/wide/iswalpha Cppreference]
std::iswblank	A										<pre><code>int iswblank( std::wint_t ch );</code></pre>Checks if the given wide character is classified as blank character  by the current C locale.	[http://en.cppreference.com/w/cpp/string/wide/iswblank Cppreference]
std::iswcntrl	A										<pre><code>int iswcntrl( std::wint_t ch );</code></pre>Checks if the given wide character is a control character, i.e. codes <code>0x00-0x1F</code> and <code>0x7F</code> and any control characters specific to the current locale.	[http://en.cppreference.com/w/cpp/string/wide/iswcntrl Cppreference]
std::iswctype	A										<pre><code>int iswctype( std::wint_t ch, std::wctype_t desc );</code></pre>Classifies the wide character <code>wc</code> using the current C locale's LC_CTYPE category identified by <code>desc</code>.	[http://en.cppreference.com/w/cpp/string/wide/iswctype Cppreference]
std::iswdigit	A										<pre><code>int iswdigit( wint_t ch );</code></pre>Checks if the given wide character corresponds (if narrowed) to one of the ten decimal digit characters <code>0123456789</code>.	[http://en.cppreference.com/w/cpp/string/wide/iswdigit Cppreference]
std::iswgraph	A										<pre><code>int iswgraph( std::wint_t ch );</code></pre>Checks if the given wide character has a graphical representation.	[http://en.cppreference.com/w/cpp/string/wide/iswgraph Cppreference]
std::iswlower	A										<pre><code>int iswlower( std::wint_t ch );</code></pre>Checks if the given wide character is a lowercase letter, i.e. one of <code>abcdefghijklmnopqrstuvwxyz</code> or any lowercase letter specific to the current locale.	[http://en.cppreference.com/w/cpp/string/wide/iswlower Cppreference]
std::iswprint	A										<pre><code>int iswprint( std::wint_t ch );</code></pre>Checks if the given wide character can be printed.	[http://en.cppreference.com/w/cpp/string/wide/iswprint Cppreference]
std::iswpunct	A										<pre><code>int iswpunct( std::wint_t ch );</code></pre>Checks if the given wide character is a punctuation character, i.e. it is one of <code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code> or any punctuation character specific to the current locale.	[http://en.cppreference.com/w/cpp/string/wide/iswpunct Cppreference]
std::iswspace	A										<pre><code>int iswspace( wint_t ch );</code></pre>Checks if the given wide character is a whitespace character.	[http://en.cppreference.com/w/cpp/string/wide/iswspace Cppreference]
std::iswupper	A										<pre><code>int iswupper( std::wint_t ch );</code></pre>Checks if the given wide character is an uppercase letter, i.e. one of <code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code> or any uppercase letter specific to the current locale.	[http://en.cppreference.com/w/cpp/string/wide/iswupper Cppreference]
std::iswxdigit	A										<pre><code>int iswxdigit( wint_t ch );</code></pre>Checks if the given wide character corresponds (if narrowed) to a hexadecimal numeric character, i.e. one of <code>0123456789abcdefABCDEF</code>.	[http://en.cppreference.com/w/cpp/string/wide/iswxdigit Cppreference]
std::towctrans	A										<pre><code>std::wint_t towctrans( std::wint_t wc, std::wctrans_t desc );</code></pre>Maps the wide character <code>wc</code> using the current C locale's LC_CTYPE mapping category identified by <code>desc</code>.	[http://en.cppreference.com/w/cpp/string/wide/towctrans Cppreference]
std::towlower	A										<pre><code>std::wint_t towlower( std::wint_t ch );</code></pre>Converts the given wide character to lowercase, if possible.	[http://en.cppreference.com/w/cpp/string/wide/towlower Cppreference]
std::towupper	A										<pre><code>std::wint_t towupper( std::wint_t ch );</code></pre>Converts the given wide character to uppercase, if possible.	[http://en.cppreference.com/w/cpp/string/wide/towupper Cppreference]
std::wcscat	A										<pre><code>wchar_t *wcscat( wchar_t *dest, const wchar_t *src );</code></pre>Appends a wide string pointed to by <code>src</code> to a wide string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcscat Cppreference]
std::wcschr	A										<pre><code>const wchar_t* wcschr( const wchar_t* str, wchar_t ch );\\n< more overloads available ></code></pre>Finds the first occurrence of the wide character <code>ch</code> in the wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcschr Cppreference]
std::wcscmp	A										<pre><code>int wcscmp( const wchar_t* lhs, const wchar_t* rhs );</code></pre>Compares two null-terminated wide strings.	[http://en.cppreference.com/w/cpp/string/wide/wcscmp Cppreference]
std::wcscoll	A										<pre><code>int wcscoll( const wchar_t* lhs, const wchar_t* rhs );</code></pre>Compares two null-terminated wide strings according to the locale most recently installed by std::setlocale, as defined by the LC_COLLATE category.	[http://en.cppreference.com/w/cpp/string/wide/wcscoll Cppreference]
std::wcscpy	A										<pre><code>wchar_t *wcscpy( wchar_t *dest, const wchar_t *src );</code></pre>Copies the wide string pointed to by <code>src</code>  to wide character array pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcscpy Cppreference]
std::wcscspn	A										<pre><code>std::size_t wcscspn( const wchar_t* dest, const wchar_t* src );</code></pre>Returns the length of the maximum initial segment of the wide string pointed to by <code>dest</code>, that consists of only the characters <i>not</i> found in wide string pointed to by <code>src</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcscspn Cppreference]
std::wcslen	A										<pre><code>std::size_t wcslen( const wchar_t *str );</code></pre>Returns the length of a wide string, that is the number of non-null wide characters that precede the terminating null wide character.	[http://en.cppreference.com/w/cpp/string/wide/wcslen Cppreference]
std::wcsncat	A										<pre><code>wchar_t *wcsncat( wchar_t *dest, const wchar_t *src, std::size_t count );</code></pre>Appends a wide string pointed to by <code>src</code> to a wide string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcsncat Cppreference]
std::wcsncmp	A										<pre><code>int wcsncmp( const wchar_t* lhs, const wchar_t* rhs, size_t count );</code></pre>Compares at most <code>count</code> wide characters of two null-terminated wide strings.	[http://en.cppreference.com/w/cpp/string/wide/wcsncmp Cppreference]
std::wcsncpy	A										<pre><code>wchar_t *wcsncpy( wchar_t *dest, const wchar_t *src, std::size_t count );</code></pre>Copies at most <code>count</code> characters of the wide string pointed to by <code>src</code>  to wide character array pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcsncpy Cppreference]
std::wcspbrk	A										<pre><code>const wchar_t* wcspbrk( const wchar_t* dest, const wchar_t* str );\\n< more overloads available ></code></pre>Finds the first character in wide string pointed to by <code>dest</code>, that is also in wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcspbrk Cppreference]
std::wcsrchr	A										<pre><code>const wchar_t* wcsrchr( const wchar_t* str, wchar_t ch );\\n< more overloads available ></code></pre>Finds the last occurrence of the wide character <code>ch</code> in the wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcsrchr Cppreference]
std::wcsspn	A										<pre><code>size_t wcsspn( const wchar_t* dest, const wchar_t* src );</code></pre>Returns the length of the maximum initial segment of the wide string pointed to by <code>dest</code>, that consists of only the characters found in wide string pointed to by <code>src</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcsspn Cppreference]
std::wcsstr	A										<pre><code>const wchar_t* wcsstr( const wchar_t* dest, const wchar_t* src );\\n< more overloads available ></code></pre>Finds the first occurrence of the wide string <code>src</code> in the wide string pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcsstr Cppreference]
std::wcstod	A										<pre><code>double      wcstod( const wchar_t* str, wchar_t** str_end );</code></pre>Interprets a floating point value in a wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstof Cppreference]
std::wcstof	A										<pre><code>float       wcstof( const wchar_t* str, wchar_t** str_end );</code></pre>Interprets a floating point value in a wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstof Cppreference]
std::wcstold	A										<pre><code>long double wcstold( const wchar_t* str, wchar_t** str_end );</code></pre>Interprets a floating point value in a wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstof Cppreference]
std::wcstok	A										<pre><code>wchar_t* wcstok( wchar_t* str, const wchar_t* delim );</code></pre>Finds the next token in a null-terminated wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstok Cppreference]
std::wcstol	A										<pre><code>long      wcstol( const wchar_t* str, wchar_t** str_end, int base );\\n< more overloads available ></code></pre>Interprets an integer value in a wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstol Cppreference]
std::wcstoll	A										<pre><code>long long wcstoll( const wchar_t* str, wchar_t** str_end, int base );</code></pre>Interprets an integer value in a wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstol Cppreference]
std::wcstoul	A										<pre><code>unsigned long      wcstoul( const wchar_t* str, wchar_t** str_end, int base );\\n< more overloads available ></code></pre>Interprets an unsigned integer value in a wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstoul Cppreference]
std::wcstoull	A										<pre><code>unsigned long long wcstoull( const wchar_t* str, wchar_t** str_end, int base );</code></pre>Interprets an unsigned integer value in a wide string pointed to by <code>str</code>.	[http://en.cppreference.com/w/cpp/string/wide/wcstoul Cppreference]
std::wctrans	A										<pre><code>std::wctrans_t wctrans( const char* str );</code></pre>Constructs a value of type <code>std::wctrans_t</code> that describes a LC_CTYPE category of wide character mapping.	[http://en.cppreference.com/w/cpp/string/wide/wctrans Cppreference]
std::wctype	A										<pre><code>std::wctype_t wctype( const char* str );</code></pre>Constructs a value of type <code>std::wctype_t</code> that describes a LC_CTYPE category of wide character classification.	[http://en.cppreference.com/w/cpp/string/wide/wctype Cppreference]
std::wmemchr	A										<pre><code>const wchar_t* wmemchr( const wchar_t* ptr, wchar_t ch, std::size_t count );\\n< more overloads available ></code></pre>Locates the first occurrence of wide character <code>ch</code> in the initial <code>count</code> wide characters of the object pointed to by <code>ptr</code>.	[http://en.cppreference.com/w/cpp/string/wide/wmemchr Cppreference]
std::wmemcmp	A										<pre><code>int wmemcmp( const wchar_t* lhs, const wchar_t* rhs, std::size_t count );</code></pre>Compares the first <code>count</code> wide characters of the objects pointed to by <code>lhs</code> and <code>rhs</code>.	[http://en.cppreference.com/w/cpp/string/wide/wmemcmp Cppreference]
std::wmemcpy	A										<pre><code>wchar_t* wmemcpy( wchar_t* dest, const wchar_t* src, std::size_t count );</code></pre>Copies <code>count</code> wide characters from the object pointed to by <code>src</code> to the object pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wmemcpy Cppreference]
std::wmemmove	A										<pre><code>wchar_t* wmemmove( wchar_t* dest, const wchar_t* src, std::size_t count );</code></pre>Copies <code>count</code> wide characters from the object pointed to by <code>src</code> to the object pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wmemmove Cppreference]
std::wmemset	A										<pre><code>wchar_t* wmemset( wchar_t* dest, wchar_t ch, std::size_t count );</code></pre>Copies wide character <code>ch</code> into each of the first <code>count</code> wide characters of the object pointed to by <code>dest</code>.	[http://en.cppreference.com/w/cpp/string/wide/wmemset Cppreference]
std::async	A										<pre><code>template< class Function, class... Args>\\nstd::future<typename std::result_of<Function(Args...)>::type>\\n    async( Function&& f, Args&&... args );\\n< more overloads available ></code></pre>The template function <code>async</code> runs the function <code>f</code> asynchronously (potentially in a separate thread) and returns a std::future that will eventually hold the result of that function call.	[http://en.cppreference.com/w/cpp/thread/async Cppreference]
std::call_once	A										<pre><code>template< class Function, class... Args >\\nvoid call_once( std::once_flag& flag, Function&& f, Args&& args... );</code></pre>Executes the function <code>f</code> exactly once, even if called from several threads.	[http://en.cppreference.com/w/cpp/thread/call_once Cppreference]
std::condition_variable	A										<pre><code>class condition_variable;</code></pre>The <code>condition_variable</code> class is a synchronization primitive that can be used to block a thread, or multiple threads at the same time, until:...	[http://en.cppreference.com/w/cpp/thread/condition_variable Cppreference]
std::condition_variable::native_handle	A										<pre><code>native_handle_type native_handle();</code></pre>Accesses the native handle of <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/condition_variable/native_handle Cppreference]
std::condition_variable::notify_all	A										<pre><code>void notify_all();</code></pre>Unblocks all threads currently waiting for <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/condition_variable/notify_all Cppreference]
std::condition_variable::notify_one	A										<pre><code>void notify_one();</code></pre>If any threads are waiting on <code>*this</code>, calling <code>notify_one</code> unblocks one of the waiting threads.	[http://en.cppreference.com/w/cpp/thread/condition_variable/notify_one Cppreference]
std::condition_variable::wait	A										<pre><code>void wait( std::unique_lock<std::mutex>& lock );\\n< more overloads available ></code></pre><code>wait</code> causes the current thread to block until the condition variable is notified or a spurious wakeup occurs, optionally looping until some predicate is satisfied.	[http://en.cppreference.com/w/cpp/thread/condition_variable/wait Cppreference]
std::condition_variable::wait_until	A										<pre><code>template< class Clock, class Duration >\\nstd::cv_status wait_until( std::unique_lock<std::mutex>& lock,\\n                           const std::chrono::time_point<Clock, Duration>& timeout_time );\\n< more overloads available ></code></pre><code>wait_until</code> causes the current thread to block until the condition variable is notified, a specific time is reached, or a spurious wakeup occurs, optionally looping until some predicate is satisfied.	[http://en.cppreference.com/w/cpp/thread/condition_variable/wait_until Cppreference]
std::condition_variable_any	A										<pre><code>class condition_variable_any;</code></pre>The <code>condition_variable_any</code> class is a generalization of std::condition_variable.	[http://en.cppreference.com/w/cpp/thread/condition_variable_any Cppreference]
std::condition_variable_any::native_handle	A										<pre><code>native_handle_type native_handle();</code></pre>Accesses the native handle of <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/condition_variable_any/native_handle Cppreference]
std::condition_variable_any::notify_all	A										<pre><code>void notify_all();</code></pre>Unblocks all threads currently waiting for <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/condition_variable_any/notify_all Cppreference]
std::condition_variable_any::notify_one	A										<pre><code>void notify_one();</code></pre>If any threads are waiting on <code>*this</code>, calling <code>notify_one</code> unblocks one of the waiting threads.	[http://en.cppreference.com/w/cpp/thread/condition_variable_any/notify_one Cppreference]
std::condition_variable_any::wait	A										<pre><code>template< class Lock >\\nvoid wait( Lock& lock );\\n< more overloads available ></code></pre><code>wait</code> causes the current thread to block until the condition variable is notified or a spurious wakeup occurs, optionally looping until some predicate is satisfied.	[http://en.cppreference.com/w/cpp/thread/condition_variable_any/wait Cppreference]
std::condition_variable_any::wait_until	A										<pre><code>template< class Lock, class Clock, class Duration >\\nstd::cv_status wait_until( Lock& lock,\\n                           const std::chrono::time_point<Clock, Duration>& timeout_time );\\n< more overloads available ></code></pre><code>wait_until</code> causes the current thread to block until the condition variable is notified, a specific time is reached, or a spurious wakeup occurs, optionally looping until some predicate is satisfied.	[http://en.cppreference.com/w/cpp/thread/condition_variable_any/wait_until Cppreference]
std::future	A										<pre><code>template< class T > class future;\\n< more overloads available ></code></pre>The class template <code>std::future</code> provides a mechanism to access the result of asynchronous operations:...	[http://en.cppreference.com/w/cpp/thread/future Cppreference]
std::future_category	A										<pre><code>const std::error_category& future_category();</code></pre>Obtains a reference to the static error category object for future object errors.	[http://en.cppreference.com/w/cpp/thread/future/future_category Cppreference]
std::future::get	A										<pre><code>T get();\\n< more overloads available ></code></pre>The <code>get</code> method waits until the <code>future</code> has a valid result and (depending on which template is used) retrieves it.	[http://en.cppreference.com/w/cpp/thread/future/get Cppreference]
std::future::operator=	A										<pre><code>future& operator=( future&& other );\\n< more overloads available ></code></pre>Assigns the contents of another future object.	[http://en.cppreference.com/w/cpp/thread/future/operator= Cppreference]
std::future::share	A										<pre><code>std::shared_future<T> share();</code></pre>Transfers the shared state of <code>*this</code> to a std::shared_future object.	[http://en.cppreference.com/w/cpp/thread/future/share Cppreference]
std::future_category	A										<pre><code>const std::error_category& future_category();</code></pre>Obtains a reference to the static error category object for the errors related to futures and promises.	[http://en.cppreference.com/w/cpp/thread/future_category Cppreference]
std::future_error	A										<pre><code>class future_error;</code></pre>The class std::future_error defines an exception object that is thrown on failure by the functions in the thread library that deal with asynchronous execution and shared states (std::future,...	[http://en.cppreference.com/w/cpp/thread/future_error Cppreference]
std::future_error::code	A										<pre><code>const std::error_code& code() const;</code></pre>Returns the stored error code.	[http://en.cppreference.com/w/cpp/thread/future_error/code Cppreference]
std::future_error::what	A										<pre><code>virtual const char* what() const;</code></pre>Returns the explanatory string.	[http://en.cppreference.com/w/cpp/thread/future_error/what Cppreference]
std::this_thread::get_id	A										<pre><code>std::thread::id get_id();</code></pre>Returns the <i>id</i> of the current thread.	[http://en.cppreference.com/w/cpp/thread/get_id Cppreference]
std::lock	A										<pre><code>template< class Lockable1, class Lockable2, class LockableN... >\\nvoid lock( Lockable1& lock1, Lockable2& lock2, LockableN& lockn... );</code></pre>Locks the given <code>Lockable</code> objects <code>lock1</code>, <code>lock2</code>, <code>...</code>, <code>lockn</code> using a deadlock avoidance algorithm to avoid deadlock.	[http://en.cppreference.com/w/cpp/thread/lock Cppreference]
std::lock_guard	A										<pre><code>template< class Mutex >\\nclass lock_guard;</code></pre>The class <code>lock_guard</code> is a mutex wrapper that provides a convenient RAII-style mechanism for owning a mutex for the duration of a scoped block.	[http://en.cppreference.com/w/cpp/thread/lock_guard Cppreference]
std::adopt_lock_t	A										<pre><code>struct adopt_lock_t { };</code></pre><code>std::defer_lock_t</code>, <code>std::try_to_lock_t</code> and <code>std::adopt_lock_t</code> are empty struct tag types used to specify locking strategy for std::lock_guard, std::unique_lock and std::shared_lock.	[http://en.cppreference.com/w/cpp/thread/lock_tag_t Cppreference]
std::defer_lock_t	A										<pre><code>struct defer_lock_t { };</code></pre><code>std::defer_lock_t</code>, <code>std::try_to_lock_t</code> and <code>std::adopt_lock_t</code> are empty struct tag types used to specify locking strategy for std::lock_guard, std::unique_lock and std::shared_lock.	[http://en.cppreference.com/w/cpp/thread/lock_tag_t Cppreference]
std::try_to_lock_t	A										<pre><code>struct try_to_lock_t { };</code></pre><code>std::defer_lock_t</code>, <code>std::try_to_lock_t</code> and <code>std::adopt_lock_t</code> are empty struct tag types used to specify locking strategy for std::lock_guard, std::unique_lock and std::shared_lock.	[http://en.cppreference.com/w/cpp/thread/lock_tag_t Cppreference]
std::mutex	A										<pre><code>class mutex;</code></pre>The <code>mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.	[http://en.cppreference.com/w/cpp/thread/mutex Cppreference]
std::notify_all_at_thread_exit	A										<pre><code>void notify_all_at_thread_exit( std::condition_variable& cond,\\n                                std::unique_lock<std::mutex> lk );</code></pre><code>notify_all_at_thread_exit</code> provides a mechanism to notify other threads that a given thread has completely finished, including destroying all thread_local objects.	[http://en.cppreference.com/w/cpp/thread/notify_all_at_thread_exit Cppreference]
std::once_flag	A										<pre><code>class once_flag;</code></pre>The class <code>std::once_flag</code> is a helper structure for std::call_once.	[http://en.cppreference.com/w/cpp/thread/once_flag Cppreference]
std::packaged_task	A										<pre><code>template< class > class packaged_task; //not defined\\n< more overloads available ></code></pre>The class template <code>std::packaged_task</code> wraps any callable target  so that it can be invoked asynchronously.	[http://en.cppreference.com/w/cpp/thread/packaged_task Cppreference]
std::packaged_task::get_future	A										<pre><code>std::future<R> get_future();</code></pre>Returns a <code>future</code> which shares the same shared state as <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/packaged_task/get_future Cppreference]
std::packaged_task::make_ready_at_thread_exit	A										<pre><code>void make_ready_at_thread_exit( ArgTypes... );</code></pre>Calls the stored task with <code>args</code> as the arguments.	[http://en.cppreference.com/w/cpp/thread/packaged_task/make_ready_at_thread_exit Cppreference]
std::packaged_task::operator()	A										<pre><code>void operator()( ArgTypes... args );</code></pre>Calls the stored task with <code>args</code> as the arguments.	[http://en.cppreference.com/w/cpp/thread/packaged_task/operator() Cppreference]
std::packaged_task::reset	A										<pre><code>void reset();</code></pre>Resets the state abandoning the results of previous executions.	[http://en.cppreference.com/w/cpp/thread/packaged_task/reset Cppreference]
std::packaged_task::swap	A										<pre><code>void swap( packaged_task& other );</code></pre>Exchanges the shared states and stored tasks of <code>*this</code> and <code>other</code>.	[http://en.cppreference.com/w/cpp/thread/packaged_task/swap Cppreference]
std::packaged_task::valid	A										<pre><code>bool valid() const;</code></pre>Checks whether <code>*this</code> has a shared state.	[http://en.cppreference.com/w/cpp/thread/packaged_task/valid Cppreference]
std::promise	A										<pre><code>template< class T > class promise;\\n< more overloads available ></code></pre>The class template <code>std::promise</code> provides a facility to store a value that is later acquired asynchronously via a std::future object, that the <code>std::promise</code> can supply.	[http://en.cppreference.com/w/cpp/thread/promise Cppreference]
std::promise::get_future	A										<pre><code>std::future<R> get_future();</code></pre>Returns a future object associated with the same shared state as <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/promise/get_future Cppreference]
std::promise::operator=	A										<pre><code>promise& operator=( promise&& other );\\n< more overloads available ></code></pre>Assigns the contents.	[http://en.cppreference.com/w/cpp/thread/promise/operator= Cppreference]
std::promise::set_exception	A										<pre><code>void set_exception( std::exception_ptr p );</code></pre>Stores the exception pointer <code>p</code> into the shared state and makes the state ready.	[http://en.cppreference.com/w/cpp/thread/promise/set_exception Cppreference]
std::promise::set_exception_at_thread_exit	A										<pre><code>void set_exception_at_thread_exit( std::exception_ptr p );</code></pre>Stores the exception pointer <code>p</code> into the shared state without making the state ready immediately.	[http://en.cppreference.com/w/cpp/thread/promise/set_exception_at_thread_exit Cppreference]
std::promise::set_value	A										<pre><code>void set_value( const R& value );\\n< more overloads available ></code></pre>Stores the <code>value</code> into the shared state and makes the state ready.	[http://en.cppreference.com/w/cpp/thread/promise/set_value Cppreference]
std::promise::set_value_at_thread_exit	A										<pre><code>void set_value_at_thread_exit( const R& value );\\n< more overloads available ></code></pre>Stores the <code>value</code> into the shared state without making the state ready immediately.	[http://en.cppreference.com/w/cpp/thread/promise/set_value_at_thread_exit Cppreference]
std::promise::swap	A										<pre><code>void swap( promise& other );</code></pre>Exchanges the shared states of two promise objects.	[http://en.cppreference.com/w/cpp/thread/promise/swap Cppreference]
std::recursive_mutex	A										<pre><code>class recursive_mutex;</code></pre>The <code>recursive_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.	[http://en.cppreference.com/w/cpp/thread/recursive_mutex Cppreference]
std::recursive_timed_mutex	A										<pre><code>class recursive_timed_mutex;</code></pre>The <code>recursive_timed_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.	[http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex Cppreference]
std::shared_future::get	A										<pre><code>const T& get() const;\\n< more overloads available ></code></pre>The <code>get</code> method waits until the <code>shared_future</code> has a valid result and (depending on which template is used) retrieves it.	[http://en.cppreference.com/w/cpp/thread/shared_future/get Cppreference]
std::shared_future::operator=	A										<pre><code>shared_future& operator=(const shared_future& rhs);\\n< more overloads available ></code></pre>Constructs a new <code>shared_future</code>.	[http://en.cppreference.com/w/cpp/thread/shared_future/operator= Cppreference]
std::shared_lock	A										<pre><code>template< class Mutex >\\nclass shared_lock;</code></pre>The class <code>shared_lock</code> is a general-purpose shared mutex ownership wrapper allowing deferred locking, timed locking and transfer of lock ownership,...	[http://en.cppreference.com/w/cpp/thread/shared_lock Cppreference]
std::shared_mutex	A										<pre><code>class shared_mutex;</code></pre>The <code>shared_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.	[http://en.cppreference.com/w/cpp/thread/shared_mutex Cppreference]
std::this_thread::sleep_for	A										<pre><code>template< class Rep, class Period >\\nvoid sleep_for( const std::chrono::duration<Rep,Period>& sleep_duration );</code></pre>Blocks the execution of the current thread for <i>at least</i> the specified <code>sleep_duration</code>.	[http://en.cppreference.com/w/cpp/thread/sleep_for Cppreference]
std::this_thread::sleep_until	A										<pre><code>template< class Clock, class Duration >\\nvoid sleep_until( const std::chrono::time_point<Clock,Duration>& sleep_time );</code></pre>Blocks the execution of the current thread until specified <code>sleep_time</code> has been reached.	[http://en.cppreference.com/w/cpp/thread/sleep_until Cppreference]
std::thread	A										<pre><code>class thread;</code></pre>The class <code>thread</code> represents a single thread of execution.	[http://en.cppreference.com/w/cpp/thread/thread Cppreference]
std::thread::detach	A										<pre><code>void detach();</code></pre>Separates the thread of execution from the thread object, allowing execution to continue independently.	[http://en.cppreference.com/w/cpp/thread/thread/detach Cppreference]
std::thread::get_id	A										<pre><code>std::thread::id get_id() const;</code></pre>Returns a value of <code>std::thread::id</code> identifying the thread associated with <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/thread/get_id Cppreference]
std::thread::hardware_concurrency	A										<pre><code>static unsigned hardware_concurrency();</code></pre>Returns number of concurrent threads supported by the implementation.	[http://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency Cppreference]
std::thread::id	A										<pre><code>class thread::id;</code></pre>The class <code>thread::id</code> is a lightweight, trivially copyable class that serves as a unique identifier of std::thread objects.	[http://en.cppreference.com/w/cpp/thread/thread/id Cppreference]
std::thread::id::operator!=	A										<pre><code>bool operator!=( thread::id lhs, thread::id rhs );</code></pre>Compares two thread identifiers.	[http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp Cppreference]
std::thread::id::operator<	A										<pre><code>bool operator<( thread::id lhs, thread::id rhs );\\n< more overloads available ></code></pre>Compares two thread identifiers.	[http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp Cppreference]
std::thread::id::operator<=	A										<pre><code>bool operator<=( thread::id lhs, thread::id rhs );</code></pre>Compares two thread identifiers.	[http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp Cppreference]
std::thread::id::operator==	A										<pre><code>bool operator==( thread::id lhs, thread::id rhs );</code></pre>Compares two thread identifiers.	[http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp Cppreference]
std::thread::id::operator>	A										<pre><code>bool operator>( thread::id lhs, thread::id rhs );\\n< more overloads available ></code></pre>Compares two thread identifiers.	[http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp Cppreference]
std::thread::id::operator>=	A										<pre><code>bool operator>=( thread::id lhs, thread::id rhs );</code></pre>Compares two thread identifiers.	[http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp Cppreference]
std::thread::id::operator<<	A										<pre><code>template< class CharT, class Traits >\\nstd::basic_ostream<CharT,Traits>&\\n    operator<<( std::basic_ostream<CharT,Traits>&& ost, thread::id id );</code></pre>Writes a textual representation of a thread identifier <code>id</code> to the output stream <code>ost</code>.	[http://en.cppreference.com/w/cpp/thread/thread/id/operator_ltlt Cppreference]
std::thread::join	A										<pre><code>void join();</code></pre>Blocks the current thread until the thread identified by <code>*this</code> finishes its execution.	[http://en.cppreference.com/w/cpp/thread/thread/join Cppreference]
std::thread::joinable	A										<pre><code>bool joinable();</code></pre>Checks if the thread object identifies an active thread of execution.	[http://en.cppreference.com/w/cpp/thread/thread/joinable Cppreference]
std::thread::native_handle	A										<pre><code>native_handle_type native_handle();</code></pre>Returns the implementation defined underlying thread handle.	[http://en.cppreference.com/w/cpp/thread/thread/native_handle Cppreference]
std::thread::operator=	A										<pre><code>thread& operator=( thread&& other );</code></pre>Assigns the state of <code>other</code> to <code>*this</code> using move semantics.	[http://en.cppreference.com/w/cpp/thread/thread/operator= Cppreference]
std::thread::swap	A										<pre><code>void swap( thread& other );</code></pre>Exchanges the underlying handles of two thread objects.	[http://en.cppreference.com/w/cpp/thread/thread/swap Cppreference]
std::timed_mutex	A										<pre><code>class timed_mutex;</code></pre>The <code>timed_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.	[http://en.cppreference.com/w/cpp/thread/timed_mutex Cppreference]
std::try_lock	A										<pre><code>template< class Lockable1, class Lockable2, class LockableN... >\\nint try_lock( Lockable1& lock1, Lockable2& lock2, LockableN& lockn... );</code></pre>Tries to lock each of the given <code>Lockable</code> objects <code>lock1</code>, <code>lock2</code>, <code>...</code>, <code>lockn</code> by calling <code>try_lock</code> in order beginning with the first.	[http://en.cppreference.com/w/cpp/thread/try_lock Cppreference]
std::unique_lock	A										<pre><code>template< class Mutex >\\nclass unique_lock;</code></pre>The class <code>unique_lock</code> is a general-purpose mutex ownership wrapper allowing deferred locking, timed locking, recursive locking, transfer of lock ownership, and use with condition variables.	[http://en.cppreference.com/w/cpp/thread/unique_lock Cppreference]
std::unique_lock::lock	A										<pre><code>void lock();</code></pre>Locks the associated mutex.	[http://en.cppreference.com/w/cpp/thread/unique_lock/lock Cppreference]
std::unique_lock::mutex	A										<pre><code>mutex_type* mutex() const;</code></pre>Returns a pointer to the associated mutex, or a null pointer if there is no associated mutex.	[http://en.cppreference.com/w/cpp/thread/unique_lock/mutex Cppreference]
std::unique_lock::operator=	A										<pre><code>unique_lock& operator=( unique_lock&& other );</code></pre>Move assignment operator.	[http://en.cppreference.com/w/cpp/thread/unique_lock/operator= Cppreference]
std::unique_lock::owns_lock	A										<pre><code>bool owns_lock() const;</code></pre>Checks whether <code>*this</code> owns a locked mutex or not.	[http://en.cppreference.com/w/cpp/thread/unique_lock/owns_lock Cppreference]
std::unique_lock::release	A										<pre><code>mutex_type* release();</code></pre>Breaks the association of the associated mutex, if any, and <code>*this</code>.	[http://en.cppreference.com/w/cpp/thread/unique_lock/release Cppreference]
std::unique_lock::swap	A										<pre><code>template< class Mutex >\\nvoid swap( unique_lock<Mutex>& other );</code></pre>Exchanges the internal states of the lock objects.	[http://en.cppreference.com/w/cpp/thread/unique_lock/swap Cppreference]
std::unique_lock::try_lock	A										<pre><code>bool try_lock();</code></pre>Tries to lock the associated mutex without blocking.	[http://en.cppreference.com/w/cpp/thread/unique_lock/try_lock Cppreference]
std::unique_lock::try_lock_for	A										<pre><code>template< class Rep, class Period >\\nbool try_lock_for( const std::chrono::duration<Rep,Period>& timeout_duration );</code></pre>Tries to lock the associated mutex.	[http://en.cppreference.com/w/cpp/thread/unique_lock/try_lock_for Cppreference]
std::unique_lock::try_lock_until	A										<pre><code>template< class Clock, class Duration >\\nbool try_lock_until( const std::chrono::time_point<Clock,Duration>& timeout_time );</code></pre>Tries to lock the associated mutex.	[http://en.cppreference.com/w/cpp/thread/unique_lock/try_lock_until Cppreference]
std::unique_lock::unlock	A										<pre><code>void unlock();</code></pre>Unlocks the associated mutex.	[http://en.cppreference.com/w/cpp/thread/unique_lock/unlock Cppreference]
std::this_thread::yield	A										<pre><code>void yield();</code></pre>Provides a hint to the implementation to reschedule the execution of threads, allowing other threads to run.	[http://en.cppreference.com/w/cpp/thread/yield Cppreference]
std::add_const	A										<pre><code>template< class T >\\nstruct add_const;</code></pre>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except it has a cv-qualifier added...	[http://en.cppreference.com/w/cpp/types/add_cv Cppreference]
std::add_cv	A										<pre><code>template< class T >\\nstruct add_cv;</code></pre>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except it has a cv-qualifier added...	[http://en.cppreference.com/w/cpp/types/add_cv Cppreference]
std::add_volatile	A										<pre><code>template< class T >\\nstruct add_volatile;</code></pre>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except it has a cv-qualifier added...	[http://en.cppreference.com/w/cpp/types/add_cv Cppreference]
std::add_pointer	A										<pre><code>template< class T >\\nstruct add_pointer;</code></pre>Provides the member typedef <code>type</code> which is the type <code>T*</code>.	[http://en.cppreference.com/w/cpp/types/add_pointer Cppreference]
std::add_lvalue_reference	A										<pre><code>template< class T >\\nstruct add_lvalue_reference;</code></pre>1) If <code>T</code> is an object or function, provides a member typedef <code>type</code> which is <code>T&amp;</code>.	[http://en.cppreference.com/w/cpp/types/add_reference Cppreference]
std::add_rvalue_reference	A										<pre><code>template< class T >\\nstruct add_rvalue_reference;</code></pre>1) If <code>T</code> is an object or function, provides a member typedef <code>type</code> which is <code>T&amp;</code>.	[http://en.cppreference.com/w/cpp/types/add_reference Cppreference]
std::aligned_storage	A										<pre><code>template< std::size_t Len, std::size_t Align = /*default-alignment*/ >\\nstruct aligned_storage;</code></pre>Provides the member typedef <code>type</code>, which is a POD type suitable for use as uninitialized storage for any object whose size is at most <code>Len</code> and whose alignment requirement is a divisor of <code>Align</code>.	[http://en.cppreference.com/w/cpp/types/aligned_storage Cppreference]
std::aligned_union	A										<pre><code>template< std::size_t Len, class... Types >\\nstruct aligned_union;</code></pre>Provides the member typedef <code>type</code>, which is a POD type suitable for use as uninitialized storage, correctly aligned for an object of any of the types listed in <code>Types</code>.	[http://en.cppreference.com/w/cpp/types/aligned_union Cppreference]
std::alignment_of	A										<pre><code>template< class T >\\nstruct alignment_of;</code></pre>Provides the member constant <code>value</code> equal to the alignment requirement of the type <code>T</code>, as if obtained by an <code>alignof</code> expression.	[http://en.cppreference.com/w/cpp/types/alignment_of Cppreference]
std::bad_cast	A										<pre><code>class bad_cast : public std::exception;</code></pre>An exception of this type is thrown when a dynamic_cast to a reference type fails the run-time check .	[http://en.cppreference.com/w/cpp/types/bad_cast Cppreference]
std::bad_typeid	A										<pre><code>class bad_typeid : public std::exception;</code></pre>An exception of this type is thrown when a typeid operator is applied to a dereferenced null pointer value or a polymorphic type.	[http://en.cppreference.com/w/cpp/types/bad_typeid Cppreference]
std::common_type	A										<pre><code>template< class... T >\\nstruct common_type;</code></pre>Determines the common type among all types <code>T...</code>, that is the type all <code>T...</code> can be implicitly converted to.	[http://en.cppreference.com/w/cpp/types/common_type Cppreference]
std::conditional	A										<pre><code>template< bool B, class T, class F >\\nstruct conditional;</code></pre>Provides member typedef <code>type</code>, which is defined as <code>T</code> if <code>B</code> is <code>true</code> at compile time, or as <code>F</code> if <code>B</code> is <code>false</code>.	[http://en.cppreference.com/w/cpp/types/conditional Cppreference]
std::decay	A										<pre><code>template< class T >\\nstruct decay;</code></pre>Applies lvalue-to-rvalue, array-to-pointer, and function-to-pointer implicit conversions to the type <code>T</code>, removes cv-qualifiers, and defines the resulting type as the member typedef <code>type</code>.	[http://en.cppreference.com/w/cpp/types/decay Cppreference]
std::enable_if	A										<pre><code>template< bool B, class T = void >\\nstruct enable_if;</code></pre>If <code>B</code> is <code>true</code>, std::enable_if has a public member typedef <code>type</code>, equal to <code>T</code>; otherwise, there is no member typedef.	[http://en.cppreference.com/w/cpp/types/enable_if Cppreference]
std::extent	A										<pre><code>template< class T, unsigned N = 0>\\nstruct extent;</code></pre>If <code>T</code> is an array type, provides the member constant <code>value</code> equal to the number of elements along the <code>N</code>th dimension of the array, if <code>N</code> is in <code>[0, std::rank&lt;T&gt;::value)</code>.	[http://en.cppreference.com/w/cpp/types/extent Cppreference]
std::has_virtual_destructor	A										<pre><code>template< class T >\\nstruct has_virtual_destructor;</code></pre>If <code>T</code> is a type with a virtual destructor, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/has_virtual_destructor Cppreference]
std::integral_constant	A										<pre><code>template< class T, T v >\\nstruct integral_constant;</code></pre>std::integral_constant wraps a static constant of specified type.	[http://en.cppreference.com/w/cpp/types/integral_constant Cppreference]
std::is_abstract	A										<pre><code>template< class T >\\nstruct is_abstract;</code></pre>If <code>T</code> is an abstract class , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_abstract Cppreference]
std::is_arithmetic	A										<pre><code>template< class T >\\nstruct is_arithmetic;</code></pre>If <code>T</code> is an arithmetic type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_arithmetic Cppreference]
std::is_array	A										<pre><code>template< class T >\\nstruct is_array;</code></pre>Checks whether <code>T</code> is an array type.	[http://en.cppreference.com/w/cpp/types/is_array Cppreference]
std::is_assignable	A										<pre><code>template< class T, class U >\\nstruct is_assignable;</code></pre>1) If the expression <code>std::declval&lt;T&gt;() = std::declval&lt;U&gt;()</code> is well-formed in unevaluated context, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_assignable Cppreference]
std::is_nothrow_assignable	A										<pre><code>template< class T, class U >\\nstruct is_nothrow_assignable;</code></pre>1) If the expression <code>std::declval&lt;T&gt;() = std::declval&lt;U&gt;()</code> is well-formed in unevaluated context, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_assignable Cppreference]
std::is_trivially_assignable	A										<pre><code>template< class T, class U >\\nstruct is_trivially_assignable;</code></pre>1) If the expression <code>std::declval&lt;T&gt;() = std::declval&lt;U&gt;()</code> is well-formed in unevaluated context, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_assignable Cppreference]
std::is_base_of	A										<pre><code>template< class Base, class Derived >\\nstruct is_base_of;</code></pre>If <code>Derived</code> is derived from <code>Base</code> or if both are the same non-union class, provides the member constant <code>value</code> equal to <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_base_of Cppreference]
std::is_class	A										<pre><code>template< class T >\\nstruct is_class;</code></pre>Checks whether <code>T</code> is an class or struct type.	[http://en.cppreference.com/w/cpp/types/is_class Cppreference]
std::is_compound	A										<pre><code>template< class T >\\nstruct is_compound;</code></pre>If <code>T</code> is a compound type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_compound Cppreference]
std::is_const	A										<pre><code>template< class T >\\nstruct is_const;</code></pre>If <code>T</code> is a const-qualified type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_const Cppreference]
std::is_constructible	A										<pre><code>template< class T, class... Args >\\nstruct is_constructible;</code></pre>1) If the expression <code>T obj(arg1, arg2, ... argN);</code> is well-formed, given rvalue references to <code>Args...</code> as arguments, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_constructible Cppreference]
std::is_nothrow_constructible	A										<pre><code>template< class T, class... Args >\\nstruct is_nothrow_constructible;</code></pre>1) If the expression <code>T obj(arg1, arg2, ... argN);</code> is well-formed, given rvalue references to <code>Args...</code> as arguments, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_constructible Cppreference]
std::is_trivially_constructible	A										<pre><code>template< class T, class... Args >\\nstruct is_trivially_constructible;</code></pre>1) If the expression <code>T obj(arg1, arg2, ... argN);</code> is well-formed, given rvalue references to <code>Args...</code> as arguments, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_constructible Cppreference]
std::is_convertible	A										<pre><code>template< class From, class To >\\nstruct is_convertible;</code></pre>If an imaginary rvalue of type <code>From</code> can be used in the return statement of a function returning <code>To</code>.	[http://en.cppreference.com/w/cpp/types/is_convertible Cppreference]
std::is_copy_assignable	A										<pre><code>template< class T >\\nstruct is_copy_assignable;</code></pre>1) Checks whether a type is <code>CopyAssignable</code>, i.e. has an accessible explicit or implicit copy assignment operator.	[http://en.cppreference.com/w/cpp/types/is_copy_assignable Cppreference]
std::is_nothrow_copy_assignable	A										<pre><code>template< class T >\\nstruct is_nothrow_copy_assignable;</code></pre>1) Checks whether a type is <code>CopyAssignable</code>, i.e. has an accessible explicit or implicit copy assignment operator.	[http://en.cppreference.com/w/cpp/types/is_copy_assignable Cppreference]
std::is_trivially_copy_assignable	A										<pre><code>template< class T >\\nstruct is_trivially_copy_assignable;</code></pre>1) Checks whether a type is <code>CopyAssignable</code>, i.e. has an accessible explicit or implicit copy assignment operator.	[http://en.cppreference.com/w/cpp/types/is_copy_assignable Cppreference]
std::is_copy_constructible	A										<pre><code>template< class T >\\nstruct is_copy_constructible;</code></pre>1) Checks whether a type is <code>CopyConstructible</code>, i.e. has an accessible explicit or implicit copy constructor.	[http://en.cppreference.com/w/cpp/types/is_copy_constructible Cppreference]
std::is_nothrow_copy_constructible	A										<pre><code>template< class T >\\nstruct is_nothrow_copy_constructible;</code></pre>1) Checks whether a type is <code>CopyConstructible</code>, i.e. has an accessible explicit or implicit copy constructor.	[http://en.cppreference.com/w/cpp/types/is_copy_constructible Cppreference]
std::is_trivially_copy_constructible	A										<pre><code>template< class T >\\nstruct is_trivially_copy_constructible;</code></pre>1) Checks whether a type is <code>CopyConstructible</code>, i.e. has an accessible explicit or implicit copy constructor.	[http://en.cppreference.com/w/cpp/types/is_copy_constructible Cppreference]
std::is_default_constructible	A										<pre><code>template< class T >\\nstruct is_default_constructible;</code></pre>1) Checks whether a type is <code>DefaultConstructible</code>, i.e. has an accessible explicit or implicit default constructor.	[http://en.cppreference.com/w/cpp/types/is_default_constructible Cppreference]
std::is_nothrow_default_constructible	A										<pre><code>template< class T >\\nstruct is_nothrow_default_constructible;</code></pre>1) Checks whether a type is <code>DefaultConstructible</code>, i.e. has an accessible explicit or implicit default constructor.	[http://en.cppreference.com/w/cpp/types/is_default_constructible Cppreference]
std::is_trivially_default_constructible	A										<pre><code>template< class T >\\nstruct is_trivially_default_constructible;</code></pre>1) Checks whether a type is <code>DefaultConstructible</code>, i.e. has an accessible explicit or implicit default constructor.	[http://en.cppreference.com/w/cpp/types/is_default_constructible Cppreference]
std::is_destructible	A										<pre><code>template< class T >\\nstruct is_destructible;</code></pre>1) If an imaginary struct containing a member object of type <code>T</code> has a non-deleted destructor, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_destructible Cppreference]
std::is_nothrow_destructible	A										<pre><code>template< class T >\\nstruct is_nothrow_destructible;</code></pre>1) If an imaginary struct containing a member object of type <code>T</code> has a non-deleted destructor, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_destructible Cppreference]
std::is_trivially_destructible	A										<pre><code>template< class T >\\nstruct is_trivially_destructible;</code></pre>1) If an imaginary struct containing a member object of type <code>T</code> has a non-deleted destructor, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_destructible Cppreference]
std::is_empty	A										<pre><code>template< class T >\\nstruct is_empty;</code></pre>If <code>T</code> is en empty type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_empty Cppreference]
std::is_enum	A										<pre><code>template< class T >\\nstruct is_enum;</code></pre>Checks whether <code>T</code> is an enumeration type.	[http://en.cppreference.com/w/cpp/types/is_enum Cppreference]
std::is_floating_point	A										<pre><code>template< class T >\\nstruct is_floating_point;</code></pre>Checks whether <code>T</code> is an floating-point type.	[http://en.cppreference.com/w/cpp/types/is_floating_point Cppreference]
std::is_function	A										<pre><code>template< class T >\\nstruct is_function;</code></pre>Checks whether <code>T</code> is a function type (not std::function).	[http://en.cppreference.com/w/cpp/types/is_function Cppreference]
std::is_fundamental	A										<pre><code>template< class T >\\nstruct is_fundamental;</code></pre>If <code>T</code> is a fundamental type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_fundamental Cppreference]
std::is_integral	A										<pre><code>template< class T >\\nstruct is_integral;</code></pre>Checks whether <code>T</code> is an integral type.	[http://en.cppreference.com/w/cpp/types/is_integral Cppreference]
std::is_literal_type	A										<pre><code>template< class T >\\nstruct is_literal_type;</code></pre>If <code>T</code> is a literal type, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_literal_type Cppreference]
std::is_lvalue_reference	A										<pre><code>template< class T >\\nstruct is_lvalue_reference;</code></pre>Checks whether <code>T</code> is a lvalue reference type.	[http://en.cppreference.com/w/cpp/types/is_lvalue_reference Cppreference]
std::is_member_function_pointer	A										<pre><code>template< class T >\\nstruct is_member_function_pointer;</code></pre>Checks whether <code>T</code> is a non-static member function pointer.	[http://en.cppreference.com/w/cpp/types/is_member_function_pointer Cppreference]
std::is_member_object_pointer	A										<pre><code>template< class T >\\nstruct is_member_object_pointer;</code></pre>Checks whether <code>T</code> is a non-static member object.	[http://en.cppreference.com/w/cpp/types/is_member_object_pointer Cppreference]
std::is_member_pointer	A										<pre><code>template< class T >\\nstruct is_member_pointer;</code></pre>If <code>T</code> is pointer to non-static member object or a pointer to non-static member function, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_member_pointer Cppreference]
std::is_move_assignable	A										<pre><code>template< class T >\\nstruct is_move_assignable;</code></pre>1) Checks whether a type is <code>MoveAssignable</code>, i.e. has an accessible explicit or implicit move assignment operator.	[http://en.cppreference.com/w/cpp/types/is_move_assignable Cppreference]
std::is_nothrow_move_assignable	A										<pre><code>template< class T >\\nstruct is_nothrow_move_assignable;</code></pre>1) Checks whether a type is <code>MoveAssignable</code>, i.e. has an accessible explicit or implicit move assignment operator.	[http://en.cppreference.com/w/cpp/types/is_move_assignable Cppreference]
std::is_trivially_move_assignable	A										<pre><code>template< class T >\\nstruct is_trivially_move_assignable;</code></pre>1) Checks whether a type is <code>MoveAssignable</code>, i.e. has an accessible explicit or implicit move assignment operator.	[http://en.cppreference.com/w/cpp/types/is_move_assignable Cppreference]
std::is_move_constructible	A										<pre><code>template< class T >\\nstruct is_move_constructible;</code></pre>1) Checks whether a type is <code>MoveConstructible</code>, i.e. has an accessible explicit or implicit move constructor.	[http://en.cppreference.com/w/cpp/types/is_move_constructible Cppreference]
std::is_nothrow_move_constructible	A										<pre><code>template< class T >\\nstruct is_nothrow_move_constructible;</code></pre>1) Checks whether a type is <code>MoveConstructible</code>, i.e. has an accessible explicit or implicit move constructor.	[http://en.cppreference.com/w/cpp/types/is_move_constructible Cppreference]
std::is_trivially_move_constructible	A										<pre><code>template< class T >\\nstruct is_trivially_move_constructible;</code></pre>1) Checks whether a type is <code>MoveConstructible</code>, i.e. has an accessible explicit or implicit move constructor.	[http://en.cppreference.com/w/cpp/types/is_move_constructible Cppreference]
std::is_object	A										<pre><code>template< class T >\\nstruct is_object;</code></pre>If <code>T</code> is an object type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_object Cppreference]
std::is_pod	A										<pre><code>template< class T >\\nstruct is_pod;</code></pre>If <code>T</code> is a <code>PODType</code> ("plain old data type"), that is, both trivial and standard-layout, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_pod Cppreference]
std::is_pointer	A										<pre><code>template< class T >\\nstruct is_pointer;</code></pre>Checks whether <code>T</code> is an object pointer type .	[http://en.cppreference.com/w/cpp/types/is_pointer Cppreference]
std::is_polymorphic	A										<pre><code>template< class T >\\nstruct is_polymorphic;</code></pre>If <code>T</code> is a polymorphic class , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_polymorphic Cppreference]
std::is_reference	A										<pre><code>template< class T >\\nstruct is_reference;</code></pre>If <code>T</code> is a reference type (lvalue reference or rvalue reference), provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_reference Cppreference]
std::is_rvalue_reference	A										<pre><code>template< class T >\\nstruct is_rvalue_reference;</code></pre>Checks whether <code>T</code> is a rvalue reference type.	[http://en.cppreference.com/w/cpp/types/is_rvalue_reference Cppreference]
std::is_same	A										<pre><code>template< class T, class U >\\nstruct is_same;</code></pre>If <code>T</code> and <code>U</code> name the same type with the same const-volatile qualifications, provides the member constant <code>value</code> equal to <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_same Cppreference]
std::is_scalar	A										<pre><code>template< class T >\\nstruct is_scalar;</code></pre>If <code>T</code> is a scalar type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_scalar Cppreference]
std::is_signed	A										<pre><code>template< class T >\\nstruct is_signed;</code></pre>If <code>T</code> is a signed arithmetic type, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_signed Cppreference]
std::is_standard_layout	A										<pre><code>template< class T >\\nstruct is_standard_layout;</code></pre>If <code>T</code> is a standard layout type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_standard_layout Cppreference]
std::is_trivial	A										<pre><code>template< class T >\\nstruct is_trivial;</code></pre>If <code>T</code> is a trivial type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_trivial Cppreference]
std::is_trivially_copyable	A										<pre><code>template< class T >\\nstruct is_trivially_copyable;</code></pre>If <code>T</code> is a trivially copyable type, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_trivially_copyable Cppreference]
std::is_union	A										<pre><code>template< class T >\\nstruct is_union;</code></pre>Checks whether <code>T</code> is an union type.	[http://en.cppreference.com/w/cpp/types/is_union Cppreference]
std::is_unsigned	A										<pre><code>template< class T >\\nstruct is_unsigned;</code></pre>If <code>T</code> is an unsigned arithmetic type, provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_unsigned Cppreference]
std::is_void	A										<pre><code>template< class T >\\nstruct is_void;</code></pre>Checks whether <code>T</code> is a void type.	[http://en.cppreference.com/w/cpp/types/is_void Cppreference]
std::is_volatile	A										<pre><code>template< class T >\\nstruct is_volatile;</code></pre>If <code>T</code> is a volatile-qualified type , provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/types/is_volatile Cppreference]
std::make_signed	A										<pre><code>template< class T >\\nstruct make_signed;</code></pre>Given an integral (except bool) or enumeration type <code>T</code>, provides the member typedef <code>type</code> which is the signed integer type corresponding to <code>T</code>, with the same cv-qualifiers.	[http://en.cppreference.com/w/cpp/types/make_signed Cppreference]
std::make_unsigned	A										<pre><code>template< class T >\\nstruct make_unsigned;</code></pre>Given an integral (except bool) or enumeration type <code>T</code>, provides the member typedef <code>type</code> which is the unsigned integer type corresponding to <code>T</code>, with the same cv-qualifiers.	[http://en.cppreference.com/w/cpp/types/make_unsigned Cppreference]
std::numeric_limits	A										<pre><code>template< class T > class numeric_limits;</code></pre>The <code>numeric_limits</code> class template provides a standardized way to query various properties of fundamental types .	[http://en.cppreference.com/w/cpp/types/numeric_limits Cppreference]
std::numeric_limits::lowest	A										<pre><code>static constexpr T lowest()</code></pre>Returns the lowest finite value representable by the numeric type <code>T</code>, that is, a finite value <code>x</code> such that there is no other finite value <code>y</code> where <code>y &lt; x</code>.	[http://en.cppreference.com/w/cpp/types/numeric_limits/lowest Cppreference]
offsetof	A										<pre><code>#define offsetof(type, member) /*implementation-defined*/</code></pre>The macro offsetof expands to a constant of type std::size_t, the value of which is the offset, in bytes, from the beginning of an object of specified type to its specified member, including padding...	[http://en.cppreference.com/w/cpp/types/offsetof Cppreference]
std::rank	A										<pre><code>template< class T >\\nstruct rank;</code></pre>If <code>T</code> is an array type, provides the member constant <code>value</code> equal to the number of dimensions of the array.	[http://en.cppreference.com/w/cpp/types/rank Cppreference]
std::remove_all_extents	A										<pre><code>template< class T >\\nstruct remove_all_extents;</code></pre>If <code>T</code> is a multidimensional array of some type <code>X</code>, provides the member typedef <code>type</code> equal to <code>X</code>, otherwise <code>type</code> is <code>T</code>.	[http://en.cppreference.com/w/cpp/types/remove_all_extents Cppreference]
std::remove_const	A										<pre><code>template< class T >\\nstruct remove_const;</code></pre>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except that its topmost cv-qualifiers are removed.	[http://en.cppreference.com/w/cpp/types/remove_cv Cppreference]
std::remove_cv	A										<pre><code>template< class T >\\nstruct remove_cv;</code></pre>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except that its topmost cv-qualifiers are removed.	[http://en.cppreference.com/w/cpp/types/remove_cv Cppreference]
std::remove_volatile	A										<pre><code>template< class T >\\nstruct remove_volatile;</code></pre>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except that its topmost cv-qualifiers are removed.	[http://en.cppreference.com/w/cpp/types/remove_cv Cppreference]
std::remove_extent	A										<pre><code>template< class T >\\nstruct remove_extent;</code></pre>If <code>T</code> is an array of some type <code>X</code>, provides the member typedef <code>type</code> equal to <code>X</code>, otherwise <code>type</code> is <code>T</code>.	[http://en.cppreference.com/w/cpp/types/remove_extent Cppreference]
std::remove_pointer	A										<pre><code>template< class T >\\nstruct remove_pointer;</code></pre>Provides the member typedef <code>type</code> which is the type pointed to by <code>T</code>, or, if <code>T</code> is not a pointer, then <code>type</code> is the same as <code>T</code>.	[http://en.cppreference.com/w/cpp/types/remove_pointer Cppreference]
std::remove_reference	A										<pre><code>template< class T >\\nstruct remove_reference;</code></pre>If the type <code>T</code> is a reference type, provides the member typedef <code>type</code> which is the type, referred to by <code>T</code>.	[http://en.cppreference.com/w/cpp/types/remove_reference Cppreference]
std::result_of	A										<pre><code>template< class >\\nclass result_of; //not defined\\n< more overloads available ></code></pre>Deduces the return type of a function call expression at compile time.	[http://en.cppreference.com/w/cpp/types/result_of Cppreference]
std::type_index	A										<pre><code>class type_index;</code></pre>The <code>type_index</code> class is a wrapper class around a std::type_info object, that can be used as index in associative and unordered associative containers.	[http://en.cppreference.com/w/cpp/types/type_index Cppreference]
std::type_index::hash_code	A										<pre><code>size_t hash_code() const;</code></pre>Returns the hash code of the associated std::type_info object.	[http://en.cppreference.com/w/cpp/types/type_index/hash_code Cppreference]
std::type_index::name	A										<pre><code>const char *name() const;</code></pre>Returns the name of the associated std::type_info object.	[http://en.cppreference.com/w/cpp/types/type_index/name Cppreference]
std::type_index::operator!=	A										<pre><code>bool operator!=( const type_index& rhs ) const;</code></pre>Compares the underlying std::type_info objects.	[http://en.cppreference.com/w/cpp/types/type_index/operator_cmp Cppreference]
std::type_index::operator<	A										<pre><code>bool operator<( const type_index& rhs ) const;\\n< more overloads available ></code></pre>Compares the underlying std::type_info objects.	[http://en.cppreference.com/w/cpp/types/type_index/operator_cmp Cppreference]
std::type_index::operator<=	A										<pre><code>bool operator<=( const type_index& rhs ) const;</code></pre>Compares the underlying std::type_info objects.	[http://en.cppreference.com/w/cpp/types/type_index/operator_cmp Cppreference]
std::type_index::operator==	A										<pre><code>bool operator==( const type_index& rhs ) const;</code></pre>Compares the underlying std::type_info objects.	[http://en.cppreference.com/w/cpp/types/type_index/operator_cmp Cppreference]
std::type_index::operator>	A										<pre><code>bool operator>( const type_index& rhs ) const;\\n< more overloads available ></code></pre>Compares the underlying std::type_info objects.	[http://en.cppreference.com/w/cpp/types/type_index/operator_cmp Cppreference]
std::type_index::operator>=	A										<pre><code>bool operator>=( const type_index& rhs ) const;</code></pre>Compares the underlying std::type_info objects.	[http://en.cppreference.com/w/cpp/types/type_index/operator_cmp Cppreference]
std::type_info	A										<pre><code>class type_info;</code></pre>The class <code>type_info</code> holds implementation-specific information about a type, including the name of the type and means to compare two types for equality or collating order.	[http://en.cppreference.com/w/cpp/types/type_info Cppreference]
std::type_info::before	A										<pre><code>bool before( const type_info& rhs );</code></pre>Returns <code>true</code> if the referred type precedes type, referred to by <code>rhs</code> in the implementation's collation order.	[http://en.cppreference.com/w/cpp/types/type_info/before Cppreference]
std::type_info::hash_code	A										<pre><code>size_t hash_code() const;</code></pre>Returns an unspecified value, which is identical for objects, referring to the same type.	[http://en.cppreference.com/w/cpp/types/type_info/hash_code Cppreference]
std::type_info::name	A										<pre><code>const char* name() const;</code></pre>Returns an implementation defined null-terminated character string containing the name of the type.	[http://en.cppreference.com/w/cpp/types/type_info/name Cppreference]
std::type_info::operator!=	A										<pre><code>bool operator!=( const type_info& rhs ) const;</code></pre>Checks if the objects refer to the same types.	[http://en.cppreference.com/w/cpp/types/type_info/operator_cmp Cppreference]
std::type_info::operator==	A										<pre><code>bool operator==( const type_info& rhs ) const;</code></pre>Checks if the objects refer to the same types.	[http://en.cppreference.com/w/cpp/types/type_info/operator_cmp Cppreference]
std::underlying_type	A										<pre><code>template< class T >\\nstruct underlying_type;</code></pre>Defines a member typedef <code>type</code> of type that is the underlying type for the enumeration <code>T</code>.	[http://en.cppreference.com/w/cpp/types/underlying_type Cppreference]
std::bad_optional_access	A										<pre><code>class bad_optional_access;</code></pre>Defines a type of object to be thrown as exception when accessing a std::optional object with uninitialized state.	[http://en.cppreference.com/w/cpp/utility/bad_optional_access Cppreference]
std::bitset	A										<pre><code>template< std::size_t N >\\nclass bitset;</code></pre>The class template <code>bitset</code> represents a fixed-size sequence of <code>N</code> bits.	[http://en.cppreference.com/w/cpp/utility/bitset Cppreference]
std::bitset::all	A										<pre><code>bool all() const;</code></pre>Checks if all, any or none of the bits are set to <code>true</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/all_any_none Cppreference]
std::bitset::any	A										<pre><code>bool any() const;</code></pre>Checks if all, any or none of the bits are set to <code>true</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/all_any_none Cppreference]
std::bitset::none	A										<pre><code>bool none() const;</code></pre>Checks if all, any or none of the bits are set to <code>true</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/all_any_none Cppreference]
std::bitset::count	A										<pre><code>size_t count() const;</code></pre>Returns the number of bits that are set to <code>true</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/count Cppreference]
std::bitset::flip	A										<pre><code>bitset<N>& flip();\\n< more overloads available ></code></pre>Flips bits, i.e. changes <code>true</code> values to <code>false</code> and <code>false</code> values to <code>true</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/flip Cppreference]
std::bitset::operator[]	A										<pre><code>reference operator[]( std::size_t pos );</code></pre>Accesses the bit at position <code>pos</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_at Cppreference]
std::bitset::operator!=	A										<pre><code>bool operator!=( const bitset<N>& rhs );</code></pre>1) Returns true if all of the bits in <code>*this</code> and <code>rhs</code> are equal.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_cmp Cppreference]
std::bitset::operator==	A										<pre><code>bool operator==( const bitset<N>& rhs );</code></pre>1) Returns true if all of the bits in <code>*this</code> and <code>rhs</code> are equal.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_cmp Cppreference]
std::bitset::operator&=	A										<pre><code>bitset<N>& operator&=( const bitset<N>& other );</code></pre>Performs binary AND, OR, XOR and NOT.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_logic Cppreference]
std::bitset::operator^=	A										<pre><code>bitset<N>& operator^=( const bitset<N>& other );</code></pre>Performs binary AND, OR, XOR and NOT.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_logic Cppreference]
std::bitset::operator|=	A										<pre><code>bitset<N>& operator|=( const bitset<N>& other );</code></pre>Performs binary AND, OR, XOR and NOT.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_logic Cppreference]
std::bitset::operator~	A										<pre><code>bitset<N> operator~() const;</code></pre>Performs binary AND, OR, XOR and NOT.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_logic Cppreference]
std::bitset::operator<<	A										<pre><code>bitset<N> operator<<( size_t pos ) const;\\n< more overloads available ></code></pre>Performs binary shift left and binary shift right.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt Cppreference]
std::bitset::operator<<=	A										<pre><code>bitset<N>& operator<<=( size_t pos );</code></pre>Performs binary shift left and binary shift right.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt Cppreference]
std::bitset::operator>>	A										<pre><code>bitset<N> operator>>( size_t pos ) const;\\n< more overloads available ></code></pre>Performs binary shift left and binary shift right.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt Cppreference]
std::bitset::operator>>=	A										<pre><code>bitset<N>& operator>>=( size_t pos );</code></pre>Performs binary shift left and binary shift right.	[http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt Cppreference]
std::bitset::reference	A										<pre><code>class reference;</code></pre>The std::bitset class includes std::bitset::reference as a publicly-accessible nested class.	[http://en.cppreference.com/w/cpp/utility/bitset/reference Cppreference]
std::bitset::reset	A										<pre><code>bitset<N>& reset();\\n< more overloads available ></code></pre>Sets bits to <code>false</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/reset Cppreference]
std::bitset::set	A										<pre><code>bitset<N>& set();\\n< more overloads available ></code></pre>Sets all bits to <code>true</code> or to specified value.	[http://en.cppreference.com/w/cpp/utility/bitset/set Cppreference]
std::bitset::size	A										<pre><code>size_t size() const;</code></pre>Returns the number of bits that the bitset can hold.	[http://en.cppreference.com/w/cpp/utility/bitset/size Cppreference]
std::bitset::test	A										<pre><code>bool test( size_t pos ) const;</code></pre>Returns the value of the bit at the position <code>pos</code>.	[http://en.cppreference.com/w/cpp/utility/bitset/test Cppreference]
std::bitset::to_ullong	A										<pre><code>unsigned long long to_ullong() const</code></pre>Converts the contents of the bitset to an <code>unsigned long long</code> integer.	[http://en.cppreference.com/w/cpp/utility/bitset/to_ullong Cppreference]
std::bitset::to_ulong	A										<pre><code>unsigned long to_ulong() const</code></pre>Converts the contents of the bitset to an <code>unsigned long</code> integer.	[http://en.cppreference.com/w/cpp/utility/bitset/to_ulong Cppreference]
std::declval	A										<pre><code>template< class T >\\ntypename std::add_rvalue_reference<T>::type declval();</code></pre>Converts any type <code>T</code> to a reference type, making it possible to use member functions in <code>decltype</code> expressions without specifying constructors.	[http://en.cppreference.com/w/cpp/utility/declval Cppreference]
std::forward	A										<pre><code>template< class T >\\nT&& forward( typename std::remove_reference<T>::type& t );\\n< more overloads available ></code></pre>When used according to the following recipe in a function template, forwards the argument to another function exactly as it was passed to the calling function.	[http://en.cppreference.com/w/cpp/utility/forward Cppreference]
std::bad_function_call	A										<pre><code>class bad_function_call;</code></pre><code>std::bad_function_call</code> is the type of the exception thrown by  <code>std::function::operator()</code>  if the function wrapper has no target.	[http://en.cppreference.com/w/cpp/utility/functional/bad_function_call Cppreference]
std::binary_function	A										<pre><code>template<\\n    class Arg1,\\n    class Arg2, \\n    class Result\\n> struct binary_function;</code></pre><code>binary_function</code> is a base class for creating function objects with two arguments.	[http://en.cppreference.com/w/cpp/utility/functional/binary_function Cppreference]
std::bind	A										<pre><code>template< class F, class... Args >\\n/*unspecified*/ bind( F&& f, Args&&... args );\\n< more overloads available ></code></pre>The function template <code>bind</code> generates a forwarding call wrapper for <code>f</code>.	[http://en.cppreference.com/w/cpp/utility/functional/bind Cppreference]
std::bit_and	A										<pre><code>template< class T >\\nstruct bit_and;</code></pre>Function object for performing bitwise AND.	[http://en.cppreference.com/w/cpp/utility/functional/bit_and Cppreference]
std::bit_or	A										<pre><code>template< class T >\\nstruct bit_or;</code></pre>Function object for performing bitwise OR.	[http://en.cppreference.com/w/cpp/utility/functional/bit_or Cppreference]
std::divides	A										<pre><code>template< class T >\\nstruct divides;</code></pre>Function object for performing division.	[http://en.cppreference.com/w/cpp/utility/functional/divides Cppreference]
std::equal_to	A										<pre><code>template< class T >\\nstruct equal_to;</code></pre>Function object for performing comparisons.	[http://en.cppreference.com/w/cpp/utility/functional/equal_to Cppreference]
std::function	A										<pre><code>template< class >\\nclass function; /* undefined */\\n< more overloads available ></code></pre>Class template <code>std::function</code> is a general-purpose polymorphic function wrapper.	[http://en.cppreference.com/w/cpp/utility/functional/function Cppreference]
std::function::operator()	A										<pre><code>R operator()( ArgTypes... args ) const;</code></pre>Calls the stored callable function target with the parameters <code>args</code>.	[http://en.cppreference.com/w/cpp/utility/functional/function/operator() Cppreference]
std::function::operator=	A										<pre><code>function& operator=( const function& other );\\n< more overloads available ></code></pre>Assigns a new <i>target</i> to <code>std::function</code>.	[http://en.cppreference.com/w/cpp/utility/functional/function/operator= Cppreference]
std::function::operator bool	A										<pre><code>explicit operator bool() const;</code></pre>Checks whether <code>*this</code> stores a callable function target, i.e. is not empty.	[http://en.cppreference.com/w/cpp/utility/functional/function/operator_bool Cppreference]
std::function::swap	A										<pre><code>void swap( function& other );</code></pre>Exchanges the stored callable objects of <code>*this</code> and <code>other</code>.	[http://en.cppreference.com/w/cpp/utility/functional/function/swap Cppreference]
std::function::target	A										<pre><code>template< class T > \\nT* target();\\n< more overloads available ></code></pre>Returns a pointer to the stored callable function target.	[http://en.cppreference.com/w/cpp/utility/functional/function/target Cppreference]
std::function::target_type	A										<pre><code>const std::type_info& target_type() const;</code></pre>Returns the type of the stored function.	[http://en.cppreference.com/w/cpp/utility/functional/function/target_type Cppreference]
std::greater	A										<pre><code>template< class T >\\nstruct greater;</code></pre>Function object for performing comparisons.	[http://en.cppreference.com/w/cpp/utility/functional/greater Cppreference]
std::greater_equal	A										<pre><code>template< class T >\\nstruct greater_equal;</code></pre>Function object for performing comparisons.	[http://en.cppreference.com/w/cpp/utility/functional/greater_equal Cppreference]
std::is_bind_expression	A										<pre><code>template< class T >\\nstruct is_bind_expression;</code></pre>If <code>T</code> is the type produced by a call to std::bind, this template provides the member constant <code>value</code> equal <code>true</code>.	[http://en.cppreference.com/w/cpp/utility/functional/is_bind_expression Cppreference]
std::is_placeholder	A										<pre><code>template< class T >\\nstruct is_placeholder;</code></pre>If <code>T</code> is the type of a standard placeholder (_1, _2, _3, .	[http://en.cppreference.com/w/cpp/utility/functional/is_placeholder Cppreference]
std::less	A										<pre><code>template< class T >\\nstruct less;</code></pre>Function object for performing comparisons.	[http://en.cppreference.com/w/cpp/utility/functional/less Cppreference]
std::less_equal	A										<pre><code>template< class T >\\nstruct less_equal;</code></pre>Function object for performing comparisons.	[http://en.cppreference.com/w/cpp/utility/functional/less_equal Cppreference]
std::logical_and	A										<pre><code>template< class T >\\nstruct logical_and;</code></pre>Function object for performing logical AND (logical conjunction).	[http://en.cppreference.com/w/cpp/utility/functional/logical_and Cppreference]
std::logical_not	A										<pre><code>template< class T >\\nstruct logical_not;</code></pre>Function object for performing logical NOT (logical negation).	[http://en.cppreference.com/w/cpp/utility/functional/logical_not Cppreference]
std::logical_or	A										<pre><code>template< class T >\\nstruct logical_or;</code></pre>Function object for performing logical OR (logical disjunction).	[http://en.cppreference.com/w/cpp/utility/functional/logical_or Cppreference]
std::mem_fn	A										<pre><code>template< class R, class T >\\n/*unspecified*/ mem_fn(R T::* pm);\\n< more overloads available ></code></pre>Function template <code>std::mem_fn</code> generates wrapper objects for pointers to members, which can store, copy, and invoke a pointer to member.	[http://en.cppreference.com/w/cpp/utility/functional/mem_fn Cppreference]
std::minus	A										<pre><code>template< class T >\\nstruct minus;</code></pre>Function object for performing subtraction.	[http://en.cppreference.com/w/cpp/utility/functional/minus Cppreference]
std::modulus	A										<pre><code>template< class T >\\nstruct modulus;</code></pre>Function object for computing remainders of divisions.	[http://en.cppreference.com/w/cpp/utility/functional/modulus Cppreference]
std::multiplies	A										<pre><code>template< class T >\\nstruct multiplies;</code></pre>Function object for performing multiplication.	[http://en.cppreference.com/w/cpp/utility/functional/multiplies Cppreference]
std::negate	A										<pre><code>template< class T >\\nstruct negate;</code></pre>Function object for performing negation.	[http://en.cppreference.com/w/cpp/utility/functional/negate Cppreference]
std::not1	A										<pre><code>template< class Predicate >\\nstd::unary_negate<Predicate> not1(const Predicate& pred);</code></pre><code>not1</code> is a helper function to create a function object that returns the complement of the unary predicate function passed.	[http://en.cppreference.com/w/cpp/utility/functional/not1 Cppreference]
std::not2	A										<pre><code>template< class Predicate >\\nstd::binary_negate<Predicate> not2(const Predicate& pred);</code></pre><code>not2</code> is a helper function to create a function object that returns the complement of the binary predicate function passed.	[http://en.cppreference.com/w/cpp/utility/functional/not2 Cppreference]
std::not_equal_to	A										<pre><code>template< class T >\\nstruct not_equal_to;</code></pre>Function object for performing comparisons.	[http://en.cppreference.com/w/cpp/utility/functional/not_equal_to Cppreference]
std::plus	A										<pre><code>template< class T >\\nstruct plus;</code></pre>Function object for performing addition.	[http://en.cppreference.com/w/cpp/utility/functional/plus Cppreference]
std::cref	A										<pre><code>template< class T >\\nstd::reference_wrapper<const T> cref( const T& t );\\n< more overloads available ></code></pre>Function templates <code>ref</code> and <code>cref</code> are helper functions that generate an object of type std::reference_wrapper, using template argument deduction to determine the template argument of the result.	[http://en.cppreference.com/w/cpp/utility/functional/ref Cppreference]
std::ref	A										<pre><code>template< class T >\\nstd::reference_wrapper<T> ref(T& t);\\n< more overloads available ></code></pre>Function templates <code>ref</code> and <code>cref</code> are helper functions that generate an object of type std::reference_wrapper, using template argument deduction to determine the template argument of the result.	[http://en.cppreference.com/w/cpp/utility/functional/ref Cppreference]
std::reference_wrapper	A										<pre><code>template< class T >\\nclass reference_wrapper;</code></pre><code>std::reference_wrapper</code> is a class template that wraps a reference in a copyable, assignable object.	[http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper Cppreference]
std::reference_wrapper::get	A										<pre><code>T& get() const;</code></pre>Returns the stored reference.	[http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/get Cppreference]
std::reference_wrapper::operator T&	A										<pre><code>operator T& () const;</code></pre>Returns the stored reference.	[http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/get Cppreference]
std::reference_wrapper::operator()	A										<pre><code>template< class... ArgTypes >\\ntypename std::result_of<T&(ArgTypes&&...)>::type\\n    operator() ( ArgTypes&&... args ) const;</code></pre>Calls the callable object, reference to which is stored.	[http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/operator() Cppreference]
std::reference_wrapper::operator=	A										<pre><code>reference_wrapper& operator=( const reference_wrapper<T>& other );</code></pre>Copy assignment operator.	[http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/operator= Cppreference]
std::unary_function	A										<pre><code>template <typename ArgumentType, typename ResultType>\\nstruct unary_function;</code></pre><code>unary_function</code> is a base class for creating function objects with one argument.	[http://en.cppreference.com/w/cpp/utility/functional/unary_function Cppreference]
std::hash	A										<pre><code>template< class Key >\\nstruct hash; // not defined</code></pre>The hash template defines a function object that implements a hash function.	[http://en.cppreference.com/w/cpp/utility/hash Cppreference]
std::initializer_list	A										<pre><code>template< class T >\\nclass initializer_list;</code></pre>An object of type <code>std::initializer_list&lt;T&gt;</code> is a lightweight proxy object that provides access to an array of objects of type <code>T</code>.	[http://en.cppreference.com/w/cpp/utility/initializer_list Cppreference]
std::initializer_list::begin	A										<pre><code>const T* begin() const;</code></pre>Returns a pointer to the first element in the initializer list.	[http://en.cppreference.com/w/cpp/utility/initializer_list/begin Cppreference]
std::initializer_list::end	A										<pre><code>const T* end() const;</code></pre>Returns a pointer to one past the last element in the initializer list, i.e. <code>begin() + size()</code>.	[http://en.cppreference.com/w/cpp/utility/initializer_list/end Cppreference]
std::initializer_list::size	A										<pre><code>size_type size() const;</code></pre>Returns the number of elements in the initializer list, i.e. <code>std::distance(begin(), end())</code>.	[http://en.cppreference.com/w/cpp/utility/initializer_list/size Cppreference]
std::integer_sequence	A										<pre><code>template< class T, T... Ints >\\nclass integer_sequence;</code></pre>The class template <code>std::integer_sequence</code> represents a compile-time sequence of integers.	[http://en.cppreference.com/w/cpp/utility/integer_sequence Cppreference]
std::move	A										<pre><code>template< class T >\\ntypename std::remove_reference<T>::type&& move( T&& t );</code></pre><code>std::move</code> obtains an rvalue reference to its argument, which converts it to an xvalue.	[http://en.cppreference.com/w/cpp/utility/move Cppreference]
std::move_if_noexcept	A										<pre><code>template< class T >\\ntypename std::conditional<  \\n    !std::is_nothrow_move_constructible<T>::value && std::is_copy_constructible<T>::value,\\n    const T&,\\n    T&& \\n>::type move_if_noexcept(T& x);</code></pre><code>move_if_noexcept</code> obtains an rvalue reference to its argument if its move constructor does not throw exceptions, otherwise obtains an lvalue reference to its argument.	[http://en.cppreference.com/w/cpp/utility/move_if_noexcept Cppreference]
std::nullopt_t	A										<pre><code>struct nullopt_t {};</code></pre><code>std::nullopt_t</code> is an empty class type used to indicate <code>optional</code> type with uninitialized state.	[http://en.cppreference.com/w/cpp/utility/nullopt_t Cppreference]
std::optional	A										<pre><code>template< class T >\\nclass optional;</code></pre>The class template <code>std::optional</code> manages an <i>optional</i> contained value.	[http://en.cppreference.com/w/cpp/utility/optional Cppreference]
std::optional::emplace	A										<pre><code>template< class... Args > \\nvoid emplace( Args&&... args );\\n< more overloads available ></code></pre>Constructs the contained value in-place.	[http://en.cppreference.com/w/cpp/utility/optional/emplace Cppreference]
std::make_optional	A										<pre><code>template< class T > \\nconstexpr optional<typename std::decay<T>::type> \\n    make_optional( T&& value );</code></pre>Creates an optional object from <code>value</code>.	[http://en.cppreference.com/w/cpp/utility/optional/make_optional Cppreference]
std::optional::operator bool	A										<pre><code>constexpr explicit operator bool() const;</code></pre>Checks whether <code>*this</code> is in <i>engaged</i> state, i.e. whether the contained value is initialized.	[http://en.cppreference.com/w/cpp/utility/optional/operator_bool Cppreference]
std::optional::value	A										<pre><code>constexpr const T& value() const;\\n< more overloads available ></code></pre>Returns the contained value.	[http://en.cppreference.com/w/cpp/utility/optional/value Cppreference]
std::optional::value_or	A										<pre><code>template< class U > \\nconstexpr T value_or( U&& value ) const&;\\n< more overloads available ></code></pre>Returns the contained value if <code>*this</code> is in <i>engaged</i> state, otherwise returns <code>value</code>.	[http://en.cppreference.com/w/cpp/utility/optional/value_or Cppreference]
std::pair	A										<pre><code>template<\\n    class T1,\\n    class T2\\n> struct pair;</code></pre><code>std::pair</code> is a struct template that provides a way to store two heterogeneous objects as a single unit.	[http://en.cppreference.com/w/cpp/utility/pair Cppreference]
std::pair::operator=	A										<pre><code>pair& operator=( const pair& other );\\n< more overloads available ></code></pre>Replaces the contents of the pair.	[http://en.cppreference.com/w/cpp/utility/pair/operator= Cppreference]
std::pair::swap	A										<pre><code>void swap(pair& other);</code></pre>Swaps <code>first</code> with <code>other.first</code> and <code>second</code> with <code>other.second</code>.	[http://en.cppreference.com/w/cpp/utility/pair/swap Cppreference]
std::piecewise_construct_t	A										<pre><code>struct piecewise_construct_t { };</code></pre>std::piecewise_construct_t is an empty struct tag type used to disambiguate between different functions that take two tuple arguments.	[http://en.cppreference.com/w/cpp/utility/piecewise_construct_t Cppreference]
std::_Exit	A										<pre><code>[[noreturn]] void _Exit( int exit_code );</code></pre>Causes normal program termination to occur without completely cleaning the resources.	[http://en.cppreference.com/w/cpp/utility/program/_Exit Cppreference]
std::at_quick_exit	A										<pre><code>extern "C"   int at_quick_exit( void (*func)() );\\nextern "C++" int at_quick_exit( void (*func)() );</code></pre>Registers the function pointed to by <code>func</code> to be called on quick program termination (via std::quick_exit).	[http://en.cppreference.com/w/cpp/utility/program/at_quick_exit Cppreference]
std::atexit	A										<pre><code>extern "C"   int atexit( void (*func)() );\\nextern "C++" int atexit( void (*func)() );</code></pre>Registers the function pointed to by <code>func</code> to be called on normal program termination .	[http://en.cppreference.com/w/cpp/utility/program/atexit Cppreference]
std::getenv	A										<pre><code>const char *getenv( const char *env_var );</code></pre>Searches for an environmental variable with name <code>env_var</code> in the host-specified environment list and returns information associated with it.	[http://en.cppreference.com/w/cpp/utility/program/getenv Cppreference]
std::longjmp	A										<pre><code>void longjmp( std::jmp_buf env, int status );</code></pre>Loads the execution context <code>env</code> saved by a previous call to setjmp.	[http://en.cppreference.com/w/cpp/utility/program/longjmp Cppreference]
std::quick_exit	A										<pre><code>[[noreturn]] void quick_exit( int exit_code );</code></pre>Causes normal program termination to occur without completely cleaning the resources.	[http://en.cppreference.com/w/cpp/utility/program/quick_exit Cppreference]
std::raise	A										<pre><code>int raise( int sig );</code></pre>Sends signal sig to the program.	[http://en.cppreference.com/w/cpp/utility/program/raise Cppreference]
setjmp	A										<pre><code>#define setjmp(env) /* implementation-defined */</code></pre>Saves the current execution context into a variable <code>env</code> of type std::jmp_buf.	[http://en.cppreference.com/w/cpp/utility/program/setjmp Cppreference]
std::signal	A										<pre><code>void (*signal( int sig, void (*handler) (int))) (int);</code></pre>Sets the error handler for signal <code>sig</code>.	[http://en.cppreference.com/w/cpp/utility/program/signal Cppreference]
std::system	A										<pre><code>int system( const char *command );</code></pre>Calls the host environment's command processor with command parameter.	[http://en.cppreference.com/w/cpp/utility/program/system Cppreference]
std::rel_ops::operator!=	A										<pre><code>template< class T >\\nbool operator!=( const T& lhs, const T& rhs );</code></pre>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.	[http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp Cppreference]
std::rel_ops::operator<=	A										<pre><code>template< class T >\\nbool operator<=( const T& lhs, const T& rhs );</code></pre>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.	[http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp Cppreference]
std::rel_ops::operator>	A										<pre><code>template< class T >\\nbool operator>( const T& lhs, const T& rhs );\\n< more overloads available ></code></pre>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.	[http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp Cppreference]
std::rel_ops::operator>=	A										<pre><code>template< class T >\\nbool operator>=( const T& lhs, const T& rhs );</code></pre>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.	[http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp Cppreference]
std::tuple	A										<pre><code>template< class... Types >\\nclass tuple;</code></pre>Class template <code>std::tuple</code> is a fixed-size collection of heterogeneous values.	[http://en.cppreference.com/w/cpp/utility/tuple Cppreference]
std::forward_as_tuple	A										<pre><code>template< class... Types >\\ntuple<Types&&...> forward_as_tuple( Types&&... args );</code></pre>Constructs a tuple of references to the arguments in <code>args</code> suitable for forwarding as an argument to a function.	[http://en.cppreference.com/w/cpp/utility/tuple/forward_as_tuple Cppreference]
std::make_tuple	A										<pre><code>template< class... Types >\\ntuple<VTypes...> make_tuple( Types&&... args );</code></pre>Creates a tuple object, deducing the target type from the types of arguments.	[http://en.cppreference.com/w/cpp/utility/tuple/make_tuple Cppreference]
std::tuple::operator=	A										<pre><code>tuple& operator=( const tuple& other );\\n< more overloads available ></code></pre>Replaces the contents of the tuple with the contents of another tuple or a pair.	[http://en.cppreference.com/w/cpp/utility/tuple/operator= Cppreference]
std::tuple::swap	A										<pre><code>void swap( tuple& other );</code></pre>Calls std::swap for each element in <code>*this</code> and its corresponding element in <code>other</code>.	[http://en.cppreference.com/w/cpp/utility/tuple/swap Cppreference]
std::tie	A										<pre><code>template< class... Types >\\ntuple<Types&...> tie( Types&... args );</code></pre>Creates a tuple of lvalue references to its arguments or instances of std::ignore.	[http://en.cppreference.com/w/cpp/utility/tuple/tie Cppreference]
std::tuple_cat	A										<pre><code>template< class... Tuples >\\ntuple<CTypes...> tuple_cat(Tuples&&... args);</code></pre>Constructs a tuple that is a concatenation of all tuples in <code>args</code>.	[http://en.cppreference.com/w/cpp/utility/tuple/tuple_cat Cppreference]
va_arg	A										<pre><code>T va_arg( va_list ap, T );</code></pre>The <code>va_arg</code> macro expands to an expression of type <code>T</code> that corresponds to the next parameter from the va_list <code>ap</code>.	[http://en.cppreference.com/w/cpp/utility/variadic/va_arg Cppreference]
va_copy	A										<pre><code>void va_copy( va_list dest, va_list src );</code></pre>The <code>va_copy</code> macro copies <code>src</code> to <code>dest</code>.	[http://en.cppreference.com/w/cpp/utility/variadic/va_copy Cppreference]
va_end	A										<pre><code>void va_end( va_list ap );</code></pre>The <code>va_end</code> macro performs cleanup for an <code>ap</code> object initialized by a call to va_start or va_copy.	[http://en.cppreference.com/w/cpp/utility/variadic/va_end Cppreference]
va_list	A										<pre><code>/* unspecified */ va_list;</code></pre><code>va_list</code> is a complete object type suitable for holding the information needed by the macros va_start, va_copy, va_arg, and va_end.	[http://en.cppreference.com/w/cpp/utility/variadic/va_list Cppreference]
va_start	A										<pre><code>void va_start( va_list ap, parm_n );</code></pre>The <code>va_start</code> macro enables access to the variable arguments following the named argument <code>parm_n</code>.	[http://en.cppreference.com/w/cpp/utility/variadic/va_start Cppreference]
